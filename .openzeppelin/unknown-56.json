{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x663b98601f70E9822c06792c46521A689D14f33c",
    "txHash": "0x4927df593e6e869b5689bf5d224be6951aab6c54557c34b8f7dea0c55842f824"
  },
  "proxies": [
    {
      "address": "0xEDE96ed973ff50478B9CdA0FD002Dc7560fD249d",
      "txHash": "0xa6608f0250b9b41dbb2776987fb32ecaa24a5a907fcbc357b08ca4d30adf04f0",
      "kind": "transparent"
    },
    {
      "address": "0x5D9ecCB5eC0ea1C4F80f1cBE794e5493d930363C",
      "txHash": "0x8e0450594d1d7f03f63e8cfa1b675407e4479296cd6221ba226af575802e5ede",
      "kind": "transparent"
    },
    {
      "address": "0x3272C7BF7C022c88087F2DF8cde8e8395DE76BeF",
      "txHash": "0xfbf782502fb883d087788afc1911487d227d8fb8dd0e0241dc53ec48b5793893",
      "kind": "transparent"
    },
    {
      "address": "0xf7F1E5e3178c3785f5f822641bffa3c39d121d1c",
      "txHash": "0x277e8b29d9288a3487b7e79ffb60e1b1b68858f66a1f1dabf976f9e1af6de35c",
      "kind": "transparent"
    },
    {
      "address": "0x651A43C18622201985e6c0AAB80106535D04e2D9",
      "txHash": "0x74e2c0cdd689404cf5fd8c3cc60e95dcb0f95940b4dc903fc463d5620b25e329",
      "kind": "transparent"
    },
    {
      "address": "0xF8678Bf540C1fA239BBaEB65943d20e4d079B27C",
      "txHash": "0xa3d533574ac959d2485c807ebea1e7b5f13f1377cfd02b8e81705d10543f2742",
      "kind": "transparent"
    },
    {
      "address": "0xB4f5603b65F2123EF4786e91C8A5B617061Cf50b",
      "txHash": "0x0e568611efc618f840ec8d746b68c714dc280cf8990183703166017edcbd08eb",
      "kind": "transparent"
    },
    {
      "address": "0xa702D8072c35b9A6b6e8cdC0Bd9194c349428Ec0",
      "txHash": "0x4a71a3d8a99e6290d693675a01450f5668c59236ec2128fb18ecc08b5e465c11",
      "kind": "transparent"
    },
    {
      "address": "0xd14b4DB33b7574a27E60301E159a6a47d2fdA390",
      "txHash": "0xb798a01917a6a892ccbf5db0075c2886cff64c24b1a63b6361ac1e069fd51770",
      "kind": "transparent"
    },
    {
      "address": "0xD05f27131cE3F9ab662a94ce744cB83e3902e097",
      "txHash": "0x76bde1a20673e452e65008866a8ce5da17e1afc7df1838df775efc9de6b76cba",
      "kind": "transparent"
    },
    {
      "address": "0x3da922d6C49f940E7d6Bf73369be2758074071Bb",
      "txHash": "0xdd042bacaf1feff740fab4836e1e681c9038633356190039d0872df7adb87fbf",
      "kind": "transparent"
    },
    {
      "address": "0xC9661A88Ad86Af8Ad598Aa8FF137213ca3c6732b",
      "txHash": "0x255bb056c2cdcd6e5709393925cae7428621f56dabe761ff5176bb97412cec1b",
      "kind": "transparent"
    },
    {
      "address": "0x07849A675E871F2A51B3946824e8F72d629C4aDd",
      "txHash": "0x52e3de9a4341ea7fadcf54d912edffae8ada1ad3448e8dc8e7edab784fb86008",
      "kind": "transparent"
    },
    {
      "address": "0x112d26d107D04E794dB0362c6016a638e18514DF",
      "txHash": "0xfeea612e2dd9ec9bb31d8270d42d4bdba3c451c1caa7e70c82e7c1fb46f84085",
      "kind": "transparent"
    },
    {
      "address": "0x5Ac852AcBd68dbC242A07703AAba76C1cE41BFA1",
      "txHash": "0xe246e3a5654cda9124a54f02832539a170d94fbd7e771081db56f04d59bbdf44",
      "kind": "transparent"
    },
    {
      "address": "0x193b54A74aF245B4fB624e72f12d4deCdd242004",
      "txHash": "0xd903b47f14b58819bc870281ff1f7a55979b69747b3fa134bc5cb62c137b3c5f",
      "kind": "transparent"
    },
    {
      "address": "0xcbF1802bFa7200078867c32a4f332FB888f7e978",
      "txHash": "0x986b32391c8e9e85e8c4d4d980a74f797d2fc1394a81e87f798610d947ec9b94",
      "kind": "transparent"
    },
    {
      "address": "0x53379FcdA9CBb5735E6D80756F04414246ecD0aa",
      "txHash": "0xb95c59e2a755ca7e78379690ffa393e7e373ae247f91aae5b1699e55ae34b07e",
      "kind": "transparent"
    },
    {
      "address": "0x5B287B89284c4e07CDF75a6e2D971Cf11619E626",
      "txHash": "0xe321b946f108ef6bd8b0d40cc2f1c04f6e804d673ac822ea0ff9c4bc0a384ef1",
      "kind": "transparent"
    },
    {
      "address": "0x4CDBf33BBEFF3478570B1Da43569ac56151a3a53",
      "txHash": "0xa0c796027940d694f710eb2dd0b98c0ed2a313f310007fff5437069d847ce0ea",
      "kind": "transparent"
    },
    {
      "address": "0xA79adBE3dbbA18e72CABb10F31978CeBb2b169bA",
      "txHash": "0x9fa5a41bcd3cc5587f665cae3dc890d79ab97015ae1da718279fa3167fb6ecd4",
      "kind": "transparent"
    },
    {
      "address": "0xd843A50BA5Ddb7BdFe9f0c096D086C11198cbbad",
      "txHash": "0xe757eba7909638a6ac721bb78a0bc0829727afd5924ff27cdc00dca365853fec",
      "kind": "transparent"
    },
    {
      "address": "0xe0387845F8289fD5875e7193064392e061f46E58",
      "txHash": "0xfa2f8fe9ef640e84e71cf7268c96c661d64dac2b3f80fd5a20a0ce2eea07dab7",
      "kind": "transparent"
    },
    {
      "address": "0x875f67f4142E1c97184cE4fb6706c355381c2323",
      "txHash": "0x2e44b04ee7d4b84af26a6468359bd078137d84e970421a6a46bbb8b6bacee6a9",
      "kind": "transparent"
    },
    {
      "address": "0xf4AaF1281F57917CE5f85eaaC5e0BE3745404fa7",
      "txHash": "0xfa992277f0e92f7f91925f33100f2fa289b2f2526504bb3a18327fe591160eba",
      "kind": "transparent"
    },
    {
      "address": "0x4115752833e88A81A6754F78C7F2700F3d6625aF",
      "txHash": "0x765acae79b34679b06fc3914c14e8a11b298f1ef3b04fdf5b9d2a0cb48ef71c1",
      "kind": "transparent"
    },
    {
      "address": "0x52dB88a02544Ce39F3aA3B7075A509ae85fE1520",
      "txHash": "0x5d8dd74eb914cd0905470c12f32f4b374f88c74cda0cd6f4fea6576aa61a1d74",
      "kind": "transparent"
    },
    {
      "address": "0x689b75fE4162EFf3B2E7D2CBC452b7D1A8e92406",
      "txHash": "0xfb1e3108856320a22a92c8971936d140be59331ffeb27dd45990f4ec3af345ca",
      "kind": "transparent"
    },
    {
      "address": "0x952edf26BC60e479DF65972C17fB3C28143679af",
      "txHash": "0x483f8b2cfc3435c5a6cf76810112ef44c4ddc7139c6ae5decfb3ede470aa3a3f",
      "kind": "transparent"
    },
    {
      "address": "0xd8C85566F6e6bfA9c5381Bc2A510F515031f4bef",
      "txHash": "0xf53ba8cc0539adafeb04f455f3a900972322a97549e45a8871cec44e05567c79",
      "kind": "transparent"
    },
    {
      "address": "0xEC20F4E9E344f358b8a0389153b9862EE6747d1a",
      "txHash": "0x988f01c251e1b4780edbd5582779e21332bad1022a87c87aa85877824e1daf42",
      "kind": "transparent"
    },
    {
      "address": "0x0d0bD68F964f735d01c36082441e7E6bA12E2162",
      "txHash": "0x51fc2c273e669ec0087d6c647a0a54e1e059c48cc856d7af28832143267a073c",
      "kind": "transparent"
    },
    {
      "address": "0x739eE95B51c3826d35f3d36De137333733Ef4554",
      "txHash": "0x1eecd716f0737561d32392648b2d543500b0e962cf1f316173a72eecb88a0b79",
      "kind": "transparent"
    },
    {
      "address": "0x0aE9225368645e4506b8382CF36C01978C97Ce83",
      "txHash": "0xa8a9542173c589cb9a700109a8844bde9b66cc8ceb116142da2049f510ed47e9",
      "kind": "transparent"
    },
    {
      "address": "0xe003195b73d16E74031Fd71f5F8ebe3F226f0B09",
      "txHash": "0xa82620d0a2e4f0faa7b83f304a1461d01659b407eda9499ec4a6d3709fb7be68",
      "kind": "transparent"
    },
    {
      "address": "0x93742B530B08151AdeE1847347dE71bF6cdB27e8",
      "txHash": "0x0734bbba0959b63aaf9e109e69215ceb6c96f08a6116d23531a616a047bc227f",
      "kind": "transparent"
    },
    {
      "address": "0x89958db99aA315314DF53e73963B52D08C0F3b92",
      "txHash": "0x0de91db263a6c7b895f87ab6c62e95c44edf593cd6c405f7492a6e90beb19738",
      "kind": "transparent"
    },
    {
      "address": "0x3968b09ECFA8a3489ffAa416D4f1448C43Bdc3c3",
      "txHash": "0x2b0bf0f0ce232da00af6a9340c7b19a7c02220efd017e227a5fc50544294dad9",
      "kind": "transparent"
    },
    {
      "address": "0x50d7c2Cc0fc686C1F9434Bd9Af78A1fB9293B211",
      "txHash": "0x13c7a86d360f216d2cd889743c0630e6addaec0d0ac93a010b321370cbc63ec2",
      "kind": "transparent"
    },
    {
      "address": "0xF30914115e0e551D709CBAD599Ed358e359eA515",
      "txHash": "0xd054ad708c566bb5e694a02c4c84be2e9438d32434a1b811a058a8c3214ca84c",
      "kind": "transparent"
    },
    {
      "address": "0x4BFBE60Cd5B7D6A73f12dba42014CB744b0C5D4a",
      "txHash": "0x9823ce8aa98d6397ad3f6e925fd774ff318b96cc38e0ac86da2cff74fa997625",
      "kind": "transparent"
    },
    {
      "address": "0x672f904f8E124a2B6F576b275eEBfc029B7cce39",
      "txHash": "0xef2fe9d48aaaa97fd73ad78c70869373b6be1cf4d38e8da2afee051e6715c0f6",
      "kind": "transparent"
    },
    {
      "address": "0x883a31a27fC6F62996e942221918F665BDEdA38b",
      "txHash": "0x616ab283cc7b14025d3e070f3d1a425c501b76d04683a978d3d13f07ec95fc91",
      "kind": "transparent"
    },
    {
      "address": "0xa870CE4604fac6F9aEd682b050DD25CC13710bE8",
      "txHash": "0xb666f54c1ab1d972540757cd48173f7d5aaebe7a70acd9256da93dd5953345f4",
      "kind": "transparent"
    },
    {
      "address": "0x1092d809123df6204E5F289Eb8975aA5cc0F0cc6",
      "txHash": "0x3931785ed330f8f21dd57f299ba268af1dea2672b31597fd506bfc2f575a1992",
      "kind": "transparent"
    },
    {
      "address": "0x3b7B9398d93aCd8f3fc98991a5Be84976a709e8f",
      "txHash": "0x58ec76c87da85f7a15c6a33050a48a67f5807548358b68f30bb54d63039f5529",
      "kind": "transparent"
    },
    {
      "address": "0x8fa125D2c5aC1b14a56651480E81233eBD53A198",
      "txHash": "0xc2bda1c1b32218ee8861cbe8ead382814313cbb22951c3f0b6b2053f2d01d053",
      "kind": "transparent"
    },
    {
      "address": "0x415dc128619d7788Ba5a532963195438964c6909",
      "txHash": "0xf5bb06f445755a770ff7d99398cdce5981ebe85d7fa16a0f6db2aa3bd503c15c",
      "kind": "transparent"
    },
    {
      "address": "0x8e8463Bc1e7B4d30773b5c4dB1ca9B303af02C55",
      "txHash": "0x24ab8b502ca3f38e6b0ca35f83740c74b3086154950712d41a21dc306fe3291c",
      "kind": "transparent"
    },
    {
      "address": "0xC39AAc174afe33cBeD9634DC55F524100B38F755",
      "txHash": "0x36902add4d3e5cf5ac5a539a65f6a82cc47db375abc4d99b8508ea880c114ab8",
      "kind": "transparent"
    },
    {
      "address": "0xC04C0f8d8ECF0Be7732852b92E1Ea59d56554c85",
      "txHash": "0x850bf46af9d19cbdbae994829f554865907a7aee20c1c9d727d5c56507622f12",
      "kind": "transparent"
    },
    {
      "address": "0xBd38E9963D3FE7A140BAC77c2bDF310F11f3D1B2",
      "txHash": "0xd606053a6a72961ac55a6ff7ad980329adf8b3474b88795919805df810d9d957",
      "kind": "transparent"
    },
    {
      "address": "0x49FC642c46Db358849053f9Fb053baEca0599f19",
      "txHash": "0xe718b14c143fd6616e255eb0c59f1011c750ed9e3974f0026bda6b7dc8262808",
      "kind": "transparent"
    },
    {
      "address": "0x5b3bfaC9f25EaA0606b3609325cAF7Bfb4Cc46Ce",
      "txHash": "0x55303560c6242fac7c9b2994f7e8ad46dfa84c944483f7f4e7b9214a32b4f926",
      "kind": "transparent"
    },
    {
      "address": "0xbC6e5937E63870b369aAB6B14b3Ac4722C935428",
      "txHash": "0x72bf742488bf17b796cd1479cee4c3711ac768128160a7dd0ee958e20845d94f",
      "kind": "transparent"
    },
    {
      "address": "0x594d9Fd60E5909D152Fb0198Fb76be6B3803CCA4",
      "txHash": "0x4bb64594fb616b8eeca52e7b12f5e8fff5ddc4a36733cec49f6b59f049acc33b",
      "kind": "transparent"
    },
    {
      "address": "0x463058430b1Ee3f08efC6D9993558c72bf29C2Cc",
      "txHash": "0x2eec71f7a9078f825299b36c972f7d62a4313677e8e2a92c9f232d8e930a09a2",
      "kind": "transparent"
    },
    {
      "address": "0xB779Ac4D5aBBe987F90b16feb2669D330cF42Acc",
      "txHash": "0x102a3bdf6145f0d4f89bc18986636478af7595525b5b1591a63f0adf2ba4ac75",
      "kind": "transparent"
    },
    {
      "address": "0xE110f603D6468d02085b73a8E8995195c521E8eC",
      "txHash": "0x03edb9f5e94a9e6b31bcffa69fd72c36779071521457d294ceb21e5d9b68d6b8",
      "kind": "transparent"
    },
    {
      "address": "0xe6b363365447A2E937A3aA77ca0e3afCE0290fF5",
      "txHash": "0x5cc67cce8c06fe560580a0eec3823395c1eb3ed78cc5e38d048f0543a9c2b07b",
      "kind": "transparent"
    },
    {
      "address": "0xf05bD0d879Dee57f37956391625bD6249F451Ad0",
      "txHash": "0x6174305ec23ec7ae71a0f00c0e90a7654ad1c9dcdce0f68a263d1d3e8f6b6fed",
      "kind": "transparent"
    },
    {
      "address": "0xbb344fA4d45731EB9efD15C9aC496f2722380ad9",
      "txHash": "0x6fcd244debec3d4776a123389f0b20559a7cd839670b943ed7302c2b3fa1c41b",
      "kind": "transparent"
    },
    {
      "address": "0x0C66a76B5f2eF5E11CbD528296EE830CfFCCE0bF",
      "txHash": "0x27d7421d62c1af43b8a7d0558e38204e577d8d708291c33087ed731c7d143213",
      "kind": "transparent"
    },
    {
      "address": "0xf086642A6f854bcd53773E8E91F2D611Ad1888e8",
      "txHash": "0x6a38ff0e6b35a9b0ff8c15e6e500a70bf701ad00a9c72b5c927f35930379ef66",
      "kind": "transparent"
    }
  ],
  "impls": {
    "273d1c079a4c7d426d4ee4190d36a5dc735b0f08ae08aa02eeedc6b979077b4c": {
      "address": "0xDDB87Bf6c3774cb2a3e066aC75d477cAEf2D7748",
      "txHash": "0x006bec1f2cf880101a5ef2fcc7cb4aabce2e768e52ed1223b1405a3abaae8055",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:17"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:47"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:49"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)9092_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)9107_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:59"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:61"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)9152_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:69"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:71"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:73"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)9092_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)9092_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)9107_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)9107_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)9152_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)9152_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "2518212c62f67ef18c7a4e76996cf2d98ebd0e874a3310f93f8078bc06ca9e52": {
      "address": "0xDDD25b5831bbc41e0E569b30585f9694FacF24c4",
      "txHash": "0x185d2d58871667cdb1bc7b2aaf03dea836f18b56d234d066cd29c8507b0328ea",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:13"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:14"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:15"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:16"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:17"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:18"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:19"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:20"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:21"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:22"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:23"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:24"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:25"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:26"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)10440_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:33"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)10440_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)10440_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "5622d838435131031852024e040889f9c585618fba2c1dd1f59e061d00c2cbbc": {
      "address": "0x9bDDE0516511637f85de9E25aE5f2EeD60D9A570",
      "txHash": "0xceeb8baf9012aaca06de5faf797e37271f9fbe942a0d190f1a83364e7b1196fb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)5458_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "BSCD",
            "label": "pause",
            "type": "t_bool",
            "src": "contracts/token/BSCD.sol:15"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)5458_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)5458_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5157_storage"
              }
            ]
          },
          "t_struct(Set)5157_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "392e90ec0d8d480e19b59373ae4949bb2a0268e5b7336050dc86f0f1067bc4d7": {
      "address": "0x064305E0D4eEeF24952C6E39feaF300d63808598",
      "txHash": "0x5bebf101fae45e9cf0e2f70405a879498b37d937773579d32d83309d65bfb881",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:13"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:14"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:15"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:16"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:17"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:18"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:19"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:20"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:21"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:22"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:23"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:24"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:25"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:26"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)10440_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:33"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)10440_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)10440_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f754be0827b0d6fd3158263c459347edb38c1b9e931413361d87bfc803cd60b9": {
      "address": "0x40fF886415dC80BD51a7345ae2D755ce4b9593Ef",
      "txHash": "0x841dd93f495204d40193ec610c98440c04123696d1a272a60ba62c4d583b9b07",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)5458_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_struct(AddressSet)5458_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)5458_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5157_storage"
              }
            ]
          },
          "t_struct(Set)5157_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "f52353a31bb0707f039d8b7ee3016adb2cc5f2bce6e554a87a9e4128bf62b7dd": {
      "address": "0x3736Ea7CAD9358585654B02B33beE342e865e948",
      "txHash": "0x1a10ec52cb84e928341ea17cfaddea5acf5b3a8fd50635bc6d96dc426b5f4759",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ReferralBonus",
            "label": "pause",
            "type": "t_bool",
            "src": "contracts/referral/ReferralBonus.sol:26"
          },
          {
            "contract": "ReferralBonus",
            "label": "rewardPerInvitation",
            "type": "t_uint256",
            "src": "contracts/referral/ReferralBonus.sol:28"
          },
          {
            "contract": "ReferralBonus",
            "label": "rewardTokenAddress",
            "type": "t_contract(IERC20)5823",
            "src": "contracts/referral/ReferralBonus.sol:30"
          },
          {
            "contract": "ReferralBonus",
            "label": "rewardWallet",
            "type": "t_address",
            "src": "contracts/referral/ReferralBonus.sol:32"
          },
          {
            "contract": "ReferralBonus",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)14221_storage)",
            "src": "contracts/referral/ReferralBonus.sol:34"
          },
          {
            "contract": "ReferralBonus",
            "label": "userRewarded",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "contracts/referral/ReferralBonus.sol:36"
          },
          {
            "contract": "ReferralBonus",
            "label": "whitelistOperator",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/referral/ReferralBonus.sol:39"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IERC20)5823": {
            "label": "contract IERC20"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(UserReward)14221_storage)": {
            "label": "mapping(address => struct ReferralBonus.UserReward)"
          },
          "t_struct(UserReward)14221_storage": {
            "label": "struct ReferralBonus.UserReward",
            "members": [
              {
                "label": "rewardAmount",
                "type": "t_uint256"
              },
              {
                "label": "deptAmount",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "5e673331242f0e0c8b575176d4e56c5eaf05f125766d6b074a5492502abe3b00": {
      "address": "0xc16b3351d1109F27d6492DcdAd7423C0a5C96a3c",
      "txHash": "0xfd687fdfe5856a5913f73c55a956f1091e29322de13c4f49e7d5e615f3025e24",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8176_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8189_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8176_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8176_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8176_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8189_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8189_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "4be7244f0b173e0e73d3cc1e28f50a84f314568ed07ba883437eba08c1700c95": {
      "address": "0xF1A529d243DbbE796B70dd7b0BF22DA15565cf3C",
      "txHash": "0xd81f44a30f40ee000b499d92f9d3eb0559c07cc6418d32cc841f60138ee14781",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:13"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:14"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:15"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:16"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:17"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:18"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:19"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:20"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:21"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:22"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:23"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:24"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:25"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:26"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11140_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:33"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11140_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11140_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8e313ff38c0c9e74132b646924fd1936f0095557b4779bb3fcd3dd8bee3a0fad": {
      "address": "0x0a2946E00A8D149E44E0115011186e369dba5DB6",
      "txHash": "0x5e6ec2044516ac14bc86842d55e953a2cd7abbc8457f04d68dd75b9efc8e089b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:17"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:47"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:49"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)9745_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)9760_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:59"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:61"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)9805_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:69"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:71"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:73"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)9745_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)9745_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)9760_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)9760_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)9805_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)9805_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "592d0f21168b9493c0dc64210937aa3d41e822b6349e6dfe4d4893fc7b850336": {
      "address": "0x22961DaB9cD77BA7dCaB7ebBD2c0d161F0951407",
      "txHash": "0x8178fc1a375a9ec24cffa1c52fe06e8d1b66070f4b7b8b25459536186ab4ce95",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)5458_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "BSCD",
            "label": "pause",
            "type": "t_bool",
            "src": "contracts/token/BSCD.sol:15"
          },
          {
            "contract": "BSCD",
            "label": "blacklist",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/token/BSCD.sol:16"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)5458_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)5458_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5157_storage"
              }
            ]
          },
          "t_struct(Set)5157_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "6667e4d5729df64faf0c9d5dce3dfb199f6a30d39052623a25298205d9bba618": {
      "address": "0x086727fba8559a2CBc792C571B68Bff3D43aA808",
      "txHash": "0x33badf4c19060a9a136909edc892ba13070570c684fd7084f61849f8f3566fc3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)6974",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13591_storage))",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)13614_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)13625_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13632_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)13641_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)13648_storage)",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)13657_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13632_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)13641_storage))",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)13669_storage",
            "src": "contracts/pve/MstationPve.sol:133"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)13662_storage)",
            "src": "contracts/pve/MstationPve.sol:135"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6974": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13591_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)13591_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)13591_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)13614_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)13614_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)13625_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)13625_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)13632_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)13632_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)13641_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)13641_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)13648_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)13648_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)13657_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)13657_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)13641_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)13669_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "updateTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)13662_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)13662_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "867c01cc42148fe99ea38cab605b86bf58d2c8a8b72628d28b0d3f354d357ea3": {
      "address": "0xC3b9a05b208B8887F5AA568de01376aF12A4c3A7",
      "txHash": "0xe4dcbc28d95b296fd3848b2bb1286677f8f51438720f3211e93e112bcbddfd3d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)5458_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "BSCDToken",
            "label": "pause",
            "type": "t_bool",
            "src": "contracts/token/BSCD_Upgradeable.sol:17"
          },
          {
            "contract": "BSCDToken",
            "label": "blacklist",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/token/BSCD_Upgradeable.sol:18"
          },
          {
            "contract": "BSCDToken",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/token/BSCD_Upgradeable.sol:19"
          },
          {
            "contract": "BSCDToken",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/token/BSCD_Upgradeable.sol:20"
          },
          {
            "contract": "BSCDToken",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "contracts/token/BSCD_Upgradeable.sol:21"
          },
          {
            "contract": "BSCDToken",
            "label": "_name",
            "type": "t_string_storage",
            "src": "contracts/token/BSCD_Upgradeable.sol:22"
          },
          {
            "contract": "BSCDToken",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "contracts/token/BSCD_Upgradeable.sol:23"
          },
          {
            "contract": "BSCDToken",
            "label": "recoveryAdmin",
            "type": "t_address",
            "src": "contracts/token/BSCD_Upgradeable.sol:25"
          },
          {
            "contract": "BSCDToken",
            "label": "recoveryAdminCandidate",
            "type": "t_address",
            "src": "contracts/token/BSCD_Upgradeable.sol:26"
          },
          {
            "contract": "BSCDToken",
            "label": "recoveryAdminKeyHash",
            "type": "t_bytes32",
            "src": "contracts/token/BSCD_Upgradeable.sol:27"
          },
          {
            "contract": "BSCDToken",
            "label": "admin",
            "type": "t_address",
            "src": "contracts/token/BSCD_Upgradeable.sol:28"
          },
          {
            "contract": "BSCDToken",
            "label": "timelockPeriod",
            "type": "t_uint256",
            "src": "contracts/token/BSCD_Upgradeable.sol:29"
          },
          {
            "contract": "BSCDToken",
            "label": "losslessTurnOffTimestamp",
            "type": "t_uint256",
            "src": "contracts/token/BSCD_Upgradeable.sol:30"
          },
          {
            "contract": "BSCDToken",
            "label": "isLosslessOn",
            "type": "t_bool",
            "src": "contracts/token/BSCD_Upgradeable.sol:31"
          },
          {
            "contract": "BSCDToken",
            "label": "lossless",
            "type": "t_contract(ILssController)20504",
            "src": "contracts/token/BSCD_Upgradeable.sol:32"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_contract(ILssController)20504": {
            "label": "contract ILssController"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)5458_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)5458_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5157_storage"
              }
            ]
          },
          "t_struct(Set)5157_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "5e4346e74fd1aacd9e9bec6e49f7d3e74998ea8c5e77350aca9db2547a2dc067": {
      "address": "0x7a04BC7BB887Db65Dc8Dfa7E9285E4D9721B319c",
      "txHash": "0x51b9fb13a79089628481f0e7c64d442178d6f034f05f441a0b33f3873066b1f9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:37"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)13791_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:52"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:54"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:55"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContractMap",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)13791_storage)",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          },
          {
            "contract": "MstationNFT",
            "label": "_status",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:63"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)13791_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)13791_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)13791_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d727c14a83a9e4b4b5a16f8928f5b68e1e4745bec021926b69f917bf99f0815b": {
      "address": "0xfF703324CA7c9F15bFbDed9f1821A65165ddbD17",
      "txHash": "0x8ce2a52621ce1a945ac7ab76373e19314be399bccfd6ac839d2a12a0c692452b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:19"
          },
          {
            "contract": "MstationSchool",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:20"
          },
          {
            "contract": "MstationSchool",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:21"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNFTWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:22"
          },
          {
            "contract": "MstationSchool",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:23"
          },
          {
            "contract": "MstationSchool",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:24"
          },
          {
            "contract": "MstationSchool",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:25"
          },
          {
            "contract": "MstationSchool",
            "label": "upgradePlans",
            "type": "t_mapping(t_uint256,t_struct(UpgradePlan)15145_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:34"
          },
          {
            "contract": "MstationSchool",
            "label": "students",
            "type": "t_mapping(t_uint256,t_struct(Student)15157_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:41"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNumerator",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:42"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:44"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(UpgradePlan)15145_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.UpgradePlan)"
          },
          "t_struct(UpgradePlan)15145_storage": {
            "label": "struct MstationSchool.UpgradePlan",
            "members": [
              {
                "label": "fromLevel",
                "type": "t_uint16"
              },
              {
                "label": "toLevel",
                "type": "t_uint16"
              },
              {
                "label": "amountBSCS",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rateFailure",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(Student)15157_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.Student)"
          },
          "t_struct(Student)15157_storage": {
            "label": "struct MstationSchool.Student",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "ebcdccc621286d7b64c6af3c300007b89f53690a28ab626dbc34a8a3aa0dc32c": {
      "address": "0x8A61CcDE2483CB380aeaEF6f59D1362E1731504A",
      "txHash": "0x34475f992d9752ee0f1d96d31aa151b140e9d4d31247bb6d4f8404757ef52afb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:50"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)12231_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)12246_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:62"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)12293_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)12231_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)12231_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)12246_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)12246_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)12293_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)12293_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "619b11e1cd41c9a3cdd8d607b5ddf91dd53c9edfb3ebd425a3466051afcf6e4d": {
      "address": "0xBb1b347Ac10B4b2035DcC04c7F900f77D201a7b7",
      "txHash": "0xc4eecf962e6b394463d781982b1655d3bedf49911ac0068ac1d067205f4c42ec",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ReferralBonus",
            "label": "pause",
            "type": "t_bool",
            "src": "contracts/referral/ReferralBonus.sol:26"
          },
          {
            "contract": "ReferralBonus",
            "label": "rewardPerInvitation",
            "type": "t_uint256",
            "src": "contracts/referral/ReferralBonus.sol:28"
          },
          {
            "contract": "ReferralBonus",
            "label": "rewardTokenAddress",
            "type": "t_contract(IERC20)7092",
            "src": "contracts/referral/ReferralBonus.sol:30"
          },
          {
            "contract": "ReferralBonus",
            "label": "rewardWallet",
            "type": "t_address",
            "src": "contracts/referral/ReferralBonus.sol:32"
          },
          {
            "contract": "ReferralBonus",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)18873_storage)",
            "src": "contracts/referral/ReferralBonus.sol:34"
          },
          {
            "contract": "ReferralBonus",
            "label": "userRewarded",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "contracts/referral/ReferralBonus.sol:36"
          },
          {
            "contract": "ReferralBonus",
            "label": "whitelistOperator",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/referral/ReferralBonus.sol:39"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IERC20)7092": {
            "label": "contract IERC20"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(UserReward)18873_storage)": {
            "label": "mapping(address => struct ReferralBonus.UserReward)"
          },
          "t_struct(UserReward)18873_storage": {
            "label": "struct ReferralBonus.UserReward",
            "members": [
              {
                "label": "rewardAmount",
                "type": "t_uint256"
              },
              {
                "label": "deptAmount",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "426f1e5757e8f2a0c583ab478f1a48f68f0eaf85d61e19c529a0d98580d62bf8": {
      "address": "0xeFBFC881565376Db8a6f8A3BC92d9aF1d1eb39A1",
      "txHash": "0xa2b9b7cefff9f69c3bb8a2e2db5beaabfd73327671fb6c3ee22d7d7d8ce991c6",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8951",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10550_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)10563_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:80"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8951": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10550_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10550_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10550_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)10563_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)10563_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b2f10d0b506cb2d780655aaa802b6f1095632006cd1dddf868aa1397895fac51": {
      "address": "0x0C7ec60bFD744121AbBf12000078361373610AD1",
      "txHash": "0x7e20540cd925f31d47d8e1753d1ea6d9ab0a2f159847d95428127c46e6dadb5e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)5458_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "BSCDToken",
            "label": "pause",
            "type": "t_bool",
            "src": "contracts/token/BSCD_Upgradeable.sol:17"
          },
          {
            "contract": "BSCDToken",
            "label": "blacklist",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/token/BSCD_Upgradeable.sol:18"
          },
          {
            "contract": "BSCDToken",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/token/BSCD_Upgradeable.sol:19"
          },
          {
            "contract": "BSCDToken",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/token/BSCD_Upgradeable.sol:20"
          },
          {
            "contract": "BSCDToken",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "contracts/token/BSCD_Upgradeable.sol:21"
          },
          {
            "contract": "BSCDToken",
            "label": "_name",
            "type": "t_string_storage",
            "src": "contracts/token/BSCD_Upgradeable.sol:22"
          },
          {
            "contract": "BSCDToken",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "contracts/token/BSCD_Upgradeable.sol:23"
          },
          {
            "contract": "BSCDToken",
            "label": "recoveryAdmin",
            "type": "t_address",
            "src": "contracts/token/BSCD_Upgradeable.sol:25"
          },
          {
            "contract": "BSCDToken",
            "label": "recoveryAdminCandidate",
            "type": "t_address",
            "src": "contracts/token/BSCD_Upgradeable.sol:26"
          },
          {
            "contract": "BSCDToken",
            "label": "recoveryAdminKeyHash",
            "type": "t_bytes32",
            "src": "contracts/token/BSCD_Upgradeable.sol:27"
          },
          {
            "contract": "BSCDToken",
            "label": "admin",
            "type": "t_address",
            "src": "contracts/token/BSCD_Upgradeable.sol:28"
          },
          {
            "contract": "BSCDToken",
            "label": "timelockPeriod",
            "type": "t_uint256",
            "src": "contracts/token/BSCD_Upgradeable.sol:29"
          },
          {
            "contract": "BSCDToken",
            "label": "losslessTurnOffTimestamp",
            "type": "t_uint256",
            "src": "contracts/token/BSCD_Upgradeable.sol:30"
          },
          {
            "contract": "BSCDToken",
            "label": "isLosslessOn",
            "type": "t_bool",
            "src": "contracts/token/BSCD_Upgradeable.sol:31"
          },
          {
            "contract": "BSCDToken",
            "label": "lossless",
            "type": "t_contract(ILssController)26039",
            "src": "contracts/token/BSCD_Upgradeable.sol:32"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_contract(ILssController)26039": {
            "label": "contract ILssController"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)5458_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)5458_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5157_storage"
              }
            ]
          },
          "t_struct(Set)5157_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "5a9976dfc90bfd1d47a7c1b4f9bc77694c32b363dfcbf51ca099436d4746619a": {
      "address": "0xA910CE8196e4527ec36d5BE599c0aFA50a4ed80d",
      "txHash": "0xc179f75fa5532b87704753280561f01737e403fefbe49e66a7d2b2e1d925ec2e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8951",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:38"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15574_storage))",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15597_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15608_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15615_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15624_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15631_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15640_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15615_storage)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15624_storage))",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15650_storage",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15645_storage)",
            "src": "contracts/pve/MstationPve.sol:136"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8951": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15574_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15574_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15574_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15597_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15597_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15608_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15608_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15615_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15615_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15624_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15624_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15631_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15631_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15640_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15640_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15624_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15650_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15645_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15645_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "2105c7b8c00de585dbfb07fde5ea250078a96abb41eeebef6a475acfded3663f": {
      "address": "0xA5E999C087127b06D0B3051248DA286F39943B85",
      "txHash": "0xd833cf784c49d1bb0111809ef11a747a4e72b5b5df1889205b38bacd511a0887",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8951",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:38"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15574_storage))",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15597_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15608_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15615_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15624_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15631_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15640_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15615_storage)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15624_storage))",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15652_storage",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15645_storage)",
            "src": "contracts/pve/MstationPve.sol:136"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8951": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15574_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15574_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15574_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15597_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15597_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15608_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15608_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15615_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15615_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15624_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15624_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15631_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15631_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15640_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15640_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15624_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15652_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "updateTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15645_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15645_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "2d24d17ec0d7cd53ccd72da7893a74b22caee7bd1b403d5f55b018260a93c3c5": {
      "address": "0xa4644CA1a66C25Dc7B14d66d3a23c26981a951de",
      "txHash": "0x2f04d857e4c6b6468bc8cef637c09a2b5509ab354743024e15ed47a1a59ccfa7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8951",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:38"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15574_storage))",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15597_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15608_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15615_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15624_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15631_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15640_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15615_storage)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15624_storage))",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15652_storage",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15645_storage)",
            "src": "contracts/pve/MstationPve.sol:136"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8951": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15574_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15574_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15574_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15597_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15597_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15608_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15608_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15615_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15615_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15624_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15624_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15631_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15631_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15640_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15640_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15624_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15652_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "updateTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15645_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15645_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "60199bc9ef923047aa331cd5335e5e7d0b110f80c39369cc46c309176f87a417": {
      "address": "0x2523D3926b731f9817810A21eFCA9e4849706Ca3",
      "txHash": "0xcff72f0e9cde3c71923bb2985b9dc748133ac008de9b380e05e890ebfe2ceedb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8951",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:38"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15574_storage))",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15597_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15608_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15615_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15624_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15631_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15640_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15615_storage)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15624_storage))",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15652_storage",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15645_storage)",
            "src": "contracts/pve/MstationPve.sol:136"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8951": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15574_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15574_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15574_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15597_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15597_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15608_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15608_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15615_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15615_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15624_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15624_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15631_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15631_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15640_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15640_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15624_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15652_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "updateTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15645_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15645_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b7578efb31a7dedf7078925f0a2d292150cb312caf991b121b40208f91c4b7e6": {
      "address": "0xFFFA8Aa0d4da659B7782d9A73f8A9743049087e2",
      "txHash": "0x9965bdcc15cb75a6f06606dce90296ddf7b505be4a9b835f01fa199847567a29",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8951",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:38"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15574_storage))",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15597_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15608_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15615_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15624_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15631_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15640_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15615_storage)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15624_storage))",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15652_storage",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15645_storage)",
            "src": "contracts/pve/MstationPve.sol:136"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8951": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15574_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15574_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15574_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15597_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15597_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15608_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15608_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15615_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15615_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15624_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15624_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15631_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15631_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15640_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15640_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15624_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15652_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "updateTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15645_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15645_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f3fdb75487af22821eb53dae4ea93158a62f9399b33a01f19c418b7f0de83bec": {
      "address": "0xC0EE4EaD57CF61e6FaF03Fb3a807F7E9da13C6e4",
      "txHash": "0x721120b71f24989def0c15a4df84ba232aef0ea19c351f334204154d2408a3f1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8951",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:38"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15587_storage))",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15610_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15621_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15628_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15637_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15644_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15653_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15628_storage)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15637_storage))",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15665_storage",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15658_storage)",
            "src": "contracts/pve/MstationPve.sol:136"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8951": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15587_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15587_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15587_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15610_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15610_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15621_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15621_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15628_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15628_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15637_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15637_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15644_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15644_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15653_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15653_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15637_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15665_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "updateTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15658_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15658_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d4c47c498b2d9aa77c1379d1b11e116cf4d4fa7a0bc8f360c2c5a1ea51d3f485": {
      "address": "0x5918E4d907dc2B985019226E6dEAAae1e9C33450",
      "txHash": "0xcc882e4af18e46f5bcfe0de6dfe4efae0a7affb0cfc6e27412e20107daf25d31",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "TokenVesting",
            "label": "vestingSchedules",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(VestingSchedule)25523_storage))",
            "src": "contracts/vesting/TokenVesting.sol:40"
          },
          {
            "contract": "TokenVesting",
            "label": "vestingCounts",
            "type": "t_mapping(t_address,t_uint16)",
            "src": "contracts/vesting/TokenVesting.sol:41"
          },
          {
            "contract": "TokenVesting",
            "label": "token",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/vesting/TokenVesting.sol:42"
          },
          {
            "contract": "TokenVesting",
            "label": "cliff",
            "type": "t_uint256",
            "src": "contracts/vesting/TokenVesting.sol:43"
          },
          {
            "contract": "TokenVesting",
            "label": "start",
            "type": "t_uint256",
            "src": "contracts/vesting/TokenVesting.sol:44"
          },
          {
            "contract": "TokenVesting",
            "label": "revocable",
            "type": "t_bool",
            "src": "contracts/vesting/TokenVesting.sol:45"
          },
          {
            "contract": "TokenVesting",
            "label": "revoked",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/vesting/TokenVesting.sol:46"
          }
        ],
        "types": {
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(VestingSchedule)25523_storage))": {
            "label": "mapping(address => mapping(uint256 => struct TokenVesting.VestingSchedule))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_struct(VestingSchedule)25523_storage)": {
            "label": "mapping(uint256 => struct TokenVesting.VestingSchedule)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(VestingSchedule)25523_storage": {
            "label": "struct TokenVesting.VestingSchedule",
            "members": [
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "releaseTimestamp",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "released",
                "type": "t_uint256"
              },
              {
                "label": "revoked",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint16)": {
            "label": "mapping(address => uint16)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "0a481af02857718f573cf26f42c2a88c7fc6ed10f7bd352c2fac220a814069c8": {
      "address": "0x6aB1E0E920fE6dd22975862C226cD7D18C08fD71",
      "txHash": "0x955568689d6abefe2245c47d045695393f0af6185835e4878908f090efdd3d52",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "_token",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/vesting/TokenVestingSchedule.sol:41"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "vestingSchedulesIds",
            "type": "t_array(t_bytes32)dyn_storage",
            "src": "contracts/vesting/TokenVestingSchedule.sol:43"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "vestingSchedules",
            "type": "t_mapping(t_bytes32,t_struct(VestingSchedule)29156_storage)",
            "src": "contracts/vesting/TokenVestingSchedule.sol:44"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "vestingSchedulesTotalAmount",
            "type": "t_uint256",
            "src": "contracts/vesting/TokenVestingSchedule.sol:45"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "holdersVestingCount",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/vesting/TokenVestingSchedule.sol:46"
          }
        ],
        "types": {
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_struct(VestingSchedule)29156_storage)": {
            "label": "mapping(bytes32 => struct TokenVestingSchedule.VestingSchedule)"
          },
          "t_struct(VestingSchedule)29156_storage": {
            "label": "struct TokenVestingSchedule.VestingSchedule",
            "members": [
              {
                "label": "initialized",
                "type": "t_bool"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "cliff",
                "type": "t_uint256"
              },
              {
                "label": "start",
                "type": "t_uint256"
              },
              {
                "label": "duration",
                "type": "t_uint256"
              },
              {
                "label": "slicePeriodSeconds",
                "type": "t_uint256"
              },
              {
                "label": "revocable",
                "type": "t_bool"
              },
              {
                "label": "amountTotal",
                "type": "t_uint256"
              },
              {
                "label": "released",
                "type": "t_uint256"
              },
              {
                "label": "revoked",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "13ac0783620416974b9cca21eafecfb0e8ccca11599711e630f47bdd7c829cc7": {
      "address": "0x2E63c2C916878ddC3B0fDeb675a0ffA1cBcC2E42",
      "txHash": "0xc1c02fab42df13e6d6852f66ccfe6fdab4af54ec1e7a1696cd2b461a9538709f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:19"
          },
          {
            "contract": "MstationSchool",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:20"
          },
          {
            "contract": "MstationSchool",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:21"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNFTWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:22"
          },
          {
            "contract": "MstationSchool",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:23"
          },
          {
            "contract": "MstationSchool",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:24"
          },
          {
            "contract": "MstationSchool",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:25"
          },
          {
            "contract": "MstationSchool",
            "label": "upgradePlans",
            "type": "t_mapping(t_uint256,t_struct(UpgradePlan)15145_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:34"
          },
          {
            "contract": "MstationSchool",
            "label": "students",
            "type": "t_mapping(t_uint256,t_struct(Student)15157_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:41"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNumerator",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:42"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:44"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(UpgradePlan)15145_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.UpgradePlan)"
          },
          "t_struct(UpgradePlan)15145_storage": {
            "label": "struct MstationSchool.UpgradePlan",
            "members": [
              {
                "label": "fromLevel",
                "type": "t_uint16"
              },
              {
                "label": "toLevel",
                "type": "t_uint16"
              },
              {
                "label": "amountBSCS",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rateFailure",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(Student)15157_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.Student)"
          },
          "t_struct(Student)15157_storage": {
            "label": "struct MstationSchool.Student",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "a5469ac57a692e091d69aeb46ac73b56be5ebde93c4419eeb2c5022fe71b5423": {
      "address": "0xfDBc52F975b286DDc7Efe59f78DB85eBE7242f4b",
      "txHash": "0x8be7d15a89e12ae9fd937509accd9d4621cab254c8e0c04b69a42696a68ea32b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:19"
          },
          {
            "contract": "MstationSchool",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:20"
          },
          {
            "contract": "MstationSchool",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:21"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNFTWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:22"
          },
          {
            "contract": "MstationSchool",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:23"
          },
          {
            "contract": "MstationSchool",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:24"
          },
          {
            "contract": "MstationSchool",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:25"
          },
          {
            "contract": "MstationSchool",
            "label": "upgradePlans",
            "type": "t_mapping(t_uint256,t_struct(UpgradePlan)15193_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:34"
          },
          {
            "contract": "MstationSchool",
            "label": "students",
            "type": "t_mapping(t_uint256,t_struct(Student)15205_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:41"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNumerator",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:42"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:44"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(UpgradePlan)15193_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.UpgradePlan)"
          },
          "t_struct(UpgradePlan)15193_storage": {
            "label": "struct MstationSchool.UpgradePlan",
            "members": [
              {
                "label": "fromLevel",
                "type": "t_uint16"
              },
              {
                "label": "toLevel",
                "type": "t_uint16"
              },
              {
                "label": "amountBSCS",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rateFailure",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(Student)15205_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.Student)"
          },
          "t_struct(Student)15205_storage": {
            "label": "struct MstationSchool.Student",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "0991379d0535e212ae520cb070c75df035ea8ccda230c0fb36e3d27ce3d6ec25": {
      "address": "0x764F1f1cA89F31264B6a116a517D39ceDc04b911",
      "txHash": "0x633c96cd05802a732a1c4df334ed6f2f6895ee9be0f7f0eae9821ccb2f6ee178",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MStationTreasury",
            "label": "pause",
            "type": "t_bool",
            "src": "contracts/treasury/MStationTreasury.sol:23"
          },
          {
            "contract": "MStationTreasury",
            "label": "mstIssued",
            "type": "t_uint256",
            "src": "contracts/treasury/MStationTreasury.sol:25"
          },
          {
            "contract": "MStationTreasury",
            "label": "mstMonthlyEmission",
            "type": "t_uint256",
            "src": "contracts/treasury/MStationTreasury.sol:27"
          },
          {
            "contract": "MStationTreasury",
            "label": "mstTokenAddress",
            "type": "t_address",
            "src": "contracts/treasury/MStationTreasury.sol:29"
          },
          {
            "contract": "MStationTreasury",
            "label": "bscsTokenAddress",
            "type": "t_address",
            "src": "contracts/treasury/MStationTreasury.sol:31"
          },
          {
            "contract": "MStationTreasury",
            "label": "router",
            "type": "t_address",
            "src": "contracts/treasury/MStationTreasury.sol:33"
          },
          {
            "contract": "MStationTreasury",
            "label": "pathSwap",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/treasury/MStationTreasury.sol:35"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d602e0abc5d7a86b860a9a8986ea9e0f2e5852241dac0a53ef664c3d57120233": {
      "address": "0xf2cFD0c6D11a23Fb0a684440E9dEfC55a248a4B0",
      "txHash": "0x2c4479b3d6f11fe626cd70f3331c66d2e00750a2723f8f12b6d90dd910aa1b44",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10512_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)10525_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:80"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:82"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:83"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10512_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10512_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10512_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)10525_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)10525_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "94859024287223740e3e0750e48041febb28c25063fc0c5ba9f9d3742db048eb": {
      "address": "0xabCF19C828e3335d69F60080F2C7B07d9545bB7E",
      "txHash": "0x68c0b8bff467a20c9ff2d1f998eef3f2f61355ca3fdda9c04e42ef603b2a7c6a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:38"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16331_storage))",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16354_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16365_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16372_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16383_storage)",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16390_storage)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16399_storage)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16372_storage)",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16383_storage))",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16409_storage",
            "src": "contracts/pve/MstationPve.sol:135"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16404_storage)",
            "src": "contracts/pve/MstationPve.sol:137"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:139"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:140"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:142"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16331_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16331_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16331_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16354_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16354_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16365_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16365_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16372_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16372_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16383_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16383_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16390_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16390_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16399_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16399_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16383_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16409_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16404_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16404_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7179b9ddd153525a0720655874b62c60804e540c6007cee03374fca17950c2fb": {
      "address": "0x9f275bbdB5890d4fE77Ec0057456Fc51eEbDee00",
      "txHash": "0xc940b08478c843ae2a4e831d4dc0832c094deebca648da22c7591c12be95c520",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:37"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)13820_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:52"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:54"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:55"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContractMap",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)13820_storage)",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          },
          {
            "contract": "MstationNFT",
            "label": "_status",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:63"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)13820_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)13820_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)13820_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c97eee2d2adff76e329238d478a58faf60563047e1a71af30ae7cae4b336d41c": {
      "address": "0x428F18D6288D515DD8D0Fe1262ff7263f684576D",
      "txHash": "0x8e70923dcfb574bc85e7ecadb45292e5e2bc6f3438153aef10fbdeff44cf4ed0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:37"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)13820_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:52"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:54"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:55"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContractMap",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)13820_storage)",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          },
          {
            "contract": "MstationNFT",
            "label": "_status",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:63"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)13820_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)13820_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)13820_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "2ce7adc36c81b54fb1d566a1640f7f36e2d287a178a1ec6a485be483c5182d2d": {
      "address": "0xab72CDe6d917F0C2595aF9fade16c44E5A87c201",
      "txHash": "0x051b1d1dada46161a27741cc216983ff8b6293597283d032134465e8b29eb8d6",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:37"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)13862_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:52"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:54"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:55"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContractMap",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)13862_storage)",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          },
          {
            "contract": "MstationNFT",
            "label": "_status",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:63"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)13862_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)13862_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)13862_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "1eeab01e57c0f4753f9676c5470dd9e67932d223a604abd5100cfae9c1e1d4bd": {
      "address": "0x94a63EFc2e46473fb38ca3d864E71BE959F965b8",
      "txHash": "0x35ca4f6ad033c35c03e67ac47c1e599c09efb39e59410e3ac6a166c31e371a3d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:50"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)12250_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)12265_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:62"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)12312_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)12250_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)12250_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)12265_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)12265_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)12312_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)12312_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b5d8618114899ff44844c28764e1acab5463011e015f1050c7671e90435257ef": {
      "address": "0x2B7AA384C7f560c1004Ea71B8122F787BE3D60Ed",
      "txHash": "0xb48b98a50b38ce6109bd0808424c2aa0a2f2cf77a4bd17e879e2d8e136cb221f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:50"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)12250_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)12265_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:62"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)12312_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)12250_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)12250_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)12265_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)12265_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)12312_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)12312_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "a0ad70a2139dd66eba58ad4f1876c4dcaceffb364c6f6453fde82de084195d65": {
      "address": "0x8A986C617dAf8544b22b29Fe2b557F97bCFd084D",
      "txHash": "0x8c370fe38c1853b10f583fbb1e56a07da1cd75b9a2d8890a29d1437f2ba01361",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:37"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)13863_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:52"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:54"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:55"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContractMap",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)13863_storage)",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          },
          {
            "contract": "MstationNFT",
            "label": "_status",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:63"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)13863_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)13863_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)13863_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "43cdc4ef4dd9f7f302eb0b69721f5ee3dbae673ae11c958c6adc0f50c8cb337b": {
      "address": "0xBe0Bb1C138dB92899866A45BdEF789e54940964d",
      "txHash": "0x8985604fdf26f13a6c572dd608925ead42242fcf7ae5f5dd4fd134d52147a61f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10512_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)10525_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:80"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:82"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:83"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10512_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10512_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10512_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)10525_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)10525_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "da2a0c5d325fd1af1e441daad6909d12537036c6af1cd8d73f4b44da8998f5bd": {
      "address": "0xc239560c1C1Db2BfBd4058d007c47376D970d226",
      "txHash": "0xf01068d04c7a33b459eae41ca67410d4d7d549eeb4938322062dfb1c0f5efb01",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10512_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)10525_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:80"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:82"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:83"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10512_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10512_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10512_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)10525_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)10525_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ea2082b0a0c965d9bfab1d42ffe7c1a8676598bfda321080d6f93d8c29771334": {
      "address": "0x37a1ebFC37c9FB0D2c33f9B0340b53FEb34D9c0e",
      "txHash": "0x4e6fe9a57885920a7f242bb9e6e9cc413392c48c39cd84737ecf6967e2edd013",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:38"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15839_storage))",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15862_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15873_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15880_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15891_storage)",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15898_storage)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15907_storage)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15880_storage)",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15891_storage))",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15917_storage",
            "src": "contracts/pve/MstationPve.sol:135"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15912_storage)",
            "src": "contracts/pve/MstationPve.sol:137"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:139"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:140"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:142"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15839_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15839_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15839_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15862_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15862_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15873_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15873_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15880_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15880_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15891_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15891_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15898_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15898_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15907_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15907_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15891_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15917_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15912_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15912_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e947f0d7b127ffabc1fdfc616114b9d7dfb39b6640127fb439e5ae234feb8f6f": {
      "address": "0x9eb8D7B6a54Ef124f9000893C9e2Be6df8A24e96",
      "txHash": "0x3aaef810eea5a76e20b40c10361310e8b49beaa353343d3ce4f30042b374a640",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)5458_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "BSCDToken",
            "label": "pause",
            "type": "t_bool",
            "src": "contracts/token/BSCD_Upgradeable.sol:17"
          },
          {
            "contract": "BSCDToken",
            "label": "blacklist",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/token/BSCD_Upgradeable.sol:18"
          },
          {
            "contract": "BSCDToken",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/token/BSCD_Upgradeable.sol:19"
          },
          {
            "contract": "BSCDToken",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/token/BSCD_Upgradeable.sol:20"
          },
          {
            "contract": "BSCDToken",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "contracts/token/BSCD_Upgradeable.sol:21"
          },
          {
            "contract": "BSCDToken",
            "label": "_name",
            "type": "t_string_storage",
            "src": "contracts/token/BSCD_Upgradeable.sol:22"
          },
          {
            "contract": "BSCDToken",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "contracts/token/BSCD_Upgradeable.sol:23"
          },
          {
            "contract": "BSCDToken",
            "label": "recoveryAdmin",
            "type": "t_address",
            "src": "contracts/token/BSCD_Upgradeable.sol:25"
          },
          {
            "contract": "BSCDToken",
            "label": "recoveryAdminCandidate",
            "type": "t_address",
            "src": "contracts/token/BSCD_Upgradeable.sol:26"
          },
          {
            "contract": "BSCDToken",
            "label": "recoveryAdminKeyHash",
            "type": "t_bytes32",
            "src": "contracts/token/BSCD_Upgradeable.sol:27"
          },
          {
            "contract": "BSCDToken",
            "label": "admin",
            "type": "t_address",
            "src": "contracts/token/BSCD_Upgradeable.sol:28"
          },
          {
            "contract": "BSCDToken",
            "label": "timelockPeriod",
            "type": "t_uint256",
            "src": "contracts/token/BSCD_Upgradeable.sol:29"
          },
          {
            "contract": "BSCDToken",
            "label": "losslessTurnOffTimestamp",
            "type": "t_uint256",
            "src": "contracts/token/BSCD_Upgradeable.sol:30"
          },
          {
            "contract": "BSCDToken",
            "label": "isLosslessOn",
            "type": "t_bool",
            "src": "contracts/token/BSCD_Upgradeable.sol:31"
          },
          {
            "contract": "BSCDToken",
            "label": "lossless",
            "type": "t_contract(ILssController)26818",
            "src": "contracts/token/BSCD_Upgradeable.sol:32"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_contract(ILssController)26818": {
            "label": "contract ILssController"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)5458_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)5458_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5157_storage"
              }
            ]
          },
          "t_struct(Set)5157_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "2843a36fde527ca1ae99cbfa364a19c92bf570357ebb808cc8b9f1f1bee34e5f": {
      "address": "0xc2827089f4652f2036Bc8e699DFb90F76D0cAe58",
      "txHash": "0xb0f172a87d4ccd7c52ba50d4f9c21d505729d32546ead9748dbed90866b33c5d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:37"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)13936_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:52"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:54"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:55"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContractMap",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)13936_storage)",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          },
          {
            "contract": "MstationNFT",
            "label": "_status",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:63"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)13936_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)13936_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)13936_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "95e6f62f2436778a85f79a662bee84fbdb4b3ab48b6b06a8e2b92917d7eb276e": {
      "address": "0x9bb1682EAD149d53EB85866681B9f150FC40a4AA",
      "txHash": "0x185b317c3f76d3bb3e871ec0c631712a32c2260678caa1b0bf9bf3f36e0c5bd4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:37"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)13936_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:52"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:54"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:55"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContractMap",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)13936_storage)",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          },
          {
            "contract": "MstationNFT",
            "label": "_status",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:63"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)13936_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)13936_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)13936_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "36d56c2cbcd568ab6337f00147bf0457ac84a99745385847bad54916f33ec442": {
      "address": "0x07869f0831D2eEd3FdFb9f444196110cbe3c0346",
      "txHash": "0xd8f1813631416c02919eeabf30c1a49f74d2493666e9176c33ece540f5655015",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10512_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)10525_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:80"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:82"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:83"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10512_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10512_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10512_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)10525_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)10525_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "78eeb9214139d186a4f21ab34e875b6c12939fc8b7c38a495c058f63c80243c5": {
      "address": "0xf4DFa0eF3aE9fDc896940F0553EaCE36b90ad4d7",
      "txHash": "0xe21dfe6809b8054022b598e70170c007060ba9bc4cef26a375dd5be6a2d7e893",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:38"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15839_storage))",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15862_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15873_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15880_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15891_storage)",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15898_storage)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15907_storage)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15880_storage)",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15891_storage))",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15917_storage",
            "src": "contracts/pve/MstationPve.sol:135"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15912_storage)",
            "src": "contracts/pve/MstationPve.sol:137"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:139"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:140"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:142"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15839_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15839_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15839_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15862_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15862_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15873_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15873_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15880_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15880_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15891_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15891_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15898_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15898_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15907_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15907_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15891_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15917_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15912_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15912_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "db4c752cf17936ff0e7f18014d49fc0712ec31644d15202d98074d53776b7d74": {
      "address": "0x81CD7761C0F73Ac1983EFDbd11abd5EcDc2805dA",
      "txHash": "0x4d15e7987b87473c36d75246cfc1e68233b9241cfcec5cf94d2cbfb39c606b0a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:38"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15839_storage))",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15862_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15873_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15880_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15891_storage)",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15898_storage)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15907_storage)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15880_storage)",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15891_storage))",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15917_storage",
            "src": "contracts/pve/MstationPve.sol:135"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15912_storage)",
            "src": "contracts/pve/MstationPve.sol:137"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:139"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:140"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:142"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15839_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15839_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15839_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15862_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15862_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15873_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15873_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15880_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15880_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15891_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15891_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15898_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15898_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15907_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15907_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15891_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15917_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15912_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15912_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "cd774ccbbe7af2bdcb075022d1fb8866709c807d509e71a5ebe2721c3887bd3b": {
      "address": "0xf0F9e0a19f4a1dff619BFC07087e8d732Dbe117a",
      "txHash": "0xe5e484061fb7e0100e11499b4ba32c51613941eb536f636a1d8380f614e31b2b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:38"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15727_storage))",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15750_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15761_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15768_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15779_storage)",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15786_storage)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15795_storage)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15768_storage)",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15779_storage))",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15805_storage",
            "src": "contracts/pve/MstationPve.sol:135"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15800_storage)",
            "src": "contracts/pve/MstationPve.sol:137"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:139"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:140"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:142"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15727_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15727_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15727_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15750_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15750_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15761_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15761_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15768_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15768_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15779_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15779_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15786_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15786_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15795_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15795_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15779_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15805_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15800_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15800_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "53d7c6e146e4a5799e79cf49b14e02bff04604fa77211d100fd2e938ad01ea39": {
      "address": "0x961DDe2Aaa7D1EC1A419359632e298c1927dc6dB",
      "txHash": "0xc30eb36ad85d72a2d0b6d0838f209e6f02cbbdd223a50c0d3b009bdfebac9eab",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10512_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)10525_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:80"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:82"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:83"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10512_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10512_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10512_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)10525_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)10525_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d2edffee66cc1cc21c809a7cba2a41fa717968e49548f2ffbd8989e6f65127a4": {
      "address": "0x9E27341479CD8d294663Ff2cd3622fc8207df24F",
      "txHash": "0x6c75fc1720c64e12190e2d1aa3f7e779a16a787656ed2422401b88b7206cee41",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:50"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)12337_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)12352_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:62"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)12399_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)12337_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)12337_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)12352_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)12352_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)12399_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)12399_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8e1a90b59b5c0065665d63056c4d38f4172f770af05cb2c79c63e834affe8930": {
      "address": "0xdb6A49aF4397c66697DEcf2c80BB9c742e88778d",
      "txHash": "0xcab9017c2a2d5efd96453069e6e3ccf3fb208a4078ddab5dec9e418bdaa2f720",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:50"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)12468_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)12483_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:62"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)12530_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)12468_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)12468_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)12483_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)12483_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)12530_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)12530_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "29c41601b04055227d3b17f78286294962ba33aca9ee0fd3274c707d86682d46": {
      "address": "0x402B93045F54C6B8717f79bbCB3BF528E750bd15",
      "txHash": "0xf11ad6c278b8203518be6740e7ba721a40974ebd512d8636a17505bae3a3e9e9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:38"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15805_storage))",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15828_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15839_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15846_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15857_storage)",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15864_storage)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15873_storage)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15846_storage)",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15857_storage))",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15883_storage",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15878_storage)",
            "src": "contracts/pve/MstationPve.sol:136"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:138"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:139"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:140"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:141"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15805_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15805_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15805_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15828_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15828_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15839_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15839_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15846_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15846_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15857_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15857_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15864_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15864_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15873_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15873_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15857_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15883_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15878_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15878_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "a296519f91bcb1cb61d353fa2acdb794de1f59b83eaa9e940a81492d4909bab1": {
      "address": "0x06FEEe4f6a3c4a477e189aE15125fF426d484d17",
      "txHash": "0x24a01db1a241f0c0bd392502c288dd70b3aa1b24e9a50bcc0a831492aa74887b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15813_storage))",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15836_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15847_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15854_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15865_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15872_storage)",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15881_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15854_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15865_storage))",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15893_storage",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15886_storage)",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:136"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:137"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:138"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:139"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15813_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15813_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15813_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15836_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15836_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15847_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15847_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15854_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15854_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15865_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15865_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15872_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15872_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15881_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15881_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15865_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15893_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "updateTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15886_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15886_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7e64d1b930cc4eaf0ed045bea82615bbb2d8ed8eec2a58af79778b9e0421e278": {
      "address": "0x42111DF7874a83429104dB06bCE20877f071d494",
      "txHash": "0x4482bcb941366df93c0f0b399b0261f6e38bbe1b51ce6ebe788dca1c037d11b7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15801_storage))",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15824_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15835_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15842_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15853_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15860_storage)",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15869_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15842_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15853_storage))",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15879_storage",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15874_storage)",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:136"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:137"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:138"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:139"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15801_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15801_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15801_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15824_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15824_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15835_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15835_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15842_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15842_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15853_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15853_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15860_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15860_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15869_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15869_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15853_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15879_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15874_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15874_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "1c5f8f529128ca8beb0b1113c04cbbc2a70d2d3b8e70b0d8e66ff6aeed41a96d": {
      "address": "0x7Bba81Bc819B43e7E79686cfC525bd18f0277150",
      "txHash": "0x0d289f72a94ab00943352790fd52d7db216caf15acbce38b07af9a9913bad255",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10537_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)10550_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:80"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:82"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:83"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10537_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10537_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10537_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)10550_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)10550_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "10c2ee139daf2c625ca01e9b1a973ab78671c0545bba05e4ec9fde2fa98349c3": {
      "address": "0x8D46d6DF5D5ab71Da4a66AcAB40A67c98Ce1b052",
      "txHash": "0x0bba45e1f1c8bc12df6c00715563ee3bfc7ca27eaa97c5d6fa9f459ad4cb6e3c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10537_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)10550_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:80"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:82"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:83"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10537_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10537_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10537_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)10550_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)10550_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "6538a2fc34d74aaf7f87764dc5a82c329c91ffbb59f96b45b28ebb501744853a": {
      "address": "0x117F90cDE4e4f1dba991522F351959037386D9dD",
      "txHash": "0x2fcca11a1f5e57434f331be47bb45d8044e02fe12fcc31f0bc6f69e7c504ff94",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15898_storage))",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15921_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15932_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15939_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15950_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15957_storage)",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15966_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15939_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15950_storage))",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15976_storage",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15971_storage)",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:136"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:137"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:138"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:139"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15898_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15898_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15898_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15921_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15921_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15932_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15932_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15939_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15939_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15950_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15950_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15957_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15957_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15966_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15966_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15950_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15976_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15971_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15971_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "323f9a164a6bdc42686f97174228cabe767242057c79eb38eccc0cdd873ae1e0": {
      "address": "0x73C954B51E13B6303cAadE060bE39aBA4844C998",
      "txHash": "0x0ba9c6501b24e092ffea279f8825030d7d0a357c80ac8932a85bcb901b2155ac",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17670_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17675_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "88ac89cbf252ec090b9a611fb17231ef350eef9ad18bf4839228635940c77fa8": {
      "address": "0xA5FA575866aD7ade9538eb1c61392a5f80aD0b03",
      "txHash": "0xbce19fe7d88121e6a8ee7f7d89d8aec54122414f21d2ea0ea6d635a33b8dbbe6",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10537_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)10550_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:80"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:82"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:83"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10537_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10537_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10537_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)10550_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)10550_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b75dea864aa4a9d15186958d75f545ee340056e2b27e2e9575f2945408730dac": {
      "address": "0x81de18e6103dE1A55097DF671A06523F98bb6a05",
      "txHash": "0x36dd221653fc36169d609635beb9216c66cec311234bb8207973d5158898d5ec",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10537_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)10550_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:80"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:82"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:83"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10537_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10537_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10537_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)10550_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)10550_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f31fe6957295e17f81ca831d752b0ab5cea998be4786daec89f6230b73b66b22": {
      "address": "0xfA051FaE606877a363cc99113389261D07e8eb7b",
      "txHash": "0xd93908996c6faa27bd1fb923fa580f6bd01a858602b412ff7bc65e1f193b364e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15898_storage))",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15921_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15932_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15939_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15950_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15957_storage)",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15966_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15939_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15950_storage))",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15978_storage",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15971_storage)",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:136"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:137"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:138"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:139"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:140"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15898_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15898_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15898_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15921_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15921_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15932_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15932_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15939_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15939_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15950_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15950_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15957_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15957_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15966_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15966_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15950_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15978_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "updateTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15971_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15971_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f1a52df23fece5b7474ab5a938b5bf38f05d37ed191c826f59c653bf10a42cb1": {
      "address": "0x60a6147AaDeE72Ad4497c5596ce205799F12a9B6",
      "txHash": "0x085b58da30f707f2c277883e7984bf3cdc4d9c56965e8eb192571575b0c454df",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)17734_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:19"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:21"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)17734_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)17734_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "6179f942c1b7480a735751db5d5eed6eafa65bb134fbd00a0b3dd6e0d22cfa42": {
      "address": "0x60AdF9E541F5D767f9fE4f3F00A12d017F0e5C09",
      "txHash": "0x0a37b452c92f0c7a43dca28c157fbb8aa9df8a59b2c2bdb717af57ba7048f3f4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)17731_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:19"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:21"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)17731_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)17731_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "ac729f3c7ddf7b844a5c9f3dce817ea5a5cdeb75441e8e95884863d3908d8973": {
      "address": "0xB887CcEF199e31c6E720E9F92540278E528BAE51",
      "txHash": "0xde7e91b9bfb58c3a091c05c2606f8808458f4ddc32c802b70b95dc5112a3523e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15898_storage))",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15921_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15932_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15939_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15950_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15957_storage)",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15966_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15939_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15950_storage))",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15978_storage",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15971_storage)",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:136"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:137"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:138"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:139"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:140"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15898_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15898_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15898_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15921_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15921_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15932_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15932_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15939_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15939_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15950_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15950_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15957_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15957_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15966_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15966_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15950_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15978_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "updateTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15971_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15971_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8de2e47b2f4cc11cb47a56056c7d77f783b3705929c62416a7bdbb53ea941c9c": {
      "address": "0x467bd6b757AA43A8F313647c4cd6d43229892867",
      "txHash": "0x9405b3ccd4f0b92359372e5e7953d819b7a6a9f0282073d818a8686405db1c3b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15898_storage))",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15921_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15932_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15939_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15950_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15957_storage)",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15966_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15939_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15950_storage))",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15978_storage",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15971_storage)",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:136"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:137"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:138"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:139"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:140"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15898_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15898_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15898_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15921_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15921_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15932_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15932_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15939_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15939_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15950_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15950_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15957_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15957_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15966_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15966_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15950_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15978_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "updateTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15971_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15971_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "894854b92fb6ea135a5d91a76d64ad84c44b2c71585fc9a5138dc0d84ed5f42b": {
      "address": "0x0444F2F8961E72F91bd6AAF88a717d154E964082",
      "txHash": "0x3ce9f33ef21fffbef07e88ecafeba4ad8b1c8d99d86e6f63f3e85f0bd59b898a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15895_storage))",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15918_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15929_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15936_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15947_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15954_storage)",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15963_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15936_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15947_storage))",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15975_storage",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15968_storage)",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:136"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:137"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:138"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:139"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:140"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15895_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15895_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15895_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15918_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15918_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15929_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15929_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15936_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15936_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15947_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15947_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15954_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15954_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15963_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15963_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15947_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15975_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "updateTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15968_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15968_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "3a9b2432cb3937060e65127cf2d8c31c23a8326a225b00db86338590a6dc264d": {
      "address": "0xe85341D86fFDD51B4FA2596acB77ffB0919fd767",
      "txHash": "0x5a90e66eaa364354a73570b0dbd1d0bf44ee6421ed267c78a96e9901fd131dc2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)17689_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:19"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:21"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)17689_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)17689_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "0120c5a463518de789f4a6173b6c4bcbfd4f6b5e0e857e0c8ac7d66b21597386": {
      "address": "0xD72dAB77abc42Dc30060B16465939f93E8628A2e",
      "txHash": "0xbc474771f67927e77166cb4d3bd0fa5542fae8b012ff8d1459b2fc5e453982ba",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "_token",
            "type": "t_contract(ERC20Upgradeable)802",
            "src": "contracts/vesting/TokenVestingSchedule.sol:41"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "vestingSchedulesIds",
            "type": "t_array(t_bytes32)dyn_storage",
            "src": "contracts/vesting/TokenVestingSchedule.sol:43"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "vestingSchedules",
            "type": "t_mapping(t_bytes32,t_struct(VestingSchedule)1772_storage)",
            "src": "contracts/vesting/TokenVestingSchedule.sol:44"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "vestingSchedulesTotalAmount",
            "type": "t_uint256",
            "src": "contracts/vesting/TokenVestingSchedule.sol:45"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "holdersVestingCount",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/vesting/TokenVestingSchedule.sol:46"
          }
        ],
        "types": {
          "t_contract(ERC20Upgradeable)802": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_struct(VestingSchedule)1772_storage)": {
            "label": "mapping(bytes32 => struct TokenVestingSchedule.VestingSchedule)"
          },
          "t_struct(VestingSchedule)1772_storage": {
            "label": "struct TokenVestingSchedule.VestingSchedule",
            "members": [
              {
                "label": "initialized",
                "type": "t_bool"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "cliff",
                "type": "t_uint256"
              },
              {
                "label": "start",
                "type": "t_uint256"
              },
              {
                "label": "duration",
                "type": "t_uint256"
              },
              {
                "label": "slicePeriodSeconds",
                "type": "t_uint256"
              },
              {
                "label": "revocable",
                "type": "t_bool"
              },
              {
                "label": "amountTotal",
                "type": "t_uint256"
              },
              {
                "label": "released",
                "type": "t_uint256"
              },
              {
                "label": "revoked",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ee71d05af2baec6df5c615a62280227b019caafd7b48bcebe8e99f3ad1f8d792": {
      "address": "0x40Cfa03614Db1A0dCC77CcAB10f0735DB161eAEA",
      "txHash": "0x16c5196f12cfad24206dbca71022f2dfe0cd170985b20aa0ab91a960194af79e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15923_storage))",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15946_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15957_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15964_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15975_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15982_storage)",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15991_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15964_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15975_storage))",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16001_storage",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15996_storage)",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:133"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:135"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15923_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15923_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15923_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15946_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15946_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15957_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15957_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15964_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15964_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15975_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15975_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15982_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15982_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15991_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15991_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15975_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16001_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15996_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15996_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d7005e702c86400716fe529ee2748a6bbad910ff94a8543415297c7d24bffb6d": {
      "address": "0x1e4572194C6035474626593E5A83d908491Bcb25",
      "txHash": "0x63c2dc0661381573f637f023658c2e19bf4f5e46ecdb3229c2d751d3a5e74681",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15923_storage))",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15946_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15957_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15964_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15975_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15982_storage)",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15991_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15964_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15975_storage))",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16003_storage",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15996_storage)",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:133"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:135"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15923_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15923_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15923_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15946_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15946_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15957_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15957_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15964_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15964_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15975_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15975_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15982_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15982_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15991_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15991_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15975_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16003_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "updateTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15996_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15996_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "bc228133fffc721520583cfee917715a53a3709697970b01089df6a91384694a": {
      "address": "0x1b1f6232659Fe17854A0F144337c530E26A0a30a",
      "txHash": "0x2d38b1a935522246c8cb6ee97b8837e43fe95db033ebb0b45109b91edfa1c7e0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15923_storage))",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15946_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15957_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15964_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15975_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15982_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15991_storage)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15964_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15975_storage))",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16001_storage",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15996_storage)",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:133"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:134"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15923_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15923_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15923_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15946_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15946_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15957_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15957_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15964_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15964_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15975_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15975_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15982_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15982_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15991_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15991_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15975_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16001_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15996_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15996_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "6cf1afbc2d1f4ba91253dd68124e27a4a53809cd959dcab4b8ff4422fd3ba0a0": {
      "address": "0xd19f36c28daAF713561157464F1Daf8A6fDBf73D",
      "txHash": "0x9d8d3bb99470cd69644e918b93ed837944684c3383a92d67c7ad26a8aa442897",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:50"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)12686_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)12701_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:62"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)12748_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "isTransfer",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:84"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)12686_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)12686_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)12701_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)12701_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)12748_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)12748_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ee7b7b6a1deac030281afe1ca62405e13aff6392d3f9ed6b1fda4d8b07f99742": {
      "address": "0x47e41d277B23Ea0577b0AE3A0c6C0358A711e6FC",
      "txHash": "0xba686b8e379df39b2072d0c33d2ff6eab96c4c4a36d91cbeb1a140a28765fa26",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15875_storage))",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15898_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15909_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15916_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15927_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15934_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15943_storage)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15916_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15927_storage))",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15953_storage",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15948_storage)",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:133"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:134"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15875_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15875_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15875_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15898_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15898_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15909_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15909_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15916_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15916_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15927_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15927_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15934_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15934_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15943_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15943_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15927_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15953_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15948_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15948_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "6a7737d03359c5f2a43a916cc5030819635a2c554b058eac5b3c122b299becf8": {
      "address": "0x070a83F1211C88C3a85b0C7244878c5B2fD2CD63",
      "txHash": "0x9af2d55b711ee7f9efed62fbf545805e76b951e0be2c589f593bd4c38f4d4c84",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)17521_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:19"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:21"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)17521_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)17521_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7b4ca461fb648fcfbc7da90e56cb100f052c45b7d87239dabde2c83c8e5a7091": {
      "address": "0x5Bce4521A2F708De85bea532B533EBB05d31B939",
      "txHash": "0x2c792dc3bff29460208ce5f406f70a06fb43b3e50d53df125d2114bc4a07af7a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10537_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)10550_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:80"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:82"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:83"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10537_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10537_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10537_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)10550_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)10550_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "5a7820573f76ed5246dba364a0bff4c747590938fe36fe43a654e61e0cb0c67f": {
      "address": "0xCBEAE44C37Bc2fC88452b94B9ecF36fe6e04A569",
      "txHash": "0xa2788b5ed936cb0f413a7e130f90cf41dd3da78a2a40c9679c6964ec4d282945",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10537_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)10550_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:80"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:82"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:83"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10537_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10537_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10537_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)10550_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)10550_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7e7777e88934499bcc7fb37102a4be1a83e7ef7d5039bc15ee13b59093fd9166": {
      "address": "0xf09FdB4aCe7aBfEEDb57D0FC49D156be2D0b4bE1",
      "txHash": "0xd9d61ffaf49ec6a18bb2ff7ab259eed9482b6e43fd806758cbc5c1f48702063a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10537_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)10550_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:80"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:82"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:83"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10537_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10537_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10537_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)10550_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)10550_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "941821dacdcee0e913bc3b8b2a8ee9a08d0a08f6b6ada36459862eac57e419ec": {
      "address": "0x89741cf5Ee4B01e9C6FF5720b10d18A8Af3871D6",
      "txHash": "0xb2c4c270223d17f54c477ae5644118933a52cd66b1ab0ea9461e5f1baf2c9dc2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)17871_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:19"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:21"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)17871_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)17871_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "34b7bec9138721d515efee8b2a11577f16b00078715ba3dc9bd36e3fc48cd1b6": {
      "address": "0x7BA67f05143AB066b283C7788b995D5D706c1318",
      "txHash": "0x6eacd6d3224575c73ccc0a99410670451ca52d19a9f7775ca394ae7fdd7f7314",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)17939_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:19"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:21"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:25"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)17939_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)17939_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e361e7cae22a6148ca36b2843f18ce38de1b4111969cb6e249017177df0b5a95": {
      "address": "0x9C5581D604a99a4d783514F2BF4F2e17593120D9",
      "txHash": "0x71f575b9217df03af4a56e45f0ea3431d2e523a10734dd90ef76f19c26f8019a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)17939_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:19"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:21"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:25"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)17939_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)17939_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "62cc2d6f959a3623298cd1c7857cc19aa4fd8b721728966896feb7b50037003e": {
      "address": "0x2c261F4225Eef6Bfe69e9C4258f9038786265887",
      "txHash": "0x4572cc464284ce637ffdf7f4e5a15a776d94b2d674e6e6bdb2428cb2c727e661",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)17939_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:19"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:21"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:25"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)17939_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)17939_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "dec81e5375fd75457a032b765043bea7cdff50457042ec94dd048c3e4ffc7f26": {
      "address": "0x3069b60d70315ea7C7f63E28817C2c014875f474",
      "txHash": "0xc30fa73720c679bca917a7d2e567bfff6482f302c69c5b559b3f2032a64f32ef",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)17952_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:19"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:21"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:25"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)17952_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)17952_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f9323f8abc44a38ed1b3749f0b418454fdc117289837e206b3c86b70ede2a45b": {
      "address": "0xA08aC82e2CB1065e488e792Ed6D3487cc4797E02",
      "txHash": "0x1b82c6ed6fcb6a64f09e2cbe656c898325fedaf9951402c884170692319ced9c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16114_storage))",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16137_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16148_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16155_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16166_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16173_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16182_storage)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16155_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16166_storage))",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16194_storage",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16187_storage)",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:133"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:134"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16114_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16114_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16114_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16137_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16137_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16148_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16148_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16155_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16155_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16166_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16166_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16173_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16173_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16182_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16182_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16166_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16194_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "updateTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16187_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16187_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c1c78920e898a03d82eb81121311ea08db4c35fd58a24e79f58521df3dfd4207": {
      "address": "0x53188088fc69c1A504bF5b18C61749aDf5a0e2A9",
      "txHash": "0xe9dd6f64fb68e2798f5b8ccdb493f185f4e956cf3c38d9b8d8311e05902e3799",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15998_storage))",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16021_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16032_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16039_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16050_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16057_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16066_storage)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16039_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16050_storage))",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16076_storage",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16071_storage)",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:133"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:134"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15998_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15998_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15998_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16021_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16021_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16032_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16032_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16039_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16039_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16050_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16050_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16057_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16057_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16066_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16066_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16050_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16076_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16071_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16071_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ad48c050756d834b488a1ebfd29ba0ae070c0fdfef395eebdf42a84b4a6db8d7": {
      "address": "0xa0F60aD7044Bdeeb4696ec040cC9948348BB0F39",
      "txHash": "0x52ab62b78300ec71566ea83d72dd66f497da19b6ca71a0f77059ce33675341bb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:9"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "refillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:10"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "41ce1e1b4958d9ffa0ab09f83164e25742b4337f4ca24c802be4ea79efdfb832": {
      "address": "0xcBF72FD0776e446A6E3116629902cC3080C9cE5e",
      "txHash": "0xc92e49553d3155b53e3180f3a6bc6ea93662d8df2f7420f693265ebe67704183",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:37"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:39"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:41"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:43"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:45"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:47"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)11882_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)11895_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:53"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:55"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:57"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:59"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)11882_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)11882_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)11882_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)11895_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)11895_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "276fe1529e5f6d2a13cc69af74970d85a7772207c794116a72b3f35c9b791198": {
      "address": "0xe1cd0Ed1de2963cdeFfE928d0127BC5eC63ad7fa",
      "txHash": "0x6936661d0a983eec93764bf53b1643521b09bca581df1aa22ca9505767084f9b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:21"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "refillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:22"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "nftAddress",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "665d239bc40a11d3477d6f3eb210a16acff034c1ea1a3b223babad57af11a629": {
      "address": "0xf23D4B91c3ab643315982b0169A409fd1F103359",
      "txHash": "0x28d4ce1a7be7fcc9c79edbd8d714e8e5a733776b45c67564e654d65920255baf",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)18056_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:19"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:21"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:25"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)18056_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)18056_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "25483df9b7b72dbb0269cac70d1cdc2a4886a7847de2b455275dd7fc47bfd3a2": {
      "address": "0x08cf8c3E171f9773fae83188D33C130A4B7d6B9d",
      "txHash": "0xc1cd42e54f410095182bae5136e9484cd705df0ab09d0b69272699cb12b0c85b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15998_storage))",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16021_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16032_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16039_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16050_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16057_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16066_storage)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16039_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16050_storage))",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16078_storage",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16071_storage)",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:133"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:134"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15998_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15998_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15998_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16021_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16021_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16032_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16032_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16039_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16039_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16050_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16050_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16057_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16057_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16066_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16066_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16050_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16078_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "updateTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16071_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16071_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "06db02134c3ce197d8bce7ef16b30a52239947f223c94e3987d72bc76a8dc5d7": {
      "address": "0xB7420E2Bf8F4E620546DeeFbaCD65E355DB1593A",
      "txHash": "0x5b1dc4abcb9ab8e6a7b88214d307aa38393d1e450ef89958d09ce292b8fee413",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16091_storage))",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16114_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16125_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16132_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16143_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16150_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16159_storage)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16132_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16143_storage))",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16171_storage",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16164_storage)",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:133"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:134"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16091_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16091_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16091_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16114_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16114_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16125_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16125_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16132_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16132_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16143_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16143_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16150_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16150_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16159_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16159_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16143_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16171_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "updateTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16164_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16164_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "218384b6e96e417900e494cea26cfaad51a211c0b383e3427bf0a0d46efde893": {
      "address": "0xDe4Ed0c3AC69eC2D2a0EdFBbb8De5C987619E7c8",
      "txHash": "0x75461ca7f3f6aa859932fd1415689c6cf8a147946cd4051fc65c47a0f0bf2555",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:18"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "refillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:19"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "nftAddress",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:20"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "26fbe614b586c3c633752a5650b5bf49d0927cde1c551d5ef3eb5e77084a41df": {
      "address": "0x092030eA39BEfA41F1693866f0375A75c03A2a5E",
      "txHash": "0xff9292fb80416b8d11b8c139e32a1a0634e478f1d237a5c68304480529c0a025",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:37"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:39"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:41"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:43"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:45"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:47"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10575_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8659_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:53"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:55"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:57"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:59"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10575_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10575_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10575_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8659_storage)": {
            "label": "mapping(uint256 => struct IMstationMiningUtils.Miner)"
          },
          "t_struct(Miner)8659_storage": {
            "label": "struct IMstationMiningUtils.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "60d57baffe82b0121bfa85d795d63935042308b87a095ae75c59230f295cd254": {
      "address": "0xa61224C63956bAAF88Bf56260912fb0c8DD054d3",
      "txHash": "0x94b969b21c5596d5cac87974c12849cd7bb2dbb4607358b3adc9a5166417a41c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ReferralBonus",
            "label": "pause",
            "type": "t_bool",
            "src": "contracts/referral/ReferralBonus.sol:26"
          },
          {
            "contract": "ReferralBonus",
            "label": "rewardPerInvitation",
            "type": "t_uint256",
            "src": "contracts/referral/ReferralBonus.sol:28"
          },
          {
            "contract": "ReferralBonus",
            "label": "rewardTokenAddress",
            "type": "t_contract(IERC20)7092",
            "src": "contracts/referral/ReferralBonus.sol:30"
          },
          {
            "contract": "ReferralBonus",
            "label": "rewardWallet",
            "type": "t_address",
            "src": "contracts/referral/ReferralBonus.sol:32"
          },
          {
            "contract": "ReferralBonus",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)18873_storage)",
            "src": "contracts/referral/ReferralBonus.sol:34"
          },
          {
            "contract": "ReferralBonus",
            "label": "userRewarded",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "contracts/referral/ReferralBonus.sol:36"
          },
          {
            "contract": "ReferralBonus",
            "label": "whitelistOperator",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/referral/ReferralBonus.sol:39"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IERC20)7092": {
            "label": "contract IERC20"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(UserReward)18873_storage)": {
            "label": "mapping(address => struct ReferralBonus.UserReward)"
          },
          "t_struct(UserReward)18873_storage": {
            "label": "struct ReferralBonus.UserReward",
            "members": [
              {
                "label": "rewardAmount",
                "type": "t_uint256"
              },
              {
                "label": "deptAmount",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8ac56e3cb7bfe5fee0b7f503181eb5c3c4b0ef9b5293ed1a96e935ac00d881bf": {
      "address": "0x824ddf3A848064747f8A7036Ad9332B4F954203A",
      "txHash": "0x7b2a7a58996cb7d4bc420b0d531cfe90a153fc510d0729557969ef9012b37c4e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16091_storage))",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16114_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16125_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16132_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16143_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16150_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16159_storage)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16132_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16143_storage))",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16171_storage",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16164_storage)",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:133"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "walletCoolingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:135"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16091_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16091_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16091_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16114_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16114_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16125_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16125_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16132_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16132_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16143_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16143_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16150_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16150_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16159_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16159_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16143_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16171_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "updateTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16164_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16164_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "2495df83af1a0e3560404a57edb755758c48442336d1e0e921f436e166554574": {
      "address": "0x6DA9A76EE601eBAA0E8B2C4c9024b2630238eAc4",
      "txHash": "0x503019676135c75c4e4b967b481fc4657b89f1442a3545a5317f949080134455",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "_token",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/vesting/TokenVestingSchedule.sol:41"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "vestingSchedulesIds",
            "type": "t_array(t_bytes32)dyn_storage",
            "src": "contracts/vesting/TokenVestingSchedule.sol:43"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "vestingSchedules",
            "type": "t_mapping(t_bytes32,t_struct(VestingSchedule)29874_storage)",
            "src": "contracts/vesting/TokenVestingSchedule.sol:44"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "vestingSchedulesTotalAmount",
            "type": "t_uint256",
            "src": "contracts/vesting/TokenVestingSchedule.sol:45"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "holdersVestingCount",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/vesting/TokenVestingSchedule.sol:46"
          }
        ],
        "types": {
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_struct(VestingSchedule)29874_storage)": {
            "label": "mapping(bytes32 => struct TokenVestingSchedule.VestingSchedule)"
          },
          "t_struct(VestingSchedule)29874_storage": {
            "label": "struct TokenVestingSchedule.VestingSchedule",
            "members": [
              {
                "label": "initialized",
                "type": "t_bool"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "cliff",
                "type": "t_uint256"
              },
              {
                "label": "start",
                "type": "t_uint256"
              },
              {
                "label": "duration",
                "type": "t_uint256"
              },
              {
                "label": "slicePeriodSeconds",
                "type": "t_uint256"
              },
              {
                "label": "revocable",
                "type": "t_bool"
              },
              {
                "label": "amountTotal",
                "type": "t_uint256"
              },
              {
                "label": "released",
                "type": "t_uint256"
              },
              {
                "label": "revoked",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "61f0970ed57d5015840c505f7a6cf8c8ac25a0040b05a2867e326cdd30a9290e": {
      "address": "0x2B2141cdBd7ef220D76b446dA33920b5431E4749",
      "txHash": "0x8c5afc1a635ed6ec341eee3b88e21afca42f2d18613d9337bed948faaa1cde6b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16091_storage))",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16114_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16125_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16132_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16143_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16150_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16159_storage)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16132_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16143_storage))",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16169_storage",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16164_storage)",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:133"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "walletCoolingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:135"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16091_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16091_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16091_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16114_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16114_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16125_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16125_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16132_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16132_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16143_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16143_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16150_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16150_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16159_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16159_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16143_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16169_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16164_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16164_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "1a1440f6d04347e5edcaff236aec89f303d6ee3ded29ed6d7fff974314ee3e9e": {
      "address": "0x94f51e7D4fCD58Cafaa112932A635119B65409FF",
      "txHash": "0x328568c3ab0d4dc6cd86754bcff4b50f9f2be0fddd2c0fdc9f303e1d676e11ff",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16153_storage))",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16176_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16187_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16194_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16205_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16212_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16221_storage)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16194_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16205_storage))",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16231_storage",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16226_storage)",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:133"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "walletCoolingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:135"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16153_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16153_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16153_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16176_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16176_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16187_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16187_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16194_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16194_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16205_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16205_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16212_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16212_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16221_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16221_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16205_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16231_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16226_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16226_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d2129a55899cd9d710e3a2c974fd1a3fde1f104c5643d8086123eeb10892bd38": {
      "address": "0x9032371a280D8aDf59E138550FDFe56c5946a46b",
      "txHash": "0x71b58e44940b5aa6f61fece91ac0eda9b404aea9e95be08ba505467c6f5a0754",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:19"
          },
          {
            "contract": "MstationSchool",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:20"
          },
          {
            "contract": "MstationSchool",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:21"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNFTWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:22"
          },
          {
            "contract": "MstationSchool",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:23"
          },
          {
            "contract": "MstationSchool",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:24"
          },
          {
            "contract": "MstationSchool",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:25"
          },
          {
            "contract": "MstationSchool",
            "label": "upgradePlans",
            "type": "t_mapping(t_uint256,t_struct(UpgradePlan)15193_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:34"
          },
          {
            "contract": "MstationSchool",
            "label": "students",
            "type": "t_mapping(t_uint256,t_struct(Student)15205_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:41"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNumerator",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:42"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:44"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(UpgradePlan)15193_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.UpgradePlan)"
          },
          "t_struct(UpgradePlan)15193_storage": {
            "label": "struct MstationSchool.UpgradePlan",
            "members": [
              {
                "label": "fromLevel",
                "type": "t_uint16"
              },
              {
                "label": "toLevel",
                "type": "t_uint16"
              },
              {
                "label": "amountBSCS",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rateFailure",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(Student)15205_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.Student)"
          },
          "t_struct(Student)15205_storage": {
            "label": "struct MstationSchool.Student",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "fa3a5005388335c44f7f5622ce565ac65c5c23ac163393575255a6ffff54d8ac": {
      "address": "0xe865679e973c65aCcb740B98FfEe852EFfaC51FB",
      "txHash": "0x85320ce8087e7e1df0827a79b3c9bc8c528f69369f5fc9ca3b2315d0f4a94b56",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:19"
          },
          {
            "contract": "MstationSchool",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:20"
          },
          {
            "contract": "MstationSchool",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:21"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNFTWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:22"
          },
          {
            "contract": "MstationSchool",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:23"
          },
          {
            "contract": "MstationSchool",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:24"
          },
          {
            "contract": "MstationSchool",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:25"
          },
          {
            "contract": "MstationSchool",
            "label": "upgradePlans",
            "type": "t_mapping(t_uint256,t_struct(UpgradePlan)15193_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:34"
          },
          {
            "contract": "MstationSchool",
            "label": "students",
            "type": "t_mapping(t_uint256,t_struct(Student)15205_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:41"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNumerator",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:42"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:44"
          },
          {
            "contract": "MstationSchool",
            "label": "mstFeeTotal",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:45"
          },
          {
            "contract": "MstationSchool",
            "label": "bscdFeeTotal",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:46"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(UpgradePlan)15193_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.UpgradePlan)"
          },
          "t_struct(UpgradePlan)15193_storage": {
            "label": "struct MstationSchool.UpgradePlan",
            "members": [
              {
                "label": "fromLevel",
                "type": "t_uint16"
              },
              {
                "label": "toLevel",
                "type": "t_uint16"
              },
              {
                "label": "amountBSCS",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rateFailure",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(Student)15205_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.Student)"
          },
          "t_struct(Student)15205_storage": {
            "label": "struct MstationSchool.Student",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "5ab23e04d304985e0e5391e3a56a54aae7c969c3cf3c45871abf5d911db7f501": {
      "address": "0x6ADAD310359C5FED3b1C62CD1Dd34b3b022EF82B",
      "txHash": "0x9b6c5d7b454edd32a031cb245465fb8ab06e0ba875a3d43cf0c92b4cb5b63f51",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16189_storage))",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16212_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16223_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16230_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16241_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16248_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16257_storage)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16230_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16241_storage))",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16267_storage",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16262_storage)",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:133"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "walletCoolingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:135"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16189_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16189_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16189_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16212_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16212_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16223_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16223_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16230_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16230_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16241_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16241_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16248_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16248_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16257_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16257_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16241_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16267_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16262_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16262_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e1ac5b5c5ffaa71ad747b8eb7a179af78bf04c03dcb641371616a8363c44337e": {
      "address": "0xAa0ED08De4F56E39584e627849E834e5327D1900",
      "txHash": "0xba8681e1d36d8c051e3db7ee5556d6c3bbd5153c504f8ee6b047d9810d8517dc",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:19"
          },
          {
            "contract": "MstationSchool",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:20"
          },
          {
            "contract": "MstationSchool",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:21"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNFTWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:22"
          },
          {
            "contract": "MstationSchool",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:23"
          },
          {
            "contract": "MstationSchool",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:24"
          },
          {
            "contract": "MstationSchool",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:25"
          },
          {
            "contract": "MstationSchool",
            "label": "upgradePlans",
            "type": "t_mapping(t_uint256,t_struct(UpgradePlan)15193_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:34"
          },
          {
            "contract": "MstationSchool",
            "label": "students",
            "type": "t_mapping(t_uint256,t_struct(Student)15205_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:41"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNumerator",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:42"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:44"
          },
          {
            "contract": "MstationSchool",
            "label": "mstFeeTotal",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:45"
          },
          {
            "contract": "MstationSchool",
            "label": "bscdFeeTotal",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:46"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(UpgradePlan)15193_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.UpgradePlan)"
          },
          "t_struct(UpgradePlan)15193_storage": {
            "label": "struct MstationSchool.UpgradePlan",
            "members": [
              {
                "label": "fromLevel",
                "type": "t_uint16"
              },
              {
                "label": "toLevel",
                "type": "t_uint16"
              },
              {
                "label": "amountBSCS",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rateFailure",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(Student)15205_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.Student)"
          },
          "t_struct(Student)15205_storage": {
            "label": "struct MstationSchool.Student",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "d9ab63001d4ac2fc26ff5d6d59c534a7d3e162097ccaf730dcd5007dcb53bc42": {
      "address": "0x8b3e0eEcEac29891D758BDD8Cc9846CaA50A0adc",
      "txHash": "0x7ca52d94e0f1bc9463fc6944df89b28ebae45655f6fd8eea070ff56bd8fd1124",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)18084_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:24"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:25"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:26"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPveUtils.sol:27"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:28"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18094_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:29"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)18084_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)18084_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18094_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PillFee))"
          },
          "t_mapping(t_uint256,t_struct(PillFee)18094_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PillFee)"
          },
          "t_struct(PillFee)18094_storage": {
            "label": "struct MstationPvEUtils.PillFee",
            "members": [
              {
                "label": "amountMST",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "74ff299571605fb80d028092d1007ef839b918386b06644d461af66c36c2b9ce": {
      "address": "0x538C2CE4455963186Ac9408e05CB471Ae82aCE43",
      "txHash": "0xd332495b5aa872f620fab551063896a6f5856ec9494f13ef2a84eb06f05798df",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16195_storage))",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16218_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16229_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16236_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16247_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16254_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16263_storage)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16236_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16247_storage))",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16273_storage",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16268_storage)",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:133"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "walletCoolingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:135"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16195_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16195_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16195_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16218_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16218_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16229_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16229_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16236_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16236_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16247_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16247_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16254_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16254_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16263_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16263_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16247_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16273_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16268_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16268_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "2505c6d45ceafe0f512ffe2f2247870c6db6854a27a981eda337f9d03b7bf4fa": {
      "address": "0x0A8b43539F56FE800f780709d7223551551FAC83",
      "txHash": "0x71c3b658e108aa9644b6c3d1e707891aed25032d15f82069cc552378bbaee2b9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:50"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)12686_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)12701_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:62"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)12748_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "isTransfer",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:84"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)12686_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)12686_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)12701_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)12701_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)12748_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)12748_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "455e89a77248d3d86b9c0007161ad702aa3da393f03fe309348cecd35773584c": {
      "address": "0x3461277c68E15f0F021d49Fb6Cb59cC67F5C9e74",
      "txHash": "0x1193081f079801d8c7ad2ea336bfecb8c719962b46588f4bc139187433a61119",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:50"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)12686_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)12701_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:62"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)12748_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "isTransfer",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:84"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistContracts",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:85"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)12686_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)12686_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)12701_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)12701_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)12748_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)12748_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "4cccce13cd2692ebcade626aae03d566a1bd50b4a40c4debd56642a4decd124d": {
      "address": "0x8deaF4e8313e5C49cEcca42Fb32A1040750A2f64",
      "txHash": "0xbc88e064d6029039e0af12395c236555d7d006fa41c4a5fe36f93097459a982c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:50"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)12686_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)12701_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:62"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)12748_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "isTransfer",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:84"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistContracts",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:85"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)12686_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)12686_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)12701_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)12701_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)12748_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)12748_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "2e8b553190d2f5eda1ddf0fe4131b6d41fc80aa6a58fc42c9640fb1215b5e84f": {
      "address": "0xA07e9aF9C61bD1F7DF443C862B568151A26f1c09",
      "txHash": "0x1116719b2d300e4d226244ea385a32c0bcb3b432870284cd41f21392c6c63cbb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16253_storage))",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16276_storage)",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16287_storage)",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16294_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16305_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16312_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16321_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16294_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16305_storage))",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16333_storage",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16326_storage)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "walletCoolingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:128"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16253_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16253_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16253_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16276_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16276_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16287_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16287_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16294_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16294_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16305_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16305_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16312_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16312_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16321_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16321_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16305_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16333_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "updateTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16326_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16326_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "76f2ffad9505b62ffc972eae962145dcc8e3374ae5ea114eb587edcbb9469658": {
      "address": "0x018852D6F27D03715CA7FacBECA9b986d343CCF2",
      "txHash": "0x45e8ba1c2e993b1c7885df5496d62150dcdf2e8f93f9c5171fda43fe6d3e866c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)18164_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:40"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:41"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:42"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:43"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPveUtils.sol:44"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:45"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18174_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:46"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)18190_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:47"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)18164_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)18164_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18174_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PillFee))"
          },
          "t_mapping(t_uint256,t_struct(PillFee)18174_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PillFee)"
          },
          "t_struct(PillFee)18174_storage": {
            "label": "struct MstationPvEUtils.PillFee",
            "members": [
              {
                "label": "amountMST",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)18190_storage)": {
            "label": "mapping(uint64 => struct MstationPvEUtils.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)18190_storage": {
            "label": "struct MstationPvEUtils.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b14c8cce25ef3a39408ffc43fdb134f542613cf786841c6fb0d570b39a1857fa": {
      "address": "0xd3fD7985392b61A66820B9b93E9659164c9Db0E3",
      "txHash": "0xe84a8d4e4c2cf9fc6d87d403711253757bd2810fac7575ed12173ded76792d92",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:18"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "refillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:19"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "nftAddress",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:20"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8e879642f1fd09ff2f8e374ac35a01340d71d402c681d25e39d7813c7e1ee0bf": {
      "address": "0xf1370fA7793BA64A13f86876B565caf08d64e326",
      "txHash": "0xbc2472e206c1bda29e2afd282c861612e6075c900839864f7430a5f26add6275",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:18"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "refillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:19"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "nftAddress",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:20"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f11aaa5085c73665b61b807c9e8e43da0ac3a9939ea0613642a9314365239471": {
      "address": "0xc1F557f9caA1D3BAEcE7EC828A26C0962425097f",
      "txHash": "0x37b715b886d8fce0fe5f4702a5cd1855db904de2912783f286036150dcd2d37c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16281_storage))",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16304_storage)",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16315_storage)",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16322_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16333_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16340_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16349_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16322_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16333_storage))",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16361_storage",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16354_storage)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "walletCoolingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:128"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16281_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16281_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16281_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16304_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16304_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16315_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16315_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16322_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16322_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16333_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16333_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16340_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16340_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16349_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16349_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16333_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16361_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "updateTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16354_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16354_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "3003d8a3d015a574d2534e1f7e4b66647437f6ea749eab68c35089c7919690d6": {
      "address": "0x4fa2e059910508BC21685789b337c133b2fC555C",
      "txHash": "0x1eb4b3711e68dda293d5e970d1d37748690891b5a61aaafa5f5433ebb760d9ac",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16283_storage))",
            "src": "contracts/pve/MstationPve.sol:96"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16288_storage)",
            "src": "contracts/pve/MstationPve.sol:97"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16299_storage)",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16306_storage)",
            "src": "contracts/pve/MstationPve.sol:99"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16317_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16324_storage)",
            "src": "contracts/pve/MstationPve.sol:101"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:103"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:104"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16333_storage)",
            "src": "contracts/pve/MstationPve.sol:106"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16306_storage)",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16317_storage))",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16343_storage",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16338_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "walletCoolingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:117"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16283_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16283_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16283_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16288_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16288_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16299_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16299_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16306_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16306_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16317_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16317_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16324_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16324_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16333_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16333_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16317_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16343_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16338_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16338_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8838cf0b71695a92f176093571c0c847021804e40396ee5444ed1230d1eed700": {
      "address": "0xea39BC41E3a9c9e2D57014d7E86931e1F8e26EFd",
      "txHash": "0x65dced9d32fb92794eba36044066939646cc3bb4ad061b63f8b4f5697f00712a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:37"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:39"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:41"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:43"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:45"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:47"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10575_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8659_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:53"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:55"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:57"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:59"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10575_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10575_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10575_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8659_storage)": {
            "label": "mapping(uint256 => struct IMstationMiningUtils.Miner)"
          },
          "t_struct(Miner)8659_storage": {
            "label": "struct IMstationMiningUtils.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e36be8bf4edc393051c7ed86df601fee78071a4fc2f6dd0f95f4696773b9d126": {
      "address": "0x72D05A7fdf2cD9d055043DC758E2D68c8Dd78D61",
      "txHash": "0xba971db9c33e1cfd63c1aaf1ed01eb47732031ff539ee23c04bac18ed4659764",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:50"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)12665_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)12680_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:62"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)12727_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "isTransfer",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:84"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistContracts",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:85"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "hideHero",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:86"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)12665_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)12665_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)12680_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)12680_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)12727_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)12727_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "1707e9d91f5d2c2dad58619dc11ab43f25ed4e243a57549569c4c7ca34c4fc2a": {
      "address": "0x0eC06338636f9CB66f4fa438EBaeB5f1ee53321c",
      "txHash": "0x450dcf7dbfd69de57374923a5fa624ffc7c80d5be7caedb18b286b5f51adb0b1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:50"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)12665_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)12680_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:62"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)12727_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "isTransfer",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:84"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistContracts",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:85"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "hideHero",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:86"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)12665_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)12665_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)12680_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)12680_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)12727_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)12727_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "713d25ab1ccecf24ad83e0b32bca6137bf9bcb17531a31f3d61f52311cbcadb5": {
      "address": "0xd755aC0787d9686663111a63F43A7Bf46B4E114C",
      "txHash": "0x6c942b72ff8274c512eac98352981c9dbd93d38c14821cdfa10d68933d442d4c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16283_storage))",
            "src": "contracts/pve/MstationPve.sol:96"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16288_storage)",
            "src": "contracts/pve/MstationPve.sol:97"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16299_storage)",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16306_storage)",
            "src": "contracts/pve/MstationPve.sol:99"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16317_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16324_storage)",
            "src": "contracts/pve/MstationPve.sol:101"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:103"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:104"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16333_storage)",
            "src": "contracts/pve/MstationPve.sol:106"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16306_storage)",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16317_storage))",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16343_storage",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16338_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "walletCoolingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:117"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16283_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16283_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16283_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16288_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16288_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16299_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16299_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16306_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16306_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16317_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16317_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16324_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16324_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16333_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16333_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16317_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16343_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16338_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16338_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "61471798538d4133b564b0fc7e4cde525a05f6fb19d63cd1f1b522495de3b535": {
      "address": "0x174272Fe42bF1EdAa50bDD08C4f1e2b73A070c79",
      "txHash": "0xb1a485a7b45dfc6f9d6072a4e69fd83b2561e3a4b2da41a14d9a9f49bf4559bd",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16283_storage))",
            "src": "contracts/pve/MstationPve.sol:96"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16288_storage)",
            "src": "contracts/pve/MstationPve.sol:97"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16299_storage)",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16306_storage)",
            "src": "contracts/pve/MstationPve.sol:99"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16317_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16324_storage)",
            "src": "contracts/pve/MstationPve.sol:101"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:103"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:104"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16333_storage)",
            "src": "contracts/pve/MstationPve.sol:106"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16306_storage)",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16317_storage))",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16343_storage",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16338_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "walletCoolingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:117"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16283_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16283_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16283_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16288_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16288_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16299_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16299_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16306_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16306_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16317_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16317_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16324_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16324_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16333_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16333_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16317_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16343_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16338_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16338_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ed3e5032e0eb733b3bc159d33202be79212a971698556d9f01daccd319f21392": {
      "address": "0x3afB60f107a08723AaA4BfdE24C1D8c6DB7bF56e",
      "txHash": "0x4a0f8ac29a8180f1c9b4a736e5fa4bd3cfac37bcbf0feb111afa8983801c8115",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:50"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)12676_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)12691_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:62"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)12738_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "isTransfer",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:84"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistContracts",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:85"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "hideHero",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:86"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)12676_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)12676_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)12691_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)12691_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)12738_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)12738_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f1acbad23f51a7e5b2fdb1f00648f24d55ef7195e228cf75dec8dfe198c1a705": {
      "address": "0x7f2a07F275BD6585b17FCdD602E49A1fA00Fe018",
      "txHash": "0x423b0293efbe15f62a11ac900de83c6bbd1f766c9290b060186ccf4aed62d870",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16299_storage))",
            "src": "contracts/pve/MstationPve.sol:96"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16304_storage)",
            "src": "contracts/pve/MstationPve.sol:97"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16315_storage)",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16322_storage)",
            "src": "contracts/pve/MstationPve.sol:99"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16333_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16340_storage)",
            "src": "contracts/pve/MstationPve.sol:101"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:103"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:104"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16349_storage)",
            "src": "contracts/pve/MstationPve.sol:106"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16322_storage)",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16333_storage))",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16359_storage",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16354_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "walletCoolingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:117"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16299_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16299_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16299_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16304_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16304_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16315_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16315_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16322_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16322_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16333_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16333_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16340_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16340_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16349_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16349_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16333_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16359_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16354_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16354_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "66b3bb0970152576a9d17ca190e603f646527f07bde60293f740c611991bcb13": {
      "address": "0x3D7Cba9C00CfF288C59F63e444d95848ABcC71d2",
      "txHash": "0x448abdc8cb1a2fc766cf4a00786b6fa2818b21fdf3412fb44a9bc4664901217a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:50"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)13113_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)13128_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:62"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)13175_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "isTransfer",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:84"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistContracts",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:85"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "hideHero",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:86"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)13113_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)13113_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)13128_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)13128_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)13175_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)13175_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "fbe629ad2f1ca73d66b83343eddc4245381b9cf1fbeb86a315a69036147fb96c": {
      "address": "0x59888a15C9690f19FD446BE758FDe1b33843822d",
      "txHash": "0x42932a00477153e3289923e6f95a5bc87e40f8e7b62f369d006c11930a089bd4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFTUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/mstationNFT/MstationNFTUtils.sol:10"
          },
          {
            "contract": "MstationNFTUtils",
            "label": "blacklistAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/mstationNFT/MstationNFTUtils.sol:11"
          },
          {
            "contract": "MstationNFTUtils",
            "label": "blacklistNFT",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFTUtils.sol:12"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "69ba182003d300e7d11f19a9f5b8da8b38c4d239e8001a4a85a137071b27cafe": {
      "address": "0x88fFAA9c4133752992C77C081a1bBFa7A236d207",
      "txHash": "0x838a684649d21ca970d5a10f4902ad8cdb5b4babdc0fca2ab97b508d4747e92b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8679",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16458_storage))",
            "src": "contracts/pve/MstationPve.sol:96"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16463_storage)",
            "src": "contracts/pve/MstationPve.sol:97"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16474_storage)",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16481_storage)",
            "src": "contracts/pve/MstationPve.sol:99"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16492_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16499_storage)",
            "src": "contracts/pve/MstationPve.sol:101"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:103"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:104"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16508_storage)",
            "src": "contracts/pve/MstationPve.sol:105"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16481_storage)",
            "src": "contracts/pve/MstationPve.sol:106"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16492_storage))",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16520_storage",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16513_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "walletCoolingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:116"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8679": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16458_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16458_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16458_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16463_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16463_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16474_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16474_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16481_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16481_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16492_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16492_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16499_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16499_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16508_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16508_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16492_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16520_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "updateTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16513_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16513_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e1e96bb0573ebe16718e67fa01aa6a7b38019fa8a63873cd23577cad229fba3e": {
      "address": "0x7C4709D5b64739253d68fB84660dEda70B081e6e",
      "txHash": "0x60af071cd550821ca37ae562afc1a33ad17671142cbd9252e961663a95582723",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:26"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(IERC20Upgradeable)2772",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(IERC20Upgradeable)2772",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8672",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16725_storage))",
            "src": "contracts/pve/MstationPve.sol:95"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16730_storage)",
            "src": "contracts/pve/MstationPve.sol:96"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16741_storage)",
            "src": "contracts/pve/MstationPve.sol:97"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16748_storage)",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16759_storage)",
            "src": "contracts/pve/MstationPve.sol:99"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16766_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:101"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:103"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16775_storage)",
            "src": "contracts/pve/MstationPve.sol:104"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16748_storage)",
            "src": "contracts/pve/MstationPve.sol:105"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16759_storage))",
            "src": "contracts/pve/MstationPve.sol:106"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16787_storage",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16780_storage)",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "walletCoolingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:115"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IERC20Upgradeable)2772": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IBSCD)8672": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16725_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16725_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16725_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16730_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16730_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16741_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16741_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16748_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16748_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16759_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16759_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16766_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16766_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16775_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16775_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16759_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16787_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "updateTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16780_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16780_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "05aa2570499444034852f563bdcc487e2c27f67c548deb34783e5e56a4ac1845": {
      "address": "0x80c1dAcF416605bc146022895D181f5114666AF9",
      "txHash": "0xc1a2c276527a4ecb61d0b6999fa5f62344165be30acf86099af74a33d29582c9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8679",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16458_storage))",
            "src": "contracts/pve/MstationPve.sol:96"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16463_storage)",
            "src": "contracts/pve/MstationPve.sol:97"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16474_storage)",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16481_storage)",
            "src": "contracts/pve/MstationPve.sol:99"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16492_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16499_storage)",
            "src": "contracts/pve/MstationPve.sol:101"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:103"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:104"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16508_storage)",
            "src": "contracts/pve/MstationPve.sol:105"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16481_storage)",
            "src": "contracts/pve/MstationPve.sol:106"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16492_storage))",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16518_storage",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16513_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "walletCoolingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:116"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8679": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16458_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16458_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16458_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16463_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16463_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16474_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16474_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16481_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16481_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16492_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16492_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16499_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16499_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16508_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16508_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16492_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16518_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16513_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16513_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c1b3f6d692ee680ae22acd593b441e03b1157355e13c2ae201626074ef34db55": {
      "address": "0x7f0be296d7EAB4df019a7f30E0351765bD0C33C9",
      "txHash": "0xef77bd502df5df8883cc93c308b133bc77562f4f94b93dc0f2f5cb6cb20f65af",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:26"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(IERC20Upgradeable)2772",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(IERC20Upgradeable)2772",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8672",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16725_storage))",
            "src": "contracts/pve/MstationPve.sol:95"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16730_storage)",
            "src": "contracts/pve/MstationPve.sol:96"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16741_storage)",
            "src": "contracts/pve/MstationPve.sol:97"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16748_storage)",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16759_storage)",
            "src": "contracts/pve/MstationPve.sol:99"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16766_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:101"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:103"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16775_storage)",
            "src": "contracts/pve/MstationPve.sol:104"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16748_storage)",
            "src": "contracts/pve/MstationPve.sol:105"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16759_storage))",
            "src": "contracts/pve/MstationPve.sol:106"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16785_storage",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16780_storage)",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "walletCoolingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:115"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IERC20Upgradeable)2772": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IBSCD)8672": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16725_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16725_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16725_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16730_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16730_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16741_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16741_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16748_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16748_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16759_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16759_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16766_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16766_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16775_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16775_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16759_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16785_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16780_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16780_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "093459e56102526496efa912dae7e5eadb53c1365027d5cc7ad7f918b623fbc6": {
      "address": "0x86756aE638725Ba87577616b3073c3763c10925b",
      "txHash": "0x0163dab5b60d26252380c4f5b5189c934d651051912011b60bab247c34b271a8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:29"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:30"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:31"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:32"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:33"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:34"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8672",
            "src": "contracts/mstationMining/MstationMining.sol:35"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:37"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:39"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:41"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10756_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:43"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8822_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:45"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:53"
          },
          {
            "contract": "MstationMining",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8672": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10756_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10756_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10756_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8822_storage)": {
            "label": "mapping(uint256 => struct IMstationMiningUtils.Miner)"
          },
          "t_struct(Miner)8822_storage": {
            "label": "struct IMstationMiningUtils.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b59de47226de2340df3999d905c062b500f4b505ed956c78d993fbb06c7b1c00": {
      "address": "0x42177daFa3B84503A753857bC364671F9F28d8bE",
      "txHash": "0x9a6fd143185fe50acc415505f9d4c38062f27bac3a0eba1d5154859102e0ac14",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:29"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:30"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:31"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:32"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:33"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:34"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8672",
            "src": "contracts/mstationMining/MstationMining.sol:35"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:37"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:39"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:41"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10756_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:43"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8822_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:45"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:53"
          },
          {
            "contract": "MstationMining",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8672": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10756_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10756_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10756_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8822_storage)": {
            "label": "mapping(uint256 => struct IMstationMiningUtils.Miner)"
          },
          "t_struct(Miner)8822_storage": {
            "label": "struct IMstationMiningUtils.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "378bc551d5218254c080dfc3c6e7ff9617a9a690f656e9e50a561abf12ca5fa6": {
      "address": "0xc72EE0b4Cdf53f51Ad1c07d6A544d8Da7e0DA3bc",
      "txHash": "0x91990aec0c77bba7b00a97e790e6ac8544377f192e81b7d629be6a9ba7256bbe",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ReferralBonus",
            "label": "pause",
            "type": "t_bool",
            "src": "contracts/referral/ReferralBonus.sol:27"
          },
          {
            "contract": "ReferralBonus",
            "label": "rewardPerInvitation",
            "type": "t_uint256",
            "src": "contracts/referral/ReferralBonus.sol:29"
          },
          {
            "contract": "ReferralBonus",
            "label": "rewardTokenAddress",
            "type": "t_contract(IERC20)7092",
            "src": "contracts/referral/ReferralBonus.sol:31"
          },
          {
            "contract": "ReferralBonus",
            "label": "rewardWallet",
            "type": "t_address",
            "src": "contracts/referral/ReferralBonus.sol:33"
          },
          {
            "contract": "ReferralBonus",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)19961_storage)",
            "src": "contracts/referral/ReferralBonus.sol:35"
          },
          {
            "contract": "ReferralBonus",
            "label": "userRewarded",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "contracts/referral/ReferralBonus.sol:37"
          },
          {
            "contract": "ReferralBonus",
            "label": "whitelistOperator",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/referral/ReferralBonus.sol:39"
          },
          {
            "contract": "ReferralBonus",
            "label": "bonusPercent",
            "type": "t_uint256",
            "src": "contracts/referral/ReferralBonus.sol:41"
          },
          {
            "contract": "ReferralBonus",
            "label": "userRewards2",
            "type": "t_mapping(t_address,t_struct(UserReward)19961_storage)",
            "src": "contracts/referral/ReferralBonus.sol:43"
          },
          {
            "contract": "ReferralBonus",
            "label": "referralAddress",
            "type": "t_mapping(t_address,t_address)",
            "src": "contracts/referral/ReferralBonus.sol:45"
          },
          {
            "contract": "ReferralBonus",
            "label": "claimed",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/referral/ReferralBonus.sol:46"
          },
          {
            "contract": "ReferralBonus",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/referral/ReferralBonus.sol:47"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IERC20)7092": {
            "label": "contract IERC20"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(UserReward)19961_storage)": {
            "label": "mapping(address => struct ReferralBonus.UserReward)"
          },
          "t_struct(UserReward)19961_storage": {
            "label": "struct ReferralBonus.UserReward",
            "members": [
              {
                "label": "rewardAmount",
                "type": "t_uint256"
              },
              {
                "label": "deptAmount",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "89468ec00f217f0db644f57dc0c850d58d7e999b16213a182b3f326b3c82b0a1": {
      "address": "0x7a7C3aD6F10Dc2c004E959339477545926E97b76",
      "txHash": "0xc13123c9ba3c7055344620d69c58df797eec0b2092452af6ad52ef56bd78cd4d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:26"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(IERC20Upgradeable)2772",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(IERC20Upgradeable)2772",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8672",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16934_storage))",
            "src": "contracts/pve/MstationPve.sol:95"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16939_storage)",
            "src": "contracts/pve/MstationPve.sol:96"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16950_storage)",
            "src": "contracts/pve/MstationPve.sol:97"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16957_storage)",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16968_storage)",
            "src": "contracts/pve/MstationPve.sol:99"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16975_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:101"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:103"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16984_storage)",
            "src": "contracts/pve/MstationPve.sol:104"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16957_storage)",
            "src": "contracts/pve/MstationPve.sol:105"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16968_storage))",
            "src": "contracts/pve/MstationPve.sol:106"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16996_storage",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16989_storage)",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "walletCoolingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:115"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IERC20Upgradeable)2772": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IBSCD)8672": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16934_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16934_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16934_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16939_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16939_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16950_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16950_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16957_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16957_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16968_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16968_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16975_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16975_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16984_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16984_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16968_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16996_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "updateTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16989_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16989_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b4c0ce4d0e6a438cdf1999316ffb59d0d11bfea9bac9dec1ef51a6545a5b564c": {
      "address": "0x6B3811fAB9931a5e351648D71c0121114Fa65EC7",
      "txHash": "0xa2020ffe16afc5b6b190f76ae9637386300d278c7ae555b7221c2c0565aa884a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:26"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(IERC20Upgradeable)2772",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(IERC20Upgradeable)2772",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8672",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16934_storage))",
            "src": "contracts/pve/MstationPve.sol:95"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16939_storage)",
            "src": "contracts/pve/MstationPve.sol:96"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16950_storage)",
            "src": "contracts/pve/MstationPve.sol:97"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16957_storage)",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16968_storage)",
            "src": "contracts/pve/MstationPve.sol:99"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16975_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:101"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:103"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16984_storage)",
            "src": "contracts/pve/MstationPve.sol:104"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16957_storage)",
            "src": "contracts/pve/MstationPve.sol:105"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16968_storage))",
            "src": "contracts/pve/MstationPve.sol:106"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16996_storage",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16989_storage)",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "walletCoolingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:115"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IERC20Upgradeable)2772": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IBSCD)8672": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16934_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16934_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16934_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16939_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16939_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16950_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16950_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16957_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16957_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16968_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16968_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16975_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16975_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16984_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16984_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16968_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16996_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "updateTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16989_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16989_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b33eeb0ba3a9aabab7f2201defcb4daf9885e1b9924e6eac5d1c684a2ef23466": {
      "address": "0x55BE92786497c9e3430D1685EDc296b56970A488",
      "txHash": "0x8a2e2e0a21ab759527bbcf1d6dbbd447bb19758142d5132ec72bfa975d715361",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)18786_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:40"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:41"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:42"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:43"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPveUtils.sol:44"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:45"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18796_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:46"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)18812_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:47"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)18786_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)18786_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18796_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PillFee))"
          },
          "t_mapping(t_uint256,t_struct(PillFee)18796_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PillFee)"
          },
          "t_struct(PillFee)18796_storage": {
            "label": "struct MstationPvEUtils.PillFee",
            "members": [
              {
                "label": "amountMST",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)18812_storage)": {
            "label": "mapping(uint64 => struct MstationPvEUtils.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)18812_storage": {
            "label": "struct MstationPvEUtils.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "68358bebc4871363085c0f499a0cd37e278ac0fd278750fc1c47b9be5bd3ef53": {
      "address": "0x5Bf5755c496eb78f0f4259B5d32173BfBe5D7810",
      "txHash": "0x6e1d139ea5f8939a95d56643eeb066185beb913143fc5801f73ce6ca775621e7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)18786_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:40"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:41"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:42"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:43"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPveUtils.sol:44"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:45"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18796_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:46"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)18812_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:47"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)18786_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)18786_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18796_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PillFee))"
          },
          "t_mapping(t_uint256,t_struct(PillFee)18796_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PillFee)"
          },
          "t_struct(PillFee)18796_storage": {
            "label": "struct MstationPvEUtils.PillFee",
            "members": [
              {
                "label": "amountMST",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)18812_storage)": {
            "label": "mapping(uint64 => struct MstationPvEUtils.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)18812_storage": {
            "label": "struct MstationPvEUtils.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b2e68ae33ee49d87e21a941949b6d7436caac8e8be72ba9ee7cea54e8d38e9a6": {
      "address": "0x4E406BE218C27F4200515B8f163Cf0B08ec2Cd65",
      "txHash": "0x9306f7cede0f998f5ddd314ddc873c02a0052116f9d4a009acab8dc6208f5135",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)18786_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:40"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:41"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:42"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:43"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPveUtils.sol:44"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:45"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18796_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:46"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)18812_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:47"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)18786_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)18786_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18796_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PillFee))"
          },
          "t_mapping(t_uint256,t_struct(PillFee)18796_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PillFee)"
          },
          "t_struct(PillFee)18796_storage": {
            "label": "struct MstationPvEUtils.PillFee",
            "members": [
              {
                "label": "amountMST",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)18812_storage)": {
            "label": "mapping(uint64 => struct MstationPvEUtils.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)18812_storage": {
            "label": "struct MstationPvEUtils.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "1543fae59c7ca7c5f2ce10ad554ef4bd8794c7b64d0a89ddc6b2de1d080738c7": {
      "address": "0xE0AFFB8660212f5902b3b501E9615Bd59Df5C95E",
      "txHash": "0x8acb82c64073303d887bdc34562c863f1fed145c709f9e83a803d72162eae07d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:26"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(IERC20Upgradeable)2772",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(IERC20Upgradeable)2772",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8672",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16934_storage))",
            "src": "contracts/pve/MstationPve.sol:95"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16939_storage)",
            "src": "contracts/pve/MstationPve.sol:96"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16950_storage)",
            "src": "contracts/pve/MstationPve.sol:97"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16957_storage)",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16968_storage)",
            "src": "contracts/pve/MstationPve.sol:99"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16975_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:101"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:103"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16984_storage)",
            "src": "contracts/pve/MstationPve.sol:104"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16957_storage)",
            "src": "contracts/pve/MstationPve.sol:105"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16968_storage))",
            "src": "contracts/pve/MstationPve.sol:106"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16994_storage",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16989_storage)",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "walletCoolingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:115"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IERC20Upgradeable)2772": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IBSCD)8672": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16934_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16934_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16934_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16939_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16939_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16950_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16950_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16957_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16957_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16968_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16968_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16975_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16975_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16984_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16984_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16968_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16994_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16989_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16989_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "11202b43d1df1f7001cdd00ff3e7dfb860b6706013a9dcd256aee2dfec68357b": {
      "address": "0x30c1F9B3e7dC2567a92776a6c6353597004E2e6F",
      "txHash": "0x37328d83fe017d3bca33825bc3639fbbcef6d3188721262e18e3c07b49f6a6e5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:50"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)13113_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)13128_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:62"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)13175_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "isTransfer",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:84"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistContracts",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:85"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "hideHero",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:86"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)13113_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)13113_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)13128_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)13128_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)13175_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)13175_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "a7f5d12c6b17a6ea5ce74841703822a84a2c7532bb70014ea2fc4cb76fb585b2": {
      "address": "0x68E81d50801272a715Fa102863452542312Ef1Df",
      "txHash": "0xe62475bdcc89616c45984eb87fcadd1d9d0e4d4b591a4642db763f3e9f7d6dcc",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:26"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(IERC20Upgradeable)2772",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(IERC20Upgradeable)2772",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8672",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16934_storage))",
            "src": "contracts/pve/MstationPve.sol:95"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16939_storage)",
            "src": "contracts/pve/MstationPve.sol:96"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16950_storage)",
            "src": "contracts/pve/MstationPve.sol:97"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16957_storage)",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16968_storage)",
            "src": "contracts/pve/MstationPve.sol:99"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16975_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:101"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:103"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16984_storage)",
            "src": "contracts/pve/MstationPve.sol:104"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16957_storage)",
            "src": "contracts/pve/MstationPve.sol:105"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16968_storage))",
            "src": "contracts/pve/MstationPve.sol:106"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16994_storage",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16989_storage)",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "walletCoolingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:115"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IERC20Upgradeable)2772": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IBSCD)8672": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16934_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16934_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16934_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16939_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16939_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16950_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16950_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16957_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16957_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16968_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16968_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16975_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16975_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16984_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16984_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16968_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16994_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16989_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16989_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "afda6c2f8596cd0f1d0fd9be042f6e56f84da9d3d499895a2c4354c159982ef0": {
      "address": "0xDbbe4394639967F2D6ABfcD623EDc0E58A39559C",
      "txHash": "0x23f37fc2a6fd9ededeb92f0d736bc3be0f758d0f77cba5ad416b06e1848cc8ad",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:26"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(IERC20Upgradeable)2772",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(IERC20Upgradeable)2772",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8672",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16934_storage))",
            "src": "contracts/pve/MstationPve.sol:95"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16939_storage)",
            "src": "contracts/pve/MstationPve.sol:96"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16950_storage)",
            "src": "contracts/pve/MstationPve.sol:97"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16957_storage)",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16968_storage)",
            "src": "contracts/pve/MstationPve.sol:99"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16975_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:101"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:103"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16984_storage)",
            "src": "contracts/pve/MstationPve.sol:104"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16957_storage)",
            "src": "contracts/pve/MstationPve.sol:105"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16968_storage))",
            "src": "contracts/pve/MstationPve.sol:106"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16994_storage",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16989_storage)",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "walletCoolingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:115"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IERC20Upgradeable)2772": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IBSCD)8672": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16934_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16934_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16934_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16939_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16939_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16950_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16950_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16957_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16957_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16968_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16968_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16975_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16975_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16984_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16984_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16968_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16994_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16989_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16989_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "0a73b446977dd77a9ee56a669fbf76a7c873260780420186d138c340c31dc7e9": {
      "address": "0x4a1E216f571423b29BDcfFd826cCBc80d324c986",
      "txHash": "0x13a9c466862159803dc3c26f6a7e4ac29d7041b41a0f05affb881068df59125e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:26"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(IERC20Upgradeable)2772",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(IERC20Upgradeable)2772",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8672",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16930_storage))",
            "src": "contracts/pve/MstationPve.sol:95"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16935_storage)",
            "src": "contracts/pve/MstationPve.sol:96"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16946_storage)",
            "src": "contracts/pve/MstationPve.sol:97"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16953_storage)",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16964_storage)",
            "src": "contracts/pve/MstationPve.sol:99"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16971_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:101"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:103"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16980_storage)",
            "src": "contracts/pve/MstationPve.sol:104"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16953_storage)",
            "src": "contracts/pve/MstationPve.sol:105"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16964_storage))",
            "src": "contracts/pve/MstationPve.sol:106"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16992_storage",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16985_storage)",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "walletCoolingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:115"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IERC20Upgradeable)2772": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IBSCD)8672": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16930_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16930_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16930_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16935_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16935_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16946_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16946_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16953_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16953_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16964_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16964_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16971_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16971_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16980_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16980_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16964_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16992_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "updateTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16985_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16985_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "a789a6449a1078dfe5b94472db3ab1434e2912fea6371f67d115998ca9cb0c8b": {
      "address": "0x5e2f6a55f736edA38AC08109dACF8e58B6C2cB55",
      "txHash": "0xe168124c11ca0415aae527094aebbd16319644bcbfd14226558e581e5c3ef3ce",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:26"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(IERC20Upgradeable)2772",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(IERC20Upgradeable)2772",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8672",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16930_storage))",
            "src": "contracts/pve/MstationPve.sol:95"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16935_storage)",
            "src": "contracts/pve/MstationPve.sol:96"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16946_storage)",
            "src": "contracts/pve/MstationPve.sol:97"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16953_storage)",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16964_storage)",
            "src": "contracts/pve/MstationPve.sol:99"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16971_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:101"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:103"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16980_storage)",
            "src": "contracts/pve/MstationPve.sol:104"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16953_storage)",
            "src": "contracts/pve/MstationPve.sol:105"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16964_storage))",
            "src": "contracts/pve/MstationPve.sol:106"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16990_storage",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16985_storage)",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "walletCoolingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:115"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IERC20Upgradeable)2772": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IBSCD)8672": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16930_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16930_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16930_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16935_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16935_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16946_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16946_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16953_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16953_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16964_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16964_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16971_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16971_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16980_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16980_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16964_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16990_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16985_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16985_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8f5ccabfab16d9ba0b257e12260fe9fbd7c7fcbf0f6c791eca0a9820508466df": {
      "address": "0xfA844173e503dc9E8b830a54592B54465678a19b",
      "layout": {
        "solcVersion": "0.8.4",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "pause",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:27"
          },
          {
            "label": "rewardPerInvitation",
            "offset": 0,
            "slot": "152",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:29"
          },
          {
            "label": "rewardTokenAddress",
            "offset": 0,
            "slot": "153",
            "type": "t_contract(IERC20)1099",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:31"
          },
          {
            "label": "rewardWallet",
            "offset": 0,
            "slot": "154",
            "type": "t_address",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:33"
          },
          {
            "label": "userRewards",
            "offset": 0,
            "slot": "155",
            "type": "t_mapping(t_address,t_struct(UserReward)1441_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:35"
          },
          {
            "label": "userRewarded",
            "offset": 0,
            "slot": "156",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:37"
          },
          {
            "label": "whitelistOperator",
            "offset": 0,
            "slot": "157",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:39"
          },
          {
            "label": "bonusPercent",
            "offset": 0,
            "slot": "158",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:41"
          },
          {
            "label": "userRewards2",
            "offset": 0,
            "slot": "159",
            "type": "t_mapping(t_address,t_struct(UserReward)1441_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:43"
          },
          {
            "label": "referralAddress",
            "offset": 0,
            "slot": "160",
            "type": "t_mapping(t_address,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:45"
          },
          {
            "label": "claimed",
            "offset": 0,
            "slot": "161",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:46"
          },
          {
            "label": "addressConfigs",
            "offset": 0,
            "slot": "162",
            "type": "t_mapping(t_uint32,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:47"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20)1099": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserReward)1441_storage)": {
            "label": "mapping(address => struct ReferralBonus.UserReward)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)",
            "numberOfBytes": "32"
          },
          "t_struct(UserReward)1441_storage": {
            "label": "struct ReferralBonus.UserReward",
            "members": [
              {
                "label": "rewardAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "deptAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "ad6064d41e8efd3d179245efc32c999d8e5c895ec5d52d8ba7e5a86835705bf8": {
      "address": "0x0873cE64bB1417DfeffD2A1712F10930e4115E25",
      "txHash": "0x4260117d3aa444f21130d92d2f1bd255f98c9ce0579b9f1c347b301f59e7dadb",
      "layout": {
        "solcVersion": "0.8.4",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "pause",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:27"
          },
          {
            "label": "rewardPerInvitation",
            "offset": 0,
            "slot": "152",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:29"
          },
          {
            "label": "rewardTokenAddress",
            "offset": 0,
            "slot": "153",
            "type": "t_contract(IERC20)1099",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:31"
          },
          {
            "label": "rewardWallet",
            "offset": 0,
            "slot": "154",
            "type": "t_address",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:33"
          },
          {
            "label": "userRewards",
            "offset": 0,
            "slot": "155",
            "type": "t_mapping(t_address,t_struct(UserReward)1441_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:35"
          },
          {
            "label": "userRewarded",
            "offset": 0,
            "slot": "156",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:37"
          },
          {
            "label": "whitelistOperator",
            "offset": 0,
            "slot": "157",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:39"
          },
          {
            "label": "bonusPercent",
            "offset": 0,
            "slot": "158",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:41"
          },
          {
            "label": "userRewards2",
            "offset": 0,
            "slot": "159",
            "type": "t_mapping(t_address,t_struct(UserReward)1441_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:43"
          },
          {
            "label": "referralAddress",
            "offset": 0,
            "slot": "160",
            "type": "t_mapping(t_address,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:45"
          },
          {
            "label": "claimed",
            "offset": 0,
            "slot": "161",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:46"
          },
          {
            "label": "addressConfigs",
            "offset": 0,
            "slot": "162",
            "type": "t_mapping(t_uint32,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:47"
          },
          {
            "label": "limitAmount",
            "offset": 0,
            "slot": "163",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:50"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20)1099": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserReward)1441_storage)": {
            "label": "mapping(address => struct ReferralBonus.UserReward)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)",
            "numberOfBytes": "32"
          },
          "t_struct(UserReward)1441_storage": {
            "label": "struct ReferralBonus.UserReward",
            "members": [
              {
                "label": "rewardAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "deptAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "aab0375b753fbe1d355967e6b9f6759152e7d7bd2c98b0e4e0a6259b7941aade": {
      "address": "0xB86B9E021F5eA87Df704017723f029B095B5c65A",
      "txHash": "0x89e9583b619fdf48c3742b9f079fbd0a390471c58a5f4941d35a4bcec0b40cc4",
      "layout": {
        "solcVersion": "0.8.4",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "pause",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:27"
          },
          {
            "label": "rewardPerInvitation",
            "offset": 0,
            "slot": "152",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:29"
          },
          {
            "label": "rewardTokenAddress",
            "offset": 0,
            "slot": "153",
            "type": "t_contract(IERC20)6963",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:31"
          },
          {
            "label": "rewardWallet",
            "offset": 0,
            "slot": "154",
            "type": "t_address",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:33"
          },
          {
            "label": "userRewards",
            "offset": 0,
            "slot": "155",
            "type": "t_mapping(t_address,t_struct(UserReward)23133_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:35"
          },
          {
            "label": "userRewarded",
            "offset": 0,
            "slot": "156",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:37"
          },
          {
            "label": "whitelistOperator",
            "offset": 0,
            "slot": "157",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:39"
          },
          {
            "label": "bonusPercent",
            "offset": 0,
            "slot": "158",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:41"
          },
          {
            "label": "userRewards2",
            "offset": 0,
            "slot": "159",
            "type": "t_mapping(t_address,t_struct(UserReward)23133_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:43"
          },
          {
            "label": "referralAddress",
            "offset": 0,
            "slot": "160",
            "type": "t_mapping(t_address,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:45"
          },
          {
            "label": "claimed",
            "offset": 0,
            "slot": "161",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:46"
          },
          {
            "label": "addressConfigs",
            "offset": 0,
            "slot": "162",
            "type": "t_mapping(t_uint32,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:47"
          },
          {
            "label": "limitAmount",
            "offset": 0,
            "slot": "163",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:50"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20)6963": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserReward)23133_storage)": {
            "label": "mapping(address => struct ReferralBonus.UserReward)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)",
            "numberOfBytes": "32"
          },
          "t_struct(UserReward)23133_storage": {
            "label": "struct ReferralBonus.UserReward",
            "members": [
              {
                "label": "rewardAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "deptAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "8c39aba1e93130b4745f7a6ab83abbc95564b1bfc6d550c90fb197300ffbf6e6": {
      "address": "0xc52161A0Db59b6f00A50891875Ecac3327c97353",
      "txHash": "0xc19e88afd283eb6b7e20146efc9ca2aaacd28054441d4435d4263719f8aa3824",
      "layout": {
        "solcVersion": "0.8.4",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "pause",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:28"
          },
          {
            "label": "rewardPerInvitation",
            "offset": 0,
            "slot": "152",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:30"
          },
          {
            "label": "rewardTokenAddress",
            "offset": 0,
            "slot": "153",
            "type": "t_contract(IERC20)1099",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:32"
          },
          {
            "label": "rewardWallet",
            "offset": 0,
            "slot": "154",
            "type": "t_address",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:34"
          },
          {
            "label": "userRewards",
            "offset": 0,
            "slot": "155",
            "type": "t_mapping(t_address,t_struct(UserReward)1442_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:36"
          },
          {
            "label": "userRewarded",
            "offset": 0,
            "slot": "156",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:38"
          },
          {
            "label": "whitelistOperator",
            "offset": 0,
            "slot": "157",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:40"
          },
          {
            "label": "bonusPercent",
            "offset": 0,
            "slot": "158",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:42"
          },
          {
            "label": "userRewards2",
            "offset": 0,
            "slot": "159",
            "type": "t_mapping(t_address,t_struct(UserReward)1442_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:44"
          },
          {
            "label": "referralAddress",
            "offset": 0,
            "slot": "160",
            "type": "t_mapping(t_address,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:46"
          },
          {
            "label": "claimed",
            "offset": 0,
            "slot": "161",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:47"
          },
          {
            "label": "addressConfigs",
            "offset": 0,
            "slot": "162",
            "type": "t_mapping(t_uint32,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:48"
          },
          {
            "label": "limitAmount",
            "offset": 0,
            "slot": "163",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:51"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20)1099": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserReward)1442_storage)": {
            "label": "mapping(address => struct ReferralBonus.UserReward)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)",
            "numberOfBytes": "32"
          },
          "t_struct(UserReward)1442_storage": {
            "label": "struct ReferralBonus.UserReward",
            "members": [
              {
                "label": "rewardAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "deptAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "923c60217fd0be0ba86bae70e0281c600e0e476260b39fd5ff9ef3d530401dad": {
      "address": "0x91713697BCc0Df36a65F3AbC36f0EF33FCF1C0f3",
      "txHash": "0xbb1de6af7efc7d48b8c1b6927949ba61a1e2ea29785958d599efa1b405188661",
      "layout": {
        "solcVersion": "0.8.4",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "pause",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:28"
          },
          {
            "label": "rewardPerInvitation",
            "offset": 0,
            "slot": "152",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:30"
          },
          {
            "label": "rewardTokenAddress",
            "offset": 0,
            "slot": "153",
            "type": "t_contract(IERC20)1099",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:32"
          },
          {
            "label": "rewardWallet",
            "offset": 0,
            "slot": "154",
            "type": "t_address",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:34"
          },
          {
            "label": "userRewards",
            "offset": 0,
            "slot": "155",
            "type": "t_mapping(t_address,t_struct(UserReward)1442_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:36"
          },
          {
            "label": "userRewarded",
            "offset": 0,
            "slot": "156",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:38"
          },
          {
            "label": "whitelistOperator",
            "offset": 0,
            "slot": "157",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:40"
          },
          {
            "label": "bonusPercent",
            "offset": 0,
            "slot": "158",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:42"
          },
          {
            "label": "userRewards2",
            "offset": 0,
            "slot": "159",
            "type": "t_mapping(t_address,t_struct(UserReward)1442_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:44"
          },
          {
            "label": "referralAddress",
            "offset": 0,
            "slot": "160",
            "type": "t_mapping(t_address,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:46"
          },
          {
            "label": "claimed",
            "offset": 0,
            "slot": "161",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:47"
          },
          {
            "label": "addressConfigs",
            "offset": 0,
            "slot": "162",
            "type": "t_mapping(t_uint32,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:48"
          },
          {
            "label": "limitAmount",
            "offset": 0,
            "slot": "163",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:51"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20)1099": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserReward)1442_storage)": {
            "label": "mapping(address => struct ReferralBonus.UserReward)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)",
            "numberOfBytes": "32"
          },
          "t_struct(UserReward)1442_storage": {
            "label": "struct ReferralBonus.UserReward",
            "members": [
              {
                "label": "rewardAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "deptAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "6bf19b36cd7c8731e4c215ab5ba998665a1362779ab2f477da0496353c5777e6": {
      "address": "0xf3CD31757De9D309f3408E910616C687F55fdEB4",
      "txHash": "0x3f36daebb72bfd2b66d8e0ad4485551c58e24ee4af3588cc9fd460e70d49eed5",
      "layout": {
        "solcVersion": "0.8.4",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "pause",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:27"
          },
          {
            "label": "rewardPerInvitation",
            "offset": 0,
            "slot": "152",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:29"
          },
          {
            "label": "rewardTokenAddress",
            "offset": 0,
            "slot": "153",
            "type": "t_contract(IERC20)1099",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:31"
          },
          {
            "label": "rewardWallet",
            "offset": 0,
            "slot": "154",
            "type": "t_address",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:33"
          },
          {
            "label": "userRewards",
            "offset": 0,
            "slot": "155",
            "type": "t_mapping(t_address,t_struct(UserReward)1458_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:35"
          },
          {
            "label": "userRewarded",
            "offset": 0,
            "slot": "156",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:37"
          },
          {
            "label": "whitelistOperator",
            "offset": 0,
            "slot": "157",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:39"
          },
          {
            "label": "bonusPercent",
            "offset": 0,
            "slot": "158",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:41"
          },
          {
            "label": "userRewards2",
            "offset": 0,
            "slot": "159",
            "type": "t_mapping(t_address,t_struct(UserReward)1458_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:43"
          },
          {
            "label": "referralAddress",
            "offset": 0,
            "slot": "160",
            "type": "t_mapping(t_address,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:45"
          },
          {
            "label": "claimed",
            "offset": 0,
            "slot": "161",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:46"
          },
          {
            "label": "addressConfigs",
            "offset": 0,
            "slot": "162",
            "type": "t_mapping(t_uint32,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:47"
          },
          {
            "label": "limitAmount",
            "offset": 0,
            "slot": "163",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:50"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20)1099": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserReward)1458_storage)": {
            "label": "mapping(address => struct ReferralBonus.UserReward)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)",
            "numberOfBytes": "32"
          },
          "t_struct(UserReward)1458_storage": {
            "label": "struct ReferralBonus.UserReward",
            "members": [
              {
                "label": "rewardAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "deptAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "e67f0055a65e1fcd2f13479dc5a121f516d87920112e35b388b183a398eb3564": {
      "address": "0xA4Bd453C2cf6CA941068e83840a7fe7f1C442ee0",
      "layout": {
        "solcVersion": "0.8.4",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "pause",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:35"
          },
          {
            "label": "whitelistOperator",
            "offset": 0,
            "slot": "152",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:37"
          },
          {
            "label": "addressConfigs",
            "offset": 0,
            "slot": "153",
            "type": "t_mapping(t_uint32,t_address)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:38"
          },
          {
            "label": "mstTokenAddress",
            "offset": 0,
            "slot": "154",
            "type": "t_address",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:39"
          },
          {
            "label": "bscsTokenAddress",
            "offset": 0,
            "slot": "155",
            "type": "t_address",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:41"
          },
          {
            "label": "walletTransCounter",
            "offset": 0,
            "slot": "156",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:43"
          },
          {
            "label": "depositCounter",
            "offset": 0,
            "slot": "157",
            "type": "t_uint256",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:44"
          },
          {
            "label": "depositTransactions",
            "offset": 0,
            "slot": "158",
            "type": "t_mapping(t_uint256,t_struct(Transaction)1459_storage)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:46"
          },
          {
            "label": "withdrawTransactions",
            "offset": 0,
            "slot": "159",
            "type": "t_mapping(t_uint256,t_struct(Transaction)1459_storage)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:48"
          },
          {
            "label": "userProfiles",
            "offset": 0,
            "slot": "160",
            "type": "t_mapping(t_address,t_struct(UserProfile)1474_storage)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:50"
          },
          {
            "label": "balanceMint",
            "offset": 0,
            "slot": "161",
            "type": "t_uint256",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:52"
          },
          {
            "label": "balanceGameReward",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:53"
          },
          {
            "label": "feeWallet",
            "offset": 0,
            "slot": "163",
            "type": "t_address",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:54"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserProfile)1474_storage)": {
            "label": "mapping(address => struct MStationWallet.UserProfile)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Transaction)1459_storage)": {
            "label": "mapping(uint256 => struct MStationWallet.Transaction)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)",
            "numberOfBytes": "32"
          },
          "t_struct(Transaction)1459_storage": {
            "label": "struct MStationWallet.Transaction",
            "members": [
              {
                "label": "isDeposit",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "tId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "owner",
                "type": "t_address",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(UserProfile)1474_storage": {
            "label": "struct MStationWallet.UserProfile",
            "members": [
              {
                "label": "status",
                "type": "t_uint16",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "credit",
                "type": "t_uint16",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "class",
                "type": "t_uint16",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "totalDeposit",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "totalWithdraw",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "balance",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "lockedAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      },
      "allAddresses": [
        "0xA4Bd453C2cf6CA941068e83840a7fe7f1C442ee0",
        "0x7cFf450829900e2E87E66ed9c5629C2765dF40e8"
      ]
    },
    "ddb865f03944be48d9c1425c8e49766d3a8214170ddaed7b7804c52ee458c007": {
      "address": "0x8edbBAcDA050857C8bF53438a9cB064AE156D362",
      "txHash": "0x5a304fa524aaab46d5a9871e5aaf9baaa34ed325fcaf149fa5cde7ddc93e656c",
      "layout": {
        "solcVersion": "0.8.4",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "pause",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:35"
          },
          {
            "label": "whitelistOperator",
            "offset": 0,
            "slot": "152",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:37"
          },
          {
            "label": "addressConfigs",
            "offset": 0,
            "slot": "153",
            "type": "t_mapping(t_uint32,t_address)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:38"
          },
          {
            "label": "mstTokenAddress",
            "offset": 0,
            "slot": "154",
            "type": "t_address",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:39"
          },
          {
            "label": "bscsTokenAddress",
            "offset": 0,
            "slot": "155",
            "type": "t_address",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:41"
          },
          {
            "label": "walletTransCounter",
            "offset": 0,
            "slot": "156",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:43"
          },
          {
            "label": "depositCounter",
            "offset": 0,
            "slot": "157",
            "type": "t_uint256",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:44"
          },
          {
            "label": "depositTransactions",
            "offset": 0,
            "slot": "158",
            "type": "t_mapping(t_uint256,t_struct(Transaction)1459_storage)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:46"
          },
          {
            "label": "withdrawTransactions",
            "offset": 0,
            "slot": "159",
            "type": "t_mapping(t_uint256,t_struct(Transaction)1459_storage)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:48"
          },
          {
            "label": "userProfiles",
            "offset": 0,
            "slot": "160",
            "type": "t_mapping(t_address,t_struct(UserProfile)1474_storage)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:50"
          },
          {
            "label": "balanceMint",
            "offset": 0,
            "slot": "161",
            "type": "t_uint256",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:52"
          },
          {
            "label": "balanceGameReward",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:53"
          },
          {
            "label": "feeWallet",
            "offset": 0,
            "slot": "163",
            "type": "t_address",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:54"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserProfile)1474_storage)": {
            "label": "mapping(address => struct MStationWallet.UserProfile)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Transaction)1459_storage)": {
            "label": "mapping(uint256 => struct MStationWallet.Transaction)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)",
            "numberOfBytes": "32"
          },
          "t_struct(Transaction)1459_storage": {
            "label": "struct MStationWallet.Transaction",
            "members": [
              {
                "label": "isDeposit",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "tId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "owner",
                "type": "t_address",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(UserProfile)1474_storage": {
            "label": "struct MStationWallet.UserProfile",
            "members": [
              {
                "label": "status",
                "type": "t_uint16",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "credit",
                "type": "t_uint16",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "class",
                "type": "t_uint16",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "totalDeposit",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "totalWithdraw",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "balance",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "lockedAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "e34d5e805ab2eca99e2a3d26193e884ae39e86a9b6ccd5e1fbf35b8e47f9de45": {
      "address": "0x882638F9Bb3E9F8DAf1765AeAA932e1Ec0944671",
      "txHash": "0xd58a4bd387a1dc5dac1a1b3939af1e3dac69c9c94a5f3067acefac2b1a06118c",
      "layout": {
        "solcVersion": "0.8.4",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "pause",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:35"
          },
          {
            "label": "whitelistOperator",
            "offset": 0,
            "slot": "152",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:37"
          },
          {
            "label": "addressConfigs",
            "offset": 0,
            "slot": "153",
            "type": "t_mapping(t_uint32,t_address)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:38"
          },
          {
            "label": "mstTokenAddress",
            "offset": 0,
            "slot": "154",
            "type": "t_address",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:39"
          },
          {
            "label": "bscsTokenAddress",
            "offset": 0,
            "slot": "155",
            "type": "t_address",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:41"
          },
          {
            "label": "walletTransCounter",
            "offset": 0,
            "slot": "156",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:43"
          },
          {
            "label": "depositCounter",
            "offset": 0,
            "slot": "157",
            "type": "t_uint256",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:44"
          },
          {
            "label": "depositTransactions",
            "offset": 0,
            "slot": "158",
            "type": "t_mapping(t_uint256,t_struct(Transaction)1459_storage)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:46"
          },
          {
            "label": "withdrawTransactions",
            "offset": 0,
            "slot": "159",
            "type": "t_mapping(t_uint256,t_struct(Transaction)1459_storage)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:48"
          },
          {
            "label": "userProfiles",
            "offset": 0,
            "slot": "160",
            "type": "t_mapping(t_address,t_struct(UserProfile)1474_storage)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:50"
          },
          {
            "label": "balanceMint",
            "offset": 0,
            "slot": "161",
            "type": "t_uint256",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:52"
          },
          {
            "label": "balanceGameReward",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:53"
          },
          {
            "label": "feeWallet",
            "offset": 0,
            "slot": "163",
            "type": "t_address",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:54"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserProfile)1474_storage)": {
            "label": "mapping(address => struct MStationWallet.UserProfile)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Transaction)1459_storage)": {
            "label": "mapping(uint256 => struct MStationWallet.Transaction)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)",
            "numberOfBytes": "32"
          },
          "t_struct(Transaction)1459_storage": {
            "label": "struct MStationWallet.Transaction",
            "members": [
              {
                "label": "isDeposit",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "tId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "owner",
                "type": "t_address",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(UserProfile)1474_storage": {
            "label": "struct MStationWallet.UserProfile",
            "members": [
              {
                "label": "status",
                "type": "t_uint16",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "credit",
                "type": "t_uint16",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "class",
                "type": "t_uint16",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "totalDeposit",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "totalWithdraw",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "balance",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "lockedAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    }
  }
}
