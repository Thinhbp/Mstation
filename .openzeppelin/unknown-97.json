{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x555d912E80E52E5877Bdb113faE464fBF4cC5e65",
    "txHash": "0x394536edea34ae017ae39dfbbf60da467671574c707424f5879c9850b0310283"
  },
  "proxies": [
    {
      "address": "0xc71dBfC197789E1752e3dc2f4195EA9A8BD6C022",
      "txHash": "0x773bca7bcacf56e5e030682933409d1d4cfdf02e82a1495ee778266e92bb5229",
      "kind": "transparent"
    },
    {
      "address": "0x5411c1d6e94951b23B8720a52436B3A3ddbab2f5",
      "txHash": "0xfa018c8dc7b4e0e225d5450cf63967f1ccc7944d591c955b87b0453cb9637eca",
      "kind": "transparent"
    },
    {
      "address": "0x9bb213d820fB857485b0076E3A42848864cb3f44",
      "txHash": "0xaf7cb02f0d2eaf620e2c0440425073668643e7c05ee18b1ef1b12a402933ad44",
      "kind": "transparent"
    },
    {
      "address": "0x7E9AeCA2b119411a5a7cD806e331F1F51De45EFa",
      "txHash": "0x0a9e2fdc44a4dd2bdd6dbbc13213c87d210a38f552cc5103405547758b72ea9e",
      "kind": "transparent"
    },
    {
      "address": "0x790a2bDeb7bFf535C9576b113adE8dF5c929742a",
      "txHash": "0x8dfa266057d026c42074a0f816a74a81738e5235927d31717a4118047029872a",
      "kind": "transparent"
    },
    {
      "address": "0xE0C20E669AB933f23c800eaD66E6864de8dE45f6",
      "txHash": "0x094ece960e55775f8af2a6fa3065e36b2894edefbc2432d99b220258aed69606",
      "kind": "transparent"
    },
    {
      "address": "0x4BE760518db5B10DED412e869ECBd9f252F92EC5",
      "txHash": "0x82952d2c567e8d857035ecdebf8c935321305c535f2a37db53356a6d62777ac4",
      "kind": "transparent"
    },
    {
      "address": "0x118f80A205e2Ac4925c6fa022EC900a30bb2D7Cc",
      "txHash": "0xad281e6666ee916ea6f734e0e32774b30ff93b6ad3c870b8897265ff5fee4bd7",
      "kind": "transparent"
    },
    {
      "address": "0xB514dFDeD1412b1C1D925A1bF662a4dD12f91bF8",
      "txHash": "0x36fc180bb476fb48d97e43bae6b207a847a3a4115faa6d913012cca792ce312c",
      "kind": "transparent"
    },
    {
      "address": "0x5cb58763dc5ca7371AA1A5e44e6EE8EC88de2cEa",
      "txHash": "0x19e885f6a650c935eba6ae6e5f64882430ce179ccad0e9847e61844f2ec12d7f",
      "kind": "transparent"
    },
    {
      "address": "0x1DffE0f4602eec02339a3aFD9678dbe01AB28AA3",
      "txHash": "0xe0ab6712bacdae8ad9025da1bdeed8fce920346041c695f245e7d2296c3873de",
      "kind": "transparent"
    },
    {
      "address": "0x3EAcBb755Ac033fDCF175F85F8841b8daa0E5773",
      "txHash": "0x12235fe30efcc9dc12e37796b141685864af05a37a7b15f1bff6f435ac161b88",
      "kind": "transparent"
    },
    {
      "address": "0x25d4e5b5BA64dD526639342223354c66E9dE6784",
      "txHash": "0x0307d43fbd31f061c2dc84a7cd2fc4d414f113d32b6e0b9757c91b2dbdd09c04",
      "kind": "transparent"
    },
    {
      "address": "0x9D28aC1D3623Dfa68BEE84692aB7D45B2Bd5D467",
      "txHash": "0xf3a86c1a31506e5c55a03c923eb4a97b3b95a1032de3d372b4c3dda8e3ef13d9",
      "kind": "transparent"
    },
    {
      "address": "0xd56Ab79BeE91691076d8dABD11Dcf10b5C155cfc",
      "txHash": "0x57b12de38829bd14785e464c9d9467c37b95c4e24129e283c1a4aec819b32956",
      "kind": "transparent"
    },
    {
      "address": "0x592368764c3f22f7AD49793DE8638Ecc6CDbfDD2",
      "txHash": "0x38da2eff85fcc79f246b0cc1cf60c8f08949d8ccec1435e2b6534eba56bc09a5",
      "kind": "transparent"
    },
    {
      "address": "0x726Fe1E4Ec05ff3f4FB21E560ce59c073C91c1af",
      "txHash": "0xd2df225fd3177c60fa8d70cf01036decad435b6f2f11b360a28aba8ca0447f81",
      "kind": "transparent"
    },
    {
      "address": "0x2A884959FA6cb268Dc811D960a1928Ab01Eb8221",
      "txHash": "0xa7fbe8dbad156bc13bb9f257a5081d5b9e7383c10317d7db191c561253fe4d89",
      "kind": "transparent"
    },
    {
      "address": "0xAa11838ffFeeBc7b1F00c77cBa80904a8F1a25Be",
      "txHash": "0x85e4703d8767040b0d85438016a5d097af041d93a5ff0fb529f0604c78928268",
      "kind": "transparent"
    },
    {
      "address": "0x8de27536bf60965De67AAb150126c44FAFfE1A7A",
      "txHash": "0x337603913420e9f69ce4edb5fa0a0b737d8cf86158b8a4a4eda7057749311811",
      "kind": "transparent"
    },
    {
      "address": "0x52286dD979f7c8B10869F0e8Cfa23df5da33cDed",
      "txHash": "0xf092dde52fc8e1c35e930d5365cd044de1e655f86f48a7647319b2162f939d38",
      "kind": "transparent"
    },
    {
      "address": "0x6ce23291dd199667D6Ab2fED1F49B8311DbD5289",
      "txHash": "0xb986f61584657df50c47b4d319d5a5d217212834793f3992239fc4a55616fe0b",
      "kind": "transparent"
    },
    {
      "address": "0x305668deF57CEfAebb9cC80eCFF5acbaBFc60BF7",
      "txHash": "0xf2649c69ddd9de6082c00a435d04ffa81f894c690734a727a116435520073c2e",
      "kind": "transparent"
    },
    {
      "address": "0xecBa4eF81c20D874703d4A591Cd87EeDfEe21dda",
      "txHash": "0x2027e8b66d26517fb48723269ee40e0003e349d2226ab9023abdc0a0f7aed991",
      "kind": "transparent"
    },
    {
      "address": "0x5Fb302755090f8419B993a5Cc60D6952Be9376c5",
      "txHash": "0x5e2a00ad8728b9ed798e5faa04054dab0bdea74584b62d7feeb97c05c03d894d",
      "kind": "transparent"
    },
    {
      "address": "0xD596d7D1E28B6616529F561083590A1a18bAF851",
      "txHash": "0x1a990657fb26ff75512317056ffa00e973f60ca3b99386f909c85c4ffe633bdc",
      "kind": "transparent"
    },
    {
      "address": "0x6CC1c5F7499fCfC7eaA848d0dB3e0F3E1C059A58",
      "txHash": "0x2c3b981f5cd03ae205185edbfbe7f563099b2660a8cb16acbe22a7fead51c5a8",
      "kind": "transparent"
    },
    {
      "address": "0xf6DcB4ABd3B197bA0374B7eD087326D5A171f06e",
      "txHash": "0x825ad09301b2a7b75ae84a6315dede40b1fbe390efc4fc671332202d0792a0ac",
      "kind": "transparent"
    },
    {
      "address": "0x7D51B5c14CFEAF58e30e9179Dde61c619651672F",
      "txHash": "0x88e70583e4531696824d5b8c5c14961c29690ed73a72fc551c257383d3337109",
      "kind": "transparent"
    },
    {
      "address": "0x1cEFc3FFACA6d5dd2DA694ebD967C407c0B996a3",
      "txHash": "0x7f502703641ed10e147c389a2abea7fef1609d31808b97b8d90cb5a5cae5a540",
      "kind": "transparent"
    },
    {
      "address": "0x340Ca5dae9aEf42a8F56217C5a07aa12dF30c693",
      "txHash": "0xd0fb87122a0f492cf6d4cce9fc58f52a5746f65f66d4f014ea66b6f5868a09dd",
      "kind": "transparent"
    },
    {
      "address": "0x6f0d8d6ec12D34fb32fD84E41BF38Bff2093a39A",
      "txHash": "0xd367cc85b066711771514ca83ac519b2f3f56d781942525e0c7f16d744d2cae1",
      "kind": "transparent"
    },
    {
      "address": "0x220Fc03aE934FfCE9d967e87de5D34955F6a82E5",
      "txHash": "0x5a63413360b3a643dd7a10c8a2f3186d96ddda2d7597e134cd3ffda6c6992ada",
      "kind": "transparent"
    },
    {
      "address": "0x8762b91D1D8B70988ceED796588B831F5453B675",
      "txHash": "0x56fa0898e39b5516d56995a859893165afca0477cfc1a8230981e4161b248777",
      "kind": "transparent"
    },
    {
      "address": "0xEA121aC088231FDa02ef7B89F98c967E43c41f77",
      "txHash": "0x7d7f520d727dd7009257a78d037ebd440713bf58c48cf4cfdbe57e98ad6b3e8a",
      "kind": "transparent"
    },
    {
      "address": "0x79Ef2181e29eD641cdBbe856eFcF198c72DAF93D",
      "txHash": "0xab238f238b74009caf921e6328468a1bde191656c14e29efb73a1f5215d8f995",
      "kind": "transparent"
    },
    {
      "address": "0x26B6Fa3084E090DCB5B230242eCF816dBB5511Fa",
      "txHash": "0x8407427da9ae556c42bfaa7e47143def89fa774609b628a6cc13e67d630b273e",
      "kind": "transparent"
    },
    {
      "address": "0x2FE7aefFF6E66f0F8bfDb15514ea94CfE968dcec",
      "txHash": "0xd90939d9d51e34bf0849684cadb96b820b6e9a6cceea5594eed2b42754f01c7b",
      "kind": "transparent"
    },
    {
      "address": "0x93B78f9f184413af78793aBc5DCcAD19c3711519",
      "txHash": "0x3dfe91f4debf4447f2093b7153e966afc44fb0be35c14563da4a5c2eb808ad0a",
      "kind": "transparent"
    },
    {
      "address": "0xb0A3889032785c1c88Fe77A99097D7D7e888c951",
      "txHash": "0xcf95be11d557f18008cb206abecdb9d65dffb981fcf75ddd3931016d572454f0",
      "kind": "transparent"
    },
    {
      "address": "0xe227A8C9C7aEF57040B7dc1148307FF12fE55D7C",
      "txHash": "0x0183ab3064d2aed2541d997d3fafbe19c6ba342660139c4902945b93bcd7b18c",
      "kind": "transparent"
    },
    {
      "address": "0xcB7f6d8FBe800944CA86DA835583a8ee9F170f1a",
      "txHash": "0x15f26ee6b9b7bf80cd09e9e7efafc51f086a2195f19cc4774efa98a1f7e585ad",
      "kind": "transparent"
    },
    {
      "address": "0x9a892D215919C0df053683f09b1C60C1237155dC",
      "txHash": "0x750dbd13b8dcc9dacd0022cd3ff03fe593450ed44aaefbd10d337f7088d16542",
      "kind": "transparent"
    },
    {
      "address": "0x7D2642F56A11c373e0aB06638E2fD654e67B7f47",
      "txHash": "0xa9d7a73d275b679fc3c617e009bc19d0eb130ed56ae7b657ccea02c314ffe6e1",
      "kind": "transparent"
    },
    {
      "address": "0x41f959dD5c141DE219940Cc4330D6025c081d9C9",
      "txHash": "0xeb4a397c28e5053182b2136fa1ea0f554de6b996bfca444678f578c95b5e4e91",
      "kind": "transparent"
    },
    {
      "address": "0x29e26a1e54EAA03d7C3Ce141b18b6202C37eDD75",
      "txHash": "0x2d12f9bee373c59645cbb7d28055cdeecab4730ab1b0d3ffc19870dc3ae36463",
      "kind": "transparent"
    },
    {
      "address": "0xE0aAC680EA45Aeb016CbDac139aF19F00551361A",
      "txHash": "0x73338a861187fa057f097c50864993d44c272a93fbfbeb8df3d07727d172f6ae",
      "kind": "transparent"
    },
    {
      "address": "0x01384049A38F94B8c4B6eFE32f3fAD1f3F8BEaeB",
      "txHash": "0x21a525667295eff2398e7642a05a02e9dde91c4d01905c08ed16c04adadf0aee",
      "kind": "transparent"
    },
    {
      "address": "0x8A95513019B5C6c2f41962DC718e185a744871e4",
      "txHash": "0xf806d6c6652707f921a5bb5bc7b4c89edda7e69a109cc9684056f26bcbd55be8",
      "kind": "transparent"
    },
    {
      "address": "0xb31b3dCff13D6ccab9E1544C421cDaAfE59C571E",
      "txHash": "0xeb719c634df8bc36f618809c7e561af1b33ced8d12fcf77f40ce084f9f54f5d2",
      "kind": "transparent"
    },
    {
      "address": "0xE067fadc285b952cB3B1f56B72663C5500850d78",
      "txHash": "0xe578de255be15a7b595b8b4cfdbeb39f53ef608cf9be8b67a1881fcf7c7ab83c",
      "kind": "transparent"
    },
    {
      "address": "0x54abfa09e61f7eBaCAD204DEF8647c0d29002e12",
      "txHash": "0xd5abfd6a833c3570c2c0706a5f6348b5aee254ed1dbf6b88ec12627c3b6a089a",
      "kind": "transparent"
    },
    {
      "address": "0xb63bA924BDEF8D6b4A60Bc272ee3af3Dc5D08511",
      "txHash": "0x81fc9cb87c8c31a5ce7ad8670f6a26138c8b451ba9e64653028c53a19cc3bdae",
      "kind": "transparent"
    },
    {
      "address": "0x4a05253b1Ec7f6e9e25bDCECa025C245D5aA9785",
      "txHash": "0xd00d08a134d9822e6606a676aa5b1dcf6488dbc14230ee524413378c771254ce",
      "kind": "transparent"
    },
    {
      "address": "0xC9ff0946b765d89deA4035a16aBDD8C9e9Cec044",
      "txHash": "0x321617e2cec2b3077ec6974c8c732a1ef1de8621b8feb89313097655e49196fc",
      "kind": "transparent"
    },
    {
      "address": "0xfF515773Fbd4D95819807e424e305Dea6193902b",
      "txHash": "0xa967795a52c443b05d8122ca9e40233f50d231828d4ee93c5968e80d97e9f747",
      "kind": "transparent"
    },
    {
      "address": "0x5890cc8784D0b0acC9f0CBB8CA295BBe960e8dcD",
      "txHash": "0x78ecf36f9861cf957962f3c34df6c03c3b1ddb851bf856177985979b73a9ad98",
      "kind": "transparent"
    },
    {
      "address": "0xAB203100df8A6b40bd982D92A343881bcF6240Bf",
      "txHash": "0xde654cf0d01c512d1e181b130a198d9414fdcfd254e38fdbdd903899f6ca0525",
      "kind": "transparent"
    },
    {
      "address": "0xc4679e7e5B6ceB5D92Da900EbEbe684799771b32",
      "txHash": "0xb59b7e76890cab642651016dbd7cd9313c0f1b8ef0266961c8ced755c55346c8",
      "kind": "transparent"
    },
    {
      "address": "0xd384276648bE43BAC7749E56b75ff01A7fdd2A50",
      "txHash": "0x898258605c8cc4b0bbe17654b0260a2ec7592c7dae3b0ccd73e201f21ffecf46",
      "kind": "transparent"
    },
    {
      "address": "0xD2f2CfeC4f86123c112E3bA12eae2Ba5C245F5ae",
      "txHash": "0x2caee509b519ce2e2f73fc03d20d7da8ad7bdeddd5f0a6bfdfd0a8d1e17e4a41",
      "kind": "transparent"
    },
    {
      "address": "0x81A2be14F7d931dDA338499B379fB8E8B3202A01",
      "txHash": "0x59976eebea83344c2254458112fe86eb7d212a21022c5515d866b7a26d267b49",
      "kind": "transparent"
    },
    {
      "address": "0x9fd881FFbda793511c7d6C87E79ccd320C733163",
      "txHash": "0x1662e2fa9c07c7665fb4f76008a1f3d28d6e932004428f299423a58d5c35ecdd",
      "kind": "transparent"
    },
    {
      "address": "0x2Af8c43162073Fde2F1995c78Ab338CdEdB1C5c1",
      "txHash": "0xfc8fd9ece0e0f3f7371d69f9e34cefec5eb233f2197073baf13f316fb5f3b86c",
      "kind": "transparent"
    },
    {
      "address": "0x65162FB227e3DE0928C12d23B620bB6f92280145",
      "txHash": "0xe9ca0c2a4d864bd78aaad50ab18975edaab9d51cdc31590f586478addd924506",
      "kind": "transparent"
    },
    {
      "address": "0x134507f1B274c899a4b54C5B017901360bD92914",
      "txHash": "0x5903c43ec019ee207b789b1b17a52f2af48ce08e1be853bf2b4023b76cd789c6",
      "kind": "transparent"
    },
    {
      "address": "0x4cb830D8e54262B85eC1662a1f760fe735F4a44F",
      "txHash": "0xdc722030977792544c91019ea7d1df5204b06d264ab72738316aa7177a221b06",
      "kind": "transparent"
    },
    {
      "address": "0x26fB52112dB0D84791E2fe6bF18f3076bE8B49dC",
      "txHash": "0x644f8d6fcdb655224cef12e8efac143294558d7e198b77a6cd44fc63ef8a912e",
      "kind": "transparent"
    },
    {
      "address": "0xD3155AABA111FCA34cf804766bd419031C1B7B7C",
      "txHash": "0x5dac3013807ac51ad7e5ec634a823680bedec3639127189bd8ea70d8e262d38e",
      "kind": "transparent"
    },
    {
      "address": "0x530567B0C7FfC7ED2e33a4c31A9c06A829cD8020",
      "txHash": "0xada99263c6f7eca334600a7a18121b8a9b25f5a7d8667301634a63f59d802f8a",
      "kind": "transparent"
    },
    {
      "address": "0x0c0304716407449BF1b552E408a38F6f6BB21AfE",
      "txHash": "0xcacf17b5dd1342994494d6f635d2205fc32739868c5bff6004c664d7f3e473d9",
      "kind": "transparent"
    },
    {
      "address": "0x3363457A86F4E17CB0173B4Be67896315e478C89",
      "txHash": "0xcf32eafd5108d5f23bbe2dd0362367e40a6216ae0ee7c4b2f46f6c3efd6505f6",
      "kind": "transparent"
    },
    {
      "address": "0x5900F18AfAF634163a28c19f700B45F0794220C9",
      "txHash": "0x29953c9219d44c2ea7f4faf3719f4ca75e0f789ffefa0eaf813d83d0c5e82393",
      "kind": "transparent"
    },
    {
      "address": "0xc19Ff150A351C0F199DC760DC89f5cE187C9A1a3",
      "txHash": "0x0061969e0da88e1b57ac169ed576d7246bf3c33e071ac8b313512dba5bb1a44f",
      "kind": "transparent"
    },
    {
      "address": "0x5B7f26AB22cC677B31666e1D5adc49B14781898B",
      "txHash": "0x6e8e9c13fcaa27737ab765ffcbb547b206a7c573c7b2fa05f5f7a0dd588c5d55",
      "kind": "transparent"
    },
    {
      "address": "0x91909B551daD81f9ADdAa0D2CfA152ef9E0423F6",
      "txHash": "0xabad201da0bc59f16c847d07cc10f87d81cd56a6dc4af4fd0bf955005714038f",
      "kind": "transparent"
    },
    {
      "address": "0xFf18f6998E129Bbc21d77A63350c62608AEea579",
      "txHash": "0xe53461b7ff7a36a1e862f2271b24ead85d20627ca5f057aa7e442a3cfa3a7f30",
      "kind": "transparent"
    },
    {
      "address": "0x2Db2F240Bf2f96C18522C364a99f5c740d2A96C8",
      "txHash": "0x2de3ff6540823eec0cdc7ea2fb6d67c0f22507627b62cb96a46945982775671a",
      "kind": "transparent"
    },
    {
      "address": "0x2377fb4B980EAC76B33920Bc029Be259b15257D7",
      "txHash": "0xbdc9d714f87c50d27188d09a7a98ebe4aacb728d4e4497a7bdea5effbf370b3a",
      "kind": "transparent"
    },
    {
      "address": "0x459a881960584c59045a965428093412866C6bdF",
      "txHash": "0xa0bff0704da33ba1cc9d5e65c76780d608405a31b69c0d9ecbbfccb32a0da30e",
      "kind": "transparent"
    },
    {
      "address": "0xAE49E073e7AF71DCc529D2e45774E2D1534C91AC",
      "txHash": "0x5c295ee4ee7cc441e063a9f7cbf7413689f055838698b3695795140b7f9f6b95",
      "kind": "transparent"
    },
    {
      "address": "0xE24EE0Ad56Fe785481E089671f2c844fb822c306",
      "txHash": "0xcd4616e1e9be1455259bbc6ca789abb69390b44028ba7f33152744391c8e1d6f",
      "kind": "transparent"
    },
    {
      "address": "0xeE8C9E14DEF8F793337b94758fe6302d3411118d",
      "txHash": "0xdc9311c43b488cfa550ec2532c6c878b196517a3f6f8e0f79c67251c3a6ea4a0",
      "kind": "transparent"
    },
    {
      "address": "0x94d86235921A5e6581b27cb2ae1cCdfcF73Ec164",
      "txHash": "0xb61eac503a72b55fed6b3eef10aa3a1d61f93104c2191683d35a23e0edbca44a",
      "kind": "transparent"
    },
    {
      "address": "0x71B2a5096604359c69Fe1D91C118297Fe471E978",
      "txHash": "0x65228bf1ccfe1efe8f1db39586375fde910e1222026463e10507792d4845479a",
      "kind": "transparent"
    },
    {
      "address": "0xC86A9C449cb87E19675629681b8DC69d011bDc42",
      "txHash": "0xdb981fd6ef7109667f2d8effa38f93e30bdf1ce7e13828326497ae6e8b12fb22",
      "kind": "transparent"
    },
    {
      "address": "0x94DBE090aC95d629d0c8E9272662fF2635f79206",
      "txHash": "0x93db568224bcae55df4c8782ec5922411a67668ac5904ce2f6561f6433990f92",
      "kind": "transparent"
    }
  ],
  "impls": {
    "2407edbbf9db03644e000cf83c9461601fdd05731cac94e3d695f118ca74ff21": {
      "address": "0xbec33BBdFD18991dD83d94506091c81B93dc4428",
      "txHash": "0xc3aa73aab230be0af194b53f5d6818d5a823c15a20f110ce8765d7ca24993739",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:13"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:14"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:15"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:16"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)744",
            "src": "contracts/mstationNFT/MstationNFT.sol:17"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)744",
            "src": "contracts/mstationNFT/MstationNFT.sol:18"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)744",
            "src": "contracts/mstationNFT/MstationNFT.sol:19"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:20"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:21"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:22"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:23"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:24"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:25"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:26"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)1342_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:33"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)744": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)1342_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)1342_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "117659bb3142b272cf38922f5b8356df4224df282a7415260ee1d64e4181387a": {
      "address": "0x9bCA4B74B0956Cc43426db7016EE32E8f0509F9a",
      "txHash": "0x1a3ed7c4ce1d45b99178e7b043c2716c1d5120a58136d1d4b4f8e6518365ef51",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:17"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:47"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:49"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)9031_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)9046_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:59"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:61"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)9091_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:69"
          },
          {
            "contract": "Stonemason",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/Stonemason.sol:14"
          },
          {
            "contract": "Stonemason",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/Stonemason.sol:15"
          },
          {
            "contract": "Stonemason",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/Stonemason.sol:16"
          },
          {
            "contract": "Stonemason",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/Stonemason.sol:17"
          },
          {
            "contract": "Stonemason",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/Stonemason.sol:23"
          },
          {
            "contract": "Stonemason",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/Stonemason.sol:24"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)9031_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)9031_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)9046_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)9046_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)9091_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)9091_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "2f406d27c30de7d4f54d76f766736cd430b50f07299f003761e7e4e090ac7360": {
      "address": "0x5ac7FE907cC56a30E5dfaA819EBCE6a8F7bD4B42",
      "txHash": "0x79aaba8cb733efdbc52d1536364cce1a6f85c4c29c57b3d4745f245a0c77facb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:13"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:14"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:15"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:16"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:17"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:18"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:19"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:20"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:21"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:22"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:23"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:24"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:25"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:26"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)12177_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:33"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)12177_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)12177_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "5a76c4d5fb9cfc462b47eefc3e8820df02ccebfa60c61ce872afa76291d85e92": {
      "address": "0xE549AAFaD36B40AdB063f2386352BFe1BC1AE414",
      "txHash": "0x9baeb19182db269d4cf1d50ae779893db72723b1b9d59d206905e38060a952a8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:13"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:14"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:15"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:16"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:17"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:18"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:19"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:20"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:21"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:22"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:23"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:24"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:25"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:26"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)12177_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:33"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)12177_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)12177_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b7f26069004ee7d8dce5d7166d41ede4bde8bfb4016508f790b176ac39b812dc": {
      "address": "0x09d2acf525edc4F9128BeD53d4e81786793D4032",
      "txHash": "0x54013e6678b8f26243221b40165eb749637cc66fdffc8861e57d3563fab20dae",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:13"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:14"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:15"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:16"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:17"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:18"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:19"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:20"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:21"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:22"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:23"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:24"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:25"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:26"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)12177_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:33"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)12177_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)12177_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "a2201c710ccf090b5b6e4081c007245606ec87d788234f408a6ee5e7980f4cec": {
      "address": "0xb51B178EB2C0cC74634392786414a601b3A72a50",
      "txHash": "0xcd9cbccd1f5884de087a87eda34c27638db300d6ac58e9fab500d8e113f389f8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:13"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:14"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:15"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:16"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:17"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:18"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:19"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:20"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:21"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:22"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:23"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:24"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:25"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:26"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)12177_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:33"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)12177_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)12177_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "5e18ea110e7a3ce9d291b622663ae021e4db2b4d088bee94b602af6c1b08abde": {
      "address": "0x160cfd18b6968690032db247Ea0F3550130Bb3C2",
      "txHash": "0x189b52860ba5454a463d5aea92c6472d3674f822ad80e6dcff277afa1798d17c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:17"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:47"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:49"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)9031_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)9046_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:59"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:61"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)9091_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:69"
          },
          {
            "contract": "Stonemason",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/Stonemason.sol:14"
          },
          {
            "contract": "Stonemason",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/Stonemason.sol:15"
          },
          {
            "contract": "Stonemason",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/Stonemason.sol:16"
          },
          {
            "contract": "Stonemason",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/Stonemason.sol:17"
          },
          {
            "contract": "Stonemason",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/Stonemason.sol:23"
          },
          {
            "contract": "Stonemason",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/Stonemason.sol:24"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)9031_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)9031_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)9046_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)9046_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)9091_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)9091_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b77d5473ae1f03ff6c1047d6c67506721f79abf21a891f2d0041aaee8c414f39": {
      "address": "0xE73A25158c7609eF31c0fE95A3C3B94725A1E537",
      "txHash": "0xe821523a91ca56e4cccb4d884c739f8007d869522d4391a6ab4e914276bb5b87",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:13"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:14"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:15"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:16"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)744",
            "src": "contracts/mstationNFT/MstationNFT.sol:17"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)744",
            "src": "contracts/mstationNFT/MstationNFT.sol:18"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)744",
            "src": "contracts/mstationNFT/MstationNFT.sol:19"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:20"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:21"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:22"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:23"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:24"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:25"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:26"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)1342_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:33"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)744": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)1342_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)1342_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f509950d2f9125035a742528125e115ea199f6efb715f80bb512ab8b0c26cf8f": {
      "address": "0xeC3e403f71e813a47dFF1F99D397d78db3626f8c",
      "txHash": "0x7c909ebfc05444cb0787df3ea209554238ad4fd432ec813440a5d949c1c01709",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:17"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:47"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:49"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)9031_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)9046_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:59"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:61"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)9091_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:69"
          },
          {
            "contract": "Stonemason",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/Stonemason.sol:14"
          },
          {
            "contract": "Stonemason",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/Stonemason.sol:15"
          },
          {
            "contract": "Stonemason",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/Stonemason.sol:16"
          },
          {
            "contract": "Stonemason",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/Stonemason.sol:17"
          },
          {
            "contract": "Stonemason",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/Stonemason.sol:23"
          },
          {
            "contract": "Stonemason",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/Stonemason.sol:24"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)9031_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)9031_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)9046_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)9046_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)9091_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)9091_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "38afa725f7e22d4dc6f1e7fc9a18664566567334fee4297ffe8e9b09560c391b": {
      "address": "0xb45D692dFB6513f7Dc8C013a951b0ae57A8Fb996",
      "txHash": "0x775dc3bc4437c7a40b16c92ad5849b0bc35349f4badb54f3a31566ef87857b68",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)5458_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_struct(AddressSet)5458_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)5458_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5157_storage"
              }
            ]
          },
          "t_struct(Set)5157_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "b6686fda62cda4d8be4393d8af20455338aa9b8d0a25dd5dfdfbde1079ebad04": {
      "address": "0xBa748C1B44BaB28bFaacAF814A9f2fA3612572DC",
      "txHash": "0x82befabf13a327afd74a6bf5c7c756eb45472adfc639fef164c9ecc3c5921010",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)5458_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_struct(AddressSet)5458_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)5458_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5157_storage"
              }
            ]
          },
          "t_struct(Set)5157_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "7ef47a78873cc248c0d01d11b6950830595de4d70073a9c5bad610881d1b1799": {
      "address": "0x610896AF813b4e223ae689981837B0fB823d9D5D",
      "txHash": "0x9ad383da29aa5827a25db58c997194da63b6bfbf1be4615348d170eecfef3209",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:13"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:14"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:15"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:16"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:17"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:18"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:19"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:20"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:21"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:22"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:23"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:24"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:25"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:26"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)12177_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:33"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)12177_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)12177_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "482541fe805b66af97e0a066b834b8e5a85eb6c70d2100c0ea35d8ab923cd65e": {
      "address": "0xBd97f65C1d02028969456E8655E589644B302ebB",
      "txHash": "0x2f1f066bab8a7a4a933a1d89968f7ad30a4a042d41dbb2f79244cdb41069f1ee",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:13"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:14"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:15"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:16"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:17"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:18"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:19"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:20"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:21"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:22"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:23"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:24"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:25"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:26"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)12177_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:33"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)12177_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)12177_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "3bc25ce052952f387e3e5d366fe38e41fb90078dbba19b9e1f4cd8803505ecbe": {
      "address": "0x41F43C2Cbf5E60c47Fc28232ce74d910cA3d0212",
      "txHash": "0xbcb2e774abdb4c0a69d83e2113cd2060070e4e1ef8757e988dd0e91fdcfb5d09",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:13"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:14"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:15"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:16"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:17"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:18"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:19"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:20"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:21"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:22"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:23"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:24"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:25"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:26"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)12177_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:33"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)12177_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)12177_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "366081c4c2b1d35bd0979d680bd7f3382479d023b9f95ef8fa5ce624cfbb9122": {
      "address": "0x8b946Bbe61d5aD4AbB5E9bB9b8130b981648c437",
      "txHash": "0x877b92a7a4c65af013188168b80f7283f91b8fcb320456edb549a0c6006066a2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:13"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:14"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:15"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:16"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:17"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:18"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:19"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:20"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:21"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:22"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:23"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:24"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:25"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:26"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)12177_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:33"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)12177_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)12177_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "9f9b1b0d073bd76fd639bedb96d3987ae5d545bd901a5a4033f6c63388b63b8e": {
      "address": "0x98BB49b11000763d0746bE411bF5D27b92A5b9c1",
      "txHash": "0x9ea0df4df7fdbdd86b0a64ed9a389323675b4a38c283ac7b15065f78b28aaec6",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:13"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:14"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:15"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:16"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:17"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:18"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:19"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:20"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:21"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:22"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:23"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:24"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:25"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:26"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)12177_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:33"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)12177_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)12177_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e916564e3d9f13d0ebee7dfacbf8cb9905ac666eb29fd700efe220eb8da751a0": {
      "address": "0xf5d0b89b72c9e6e8C8776BCC1908D81D460DAe3a",
      "txHash": "0x577838a4f583e57defd96431f692bf35aa49f43a6e5e93db98e1f1b109e8fb4f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:13"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:14"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:15"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:16"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:17"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:18"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:19"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:20"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:21"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:22"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:23"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:24"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:25"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:26"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)12177_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:33"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)12177_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)12177_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e171ea340a89bb7c558caa16934f5b8a7d1c328fa8aebd778dce1d96124131e9": {
      "address": "0x8cFFf308733E48Ad109d8dD2c2d40f54ea3c4E51",
      "txHash": "0x466d861f0df80bf6aeb47f175c175e4e522cf2408d9737523123d5e0d40841a1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:13"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:14"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:15"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:16"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:17"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:18"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:19"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:20"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:21"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:22"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:23"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:24"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:25"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:26"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)12177_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:33"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)12177_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)12177_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "184dee5666c848749783c69e0299148ff891110f910aebcfd4648225d9f3523c": {
      "address": "0x69aA0600cAaA0980539d1474e41c755f9EeAc1B7",
      "txHash": "0xd5dfd35a9ce9098780ea82c42993f76352dd9c51d9caa55464634d74db11c345",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:13"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:14"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:15"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:16"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:17"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:18"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:19"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:20"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:21"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:22"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:23"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:24"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:25"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:26"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)12177_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:33"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)12177_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)12177_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d95e035651db5fa7bef928af13a04d3f44ac1f74d3dbf58135ea36efafcf3e00": {
      "address": "0x18CB159Db864D2EC3C7fFA4A738833643D3A97bd",
      "txHash": "0x9c34910fe9903c2372d21fb5e722b62aa797cacc0ca59a9792609dd851239cf7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:13"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:14"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:15"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:16"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:17"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:18"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:19"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:20"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:21"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:22"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:23"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:24"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:25"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:26"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)12177_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:33"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)12177_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)12177_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "6dd47e4c2b6caece358c41ee551c6965a5fa115a5cd9d1f87c2861f8b843a689": {
      "address": "0x14Bb0A8BD3e3C75ac47348B41A6C5395Db58af3d",
      "txHash": "0xa19bc610d0fe64092ca11609342a8eaed92308ba9c4f93146234ee4529e1fe13",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:17"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:47"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:49"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)9063_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)9078_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:59"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:61"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)9123_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:69"
          },
          {
            "contract": "Stonemason",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/Stonemason.sol:14"
          },
          {
            "contract": "Stonemason",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/Stonemason.sol:15"
          },
          {
            "contract": "Stonemason",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/Stonemason.sol:16"
          },
          {
            "contract": "Stonemason",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/Stonemason.sol:17"
          },
          {
            "contract": "Stonemason",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/Stonemason.sol:23"
          },
          {
            "contract": "Stonemason",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/Stonemason.sol:24"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)9063_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)9063_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)9078_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)9078_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)9123_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)9123_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "9405f59e6ea329ec0d73fbbdd4764ee40eb4454b1b7374830c49826e4495e050": {
      "address": "0xdd2880eB28A61A11ecdE5d0A5282546751b9445b",
      "txHash": "0x8e051ef6a666777cfbd47f7c0d040dece24a55076fab8590a8b9f7f6ce3917a2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:25"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:26"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:27"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:28"
          },
          {
            "contract": "MstationMining",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:29"
          },
          {
            "contract": "MstationMining",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:30"
          },
          {
            "contract": "MstationMining",
            "label": "iBscd",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/mstationMining/MstationMining.sol:31"
          },
          {
            "contract": "MstationMining",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:32"
          },
          {
            "contract": "MstationMining",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:33"
          },
          {
            "contract": "MstationMining",
            "label": "totalMiner",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:34"
          },
          {
            "contract": "MstationMining",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:35"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:37"
          },
          {
            "contract": "MstationMining",
            "label": "lastUpdateMiningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:39"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8169_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8169_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8169_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "0e6de60ce7d80d4e4329c8b429c5bb80c1f83294fd7e33affe092b288456b8e5": {
      "address": "0x63f5E4463015337a01bd65798D8335cE945956c7",
      "txHash": "0x4eaa731242a8dd05da910eda4422307db8a8f7e7f2b37b4fa76354f9ab099a91",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:25"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:26"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:27"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:28"
          },
          {
            "contract": "MstationMining",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:29"
          },
          {
            "contract": "MstationMining",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:30"
          },
          {
            "contract": "MstationMining",
            "label": "iBscd",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/mstationMining/MstationMining.sol:31"
          },
          {
            "contract": "MstationMining",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:32"
          },
          {
            "contract": "MstationMining",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:33"
          },
          {
            "contract": "MstationMining",
            "label": "totalMiner",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:34"
          },
          {
            "contract": "MstationMining",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:35"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:37"
          },
          {
            "contract": "MstationMining",
            "label": "lastUpdateMiningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:39"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8176_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8176_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8176_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "1ab20b1bfded9b6abb945ef32b20787d9eaade4d8d5220fb3692ea5a989bab2e": {
      "address": "0x9c0D5aD435822969058C3887843b974311b02564",
      "txHash": "0xd32a7fdc836a862d43c9a07d187eae8853201082870325b95b7c49b7f7eaff55",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:13"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:14"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:15"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:16"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:17"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:18"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:19"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:20"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:21"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:22"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:23"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:24"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:25"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:26"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)12267_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:33"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)12267_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)12267_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c8f8357589fd1ef0169be3be17c0277a71975a207c2043113f1c1a4ecfee6d43": {
      "address": "0xFb79CD78505800A1e9d0e637c938AB82115C47aD",
      "txHash": "0x2c200a6be6c4317c9c68dd842443142b04cd4ed6f9da97b330064bba4b893463",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:17"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:47"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:49"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)9088_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)9103_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:59"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:61"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)9148_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:69"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:71"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:73"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:80"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)9088_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)9088_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)9103_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)9103_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)9148_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)9148_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7e0f6b2d4308fef67f704225fd0f5e702d9cd1ab4ef9ac8274231cb15076d87e": {
      "address": "0x13BbC2e20db7EDe5a48e26b37d089295f6160fa5",
      "txHash": "0xd199eef52bad594061348de1d9ddeeecb754b0be10487b553cc4d532175abf09",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:13"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:14"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:15"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:16"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:17"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:18"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:19"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:20"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:21"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:22"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:23"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:24"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:25"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:26"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)12267_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:33"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)12267_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)12267_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "5c47a611bbb4b5f2bd43b2db4efcbe55ba177a0c1ced976f8766dfe84e013ee0": {
      "address": "0xeEfa0dAC2Fb57bB7C6D86AE14de03f9C8f867b59",
      "txHash": "0xf58873d7209ec31e681c010422ce0d6a5a0300a0bf04b58c1e4c9d4c87ce88a0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:13"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:14"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:15"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:16"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:17"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:18"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:19"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:20"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:21"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:22"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:23"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:24"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:25"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:26"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)12267_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:33"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)12267_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)12267_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "042fc662ebcb675e8272dbf7a4de0f106fe992aa7e2f94cefc6db15d0e0b5734": {
      "address": "0x142c20836C395318ED3D5f551f0E18Ce82A7d4a8",
      "txHash": "0x0b28909f41fa72cd8e996e6f84dd77e7ba699f3a856cf03600ab78146c432b61",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:13"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:14"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:15"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:16"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:17"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:18"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:19"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:20"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:21"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:22"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:23"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:24"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:25"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:26"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)12267_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:33"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)12267_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)12267_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "36579f684510f341e5d0e3d24bc54dca7cfe22e62281ea7844b7511c1ee8ae19": {
      "address": "0x326447FC801f553534fD88b86Aba5CCddE3d9B5F",
      "txHash": "0xb86f2e89d14b1e89a819b81ab7a3447965524051a121054e281ebfc812271d0d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:13"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:14"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:15"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:16"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:17"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:18"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:19"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:20"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:21"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:22"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:23"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:24"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:25"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:26"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)12267_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:33"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)12267_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)12267_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b543eb8486a6f0c52f30debd4842774fd80e9f85d1b3a5f885975f06cd57d79f": {
      "address": "0x63Fe7aCD84B2664F71FD31Bbc759a83BB1183Fd3",
      "txHash": "0x16dfe571922d01e11679a8dee921cf47366055139e2534032fb1c6301bbc98de",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:13"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:14"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:15"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:16"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:17"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:18"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:19"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:20"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:21"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:22"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:23"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:24"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:25"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:26"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)12267_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:33"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)12267_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)12267_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "cf8067e8b9697b6dabe8e9cdf61ae80462e9cbd4030057d7a14ffc404d816fb2": {
      "address": "0xA71bab9C459D672D8de3559c31739c18f14bFBd4",
      "txHash": "0x15a56a9d5c898fb99e87b00ef19c58695bf7f2edf360e5f508aad8b58682d1ee",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:13"
          },
          {
            "contract": "MstationSchool",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:14"
          },
          {
            "contract": "MstationSchool",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:15"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNFTWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:16"
          },
          {
            "contract": "MstationSchool",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:17"
          },
          {
            "contract": "MstationSchool",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:18"
          },
          {
            "contract": "MstationSchool",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:19"
          },
          {
            "contract": "MstationSchool",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:20"
          },
          {
            "contract": "MstationSchool",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:21"
          },
          {
            "contract": "MstationSchool",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationSchool.sol:22"
          },
          {
            "contract": "MstationSchool",
            "label": "upgradePlans",
            "type": "t_mapping(t_uint256,t_struct(UpgradePlan)11245_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:32"
          },
          {
            "contract": "MstationSchool",
            "label": "students",
            "type": "t_mapping(t_uint256,t_struct(Student)11257_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:39"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(UpgradePlan)11245_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.UpgradePlan)"
          },
          "t_struct(UpgradePlan)11245_storage": {
            "label": "struct MstationSchool.UpgradePlan",
            "members": [
              {
                "label": "fromLevel",
                "type": "t_uint16"
              },
              {
                "label": "toLevel",
                "type": "t_uint16"
              },
              {
                "label": "amountBSCS",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardsMultiplier",
                "type": "t_uint16"
              },
              {
                "label": "rateFailure",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Student)11257_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.Student)"
          },
          "t_struct(Student)11257_storage": {
            "label": "struct MstationSchool.Student",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "273d1c079a4c7d426d4ee4190d36a5dc735b0f08ae08aa02eeedc6b979077b4c": {
      "address": "0x702d63c5c02a3222cBE2847625B4EB84d677e6b1",
      "txHash": "0xead22030f1e42d52f7d2d3804cdcc99bb9f1af7e79f8c59763087cab6b650c18",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:17"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:47"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:49"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)9450_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)9465_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:59"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:61"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)9510_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:69"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:71"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:73"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)9450_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)9450_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)9465_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)9465_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)9510_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)9510_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "2518212c62f67ef18c7a4e76996cf2d98ebd0e874a3310f93f8078bc06ca9e52": {
      "address": "0x8BA177E611897c25ed72ba9a85e1Fc1C2D6793F1",
      "txHash": "0x0ef43bb48e274b58c979e1eb786aa29d51ae0af91c653bf1a374f3931e415d78",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:13"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:14"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:15"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:16"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:17"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:18"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:19"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:20"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:21"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:22"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:23"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:24"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:25"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:26"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)10440_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:33"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)10440_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)10440_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "19897730ad894aad333ede264fafb4808eeb9cfa100ffc760d8c24243ee415b3": {
      "address": "0xB14CBefE3BD23d04A970C736a314601C60dd46bA",
      "txHash": "0x1ba3c16366a7b8c305c8d1a3e8ea2526b2a85013d2031b5088dc1268bae080de",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:13"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:14"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:15"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:16"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:17"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:18"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:19"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:20"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:21"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:22"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:23"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:24"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:25"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:26"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)10440_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:33"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)10440_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)10440_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c19fb1ad8e26dfc4f530a6448cfe09cf26c99485f9137bc1f8621946526c82a9": {
      "address": "0x2cA895Eb79B38D830624Ef26f0c33b4489C92A70",
      "txHash": "0x0930c336d97f771e15d864aedd10846bf6b0529b6b604c52a3e81baecef42273",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ReferralBonus",
            "label": "pause",
            "type": "t_bool",
            "src": "contracts/referral/ReferralBonus.sol:26"
          },
          {
            "contract": "ReferralBonus",
            "label": "rewardPerInvitation",
            "type": "t_uint256",
            "src": "contracts/referral/ReferralBonus.sol:28"
          },
          {
            "contract": "ReferralBonus",
            "label": "rewardTokenAddress",
            "type": "t_contract(IERC20)898",
            "src": "contracts/referral/ReferralBonus.sol:30"
          },
          {
            "contract": "ReferralBonus",
            "label": "rewardWallet",
            "type": "t_address",
            "src": "contracts/referral/ReferralBonus.sol:32"
          },
          {
            "contract": "ReferralBonus",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)1239_storage)",
            "src": "contracts/referral/ReferralBonus.sol:34"
          },
          {
            "contract": "ReferralBonus",
            "label": "userRewarded",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "contracts/referral/ReferralBonus.sol:36"
          },
          {
            "contract": "ReferralBonus",
            "label": "whitelistOperator",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/referral/ReferralBonus.sol:39"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IERC20)898": {
            "label": "contract IERC20"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(UserReward)1239_storage)": {
            "label": "mapping(address => struct ReferralBonus.UserReward)"
          },
          "t_struct(UserReward)1239_storage": {
            "label": "struct ReferralBonus.UserReward",
            "members": [
              {
                "label": "rewardAmount",
                "type": "t_uint256"
              },
              {
                "label": "deptAmount",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8fc02d10d3cf2e8fa30f3d7aa6367815c3999bbe0f08f078cf5e17a2ff2c7e1c": {
      "address": "0x517903583bFB4fA8dFFAdcD00Ba4d8Df91B5D2Ac",
      "txHash": "0x5299c23af0eb548f9c24f915d2afd94b238788bf929208eade15692e46e529cd",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ReferralBonus",
            "label": "pause",
            "type": "t_bool",
            "src": "contracts/referral/ReferralBonus.sol:26"
          },
          {
            "contract": "ReferralBonus",
            "label": "rewardPerInvitation",
            "type": "t_uint256",
            "src": "contracts/referral/ReferralBonus.sol:28"
          },
          {
            "contract": "ReferralBonus",
            "label": "rewardTokenAddress",
            "type": "t_contract(IERC20)5823",
            "src": "contracts/referral/ReferralBonus.sol:30"
          },
          {
            "contract": "ReferralBonus",
            "label": "rewardWallet",
            "type": "t_address",
            "src": "contracts/referral/ReferralBonus.sol:32"
          },
          {
            "contract": "ReferralBonus",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)13568_storage)",
            "src": "contracts/referral/ReferralBonus.sol:34"
          },
          {
            "contract": "ReferralBonus",
            "label": "userRewarded",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "contracts/referral/ReferralBonus.sol:36"
          },
          {
            "contract": "ReferralBonus",
            "label": "whitelistOperator",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/referral/ReferralBonus.sol:39"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IERC20)5823": {
            "label": "contract IERC20"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(UserReward)13568_storage)": {
            "label": "mapping(address => struct ReferralBonus.UserReward)"
          },
          "t_struct(UserReward)13568_storage": {
            "label": "struct ReferralBonus.UserReward",
            "members": [
              {
                "label": "rewardAmount",
                "type": "t_uint256"
              },
              {
                "label": "deptAmount",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b2d81f14010688663ff5efadab763886f5f767c4bd5d68c4ee899caaa3668999": {
      "address": "0xc8d70277fF48E7cCEc0f632BbE8283C4b63F4946",
      "txHash": "0xb1ba0bb980e6b404ba43b8621760c667556677b49ff648c91723b629da425afe",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:13"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:14"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:15"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:16"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:17"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:18"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:19"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:20"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:21"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:22"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:23"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:24"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:25"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:26"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)10440_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:33"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)10440_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)10440_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f52353a31bb0707f039d8b7ee3016adb2cc5f2bce6e554a87a9e4128bf62b7dd": {
      "address": "0x54241335d7a7fB8175650785285916F21c5016e7",
      "txHash": "0x541962222c911dedf04fd8ec37ae1c7fa9af75591ea80dbbb213ca5236035a06",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ReferralBonus",
            "label": "pause",
            "type": "t_bool",
            "src": "contracts/referral/ReferralBonus.sol:26"
          },
          {
            "contract": "ReferralBonus",
            "label": "rewardPerInvitation",
            "type": "t_uint256",
            "src": "contracts/referral/ReferralBonus.sol:28"
          },
          {
            "contract": "ReferralBonus",
            "label": "rewardTokenAddress",
            "type": "t_contract(IERC20)5823",
            "src": "contracts/referral/ReferralBonus.sol:30"
          },
          {
            "contract": "ReferralBonus",
            "label": "rewardWallet",
            "type": "t_address",
            "src": "contracts/referral/ReferralBonus.sol:32"
          },
          {
            "contract": "ReferralBonus",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)13543_storage)",
            "src": "contracts/referral/ReferralBonus.sol:34"
          },
          {
            "contract": "ReferralBonus",
            "label": "userRewarded",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "contracts/referral/ReferralBonus.sol:36"
          },
          {
            "contract": "ReferralBonus",
            "label": "whitelistOperator",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/referral/ReferralBonus.sol:39"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IERC20)5823": {
            "label": "contract IERC20"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(UserReward)13543_storage)": {
            "label": "mapping(address => struct ReferralBonus.UserReward)"
          },
          "t_struct(UserReward)13543_storage": {
            "label": "struct ReferralBonus.UserReward",
            "members": [
              {
                "label": "rewardAmount",
                "type": "t_uint256"
              },
              {
                "label": "deptAmount",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "5b3721aa09248465a69a45f3926960729e72940d50101e6993225761445b0398": {
      "address": "0xb8B3E6207c20c310b6b40a751AD3B03c2590c243",
      "txHash": "0x2199d544d0aeeb5c6b6a8b5055f11bb0384462134ab9c193aebf2131079cbd2e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:25"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:26"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:27"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:28"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:29"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:30"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)4286",
            "src": "contracts/mstationMining/MstationMining.sol:31"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:32"
          },
          {
            "contract": "MstationMining",
            "label": "lastUpdateMiningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:33"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:34"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_uint32,t_struct(Pool)4458_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "poolNftContracts",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_bool))",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)4484_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:59"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:61"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)4286": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint32,t_struct(Pool)4458_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)4458_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint256"
              },
              {
                "label": "miningRatio",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_bool))": {
            "label": "mapping(address => mapping(uint32 => bool))"
          },
          "t_mapping(t_uint32,t_bool)": {
            "label": "mapping(uint32 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_struct(Miner)4484_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)4484_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "75e43346d01b3e447073486b866265fe1d9a1373cecb2b5ce277923e723dd745": {
      "address": "0xfeAc3cb62bc415649C8546191E857b6D8Bac7fA0",
      "txHash": "0x560884cc162afc51e93200080bebde1a2c8d24c58fc915cddcda8286aeca525a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:25"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:26"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:27"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:28"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:29"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:30"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/mstationMining/MstationMining.sol:31"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:32"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:33"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:34"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_uint32,t_struct(Pool)8173_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:47"
          },
          {
            "contract": "MstationMining",
            "label": "nftContractPools",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_bool))",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8199_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:63"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint32,t_struct(Pool)8173_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8173_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_bool))": {
            "label": "mapping(address => mapping(uint32 => bool))"
          },
          "t_mapping(t_uint32,t_bool)": {
            "label": "mapping(uint32 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_struct(Miner)8199_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8199_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "dc1b37b438ccd13c49f1701a712013f33f229382e7aab0722233e8efc81b3940": {
      "address": "0xfEcFAD6A9E191BEb891c84BCd7A1fe25cb9CfD51",
      "txHash": "0x57982d3b13b5f920e03db5c0a439dea6d0992d4a4c91d09aaf345c784fa1f907",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:25"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:26"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:27"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:28"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:29"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:30"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/mstationMining/MstationMining.sol:31"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:32"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:33"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:34"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8176_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8198_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:63"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8176_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8176_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8176_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8198_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8198_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c50b6b7dff8006ae3100a0a01c25bc44d6b63b0830b191fafbf3b618f4facbd0": {
      "address": "0x42baFBc014756b98d656Ebc4E1a477d023e4eFF6",
      "txHash": "0xaaee3c46125fdfc147a535692abfd41f2f4ecc6234561a85e87d90217b2220d9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:25"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:26"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:27"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:28"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:29"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:30"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/mstationMining/MstationMining.sol:31"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:32"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:33"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:34"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8176_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8198_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:63"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8176_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8176_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8176_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8198_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8198_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "9db1a7943f555fff8e1d5ea89d46683013b0b4e557b4605ae8ab739f1854f320": {
      "address": "0xFD6082413fDEC305Ab001723eb96a8Bb77663519",
      "txHash": "0x5620f11326f6113b73b4ce2fafe9f4dbc2b5a514680b7f8100e28f4571e962fb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:25"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:26"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:27"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:28"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:29"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:30"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/mstationMining/MstationMining.sol:31"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:32"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:33"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:34"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8176_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8198_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:63"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8176_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8176_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8176_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8198_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8198_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "a792b8a6c2696e945c9ece19fa268e0c5c6b43ef90c29a5bcca789dbc9451724": {
      "address": "0x5D8268b3F831907BEA6e892d9637942DA47830D5",
      "txHash": "0xd73375e84c9dbac578685bf5e47e6752e3d1cc853eb009a45c29181ccfb238db",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:25"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:26"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:27"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:28"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:29"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:30"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/mstationMining/MstationMining.sol:31"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:32"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:33"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:34"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8176_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8198_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:63"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8176_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8176_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8176_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8198_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8198_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "47c4c26c9bb62172b97abf78df52f56025fa17c6d591f9be09e86f931ecd059c": {
      "address": "0x7eA42cB9C02d0bE07D3FB5342DE18a91B20c6578",
      "txHash": "0x5a19d8f0e9d37f40ca4e46a5b4fc8c9b90ea0c6dc27ad58dddfa834d4b73e1c1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:25"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:26"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:27"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:28"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:29"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:30"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/mstationMining/MstationMining.sol:31"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:32"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:33"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:34"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8176_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8198_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:63"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8176_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8176_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8176_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8198_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8198_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d9d375456fb84e771bfcd9d32163675c3d694c269a9c837112616d8b6920d889": {
      "address": "0xB7Fb23f96c30B7f2EF72CEfaF1f28520c8F5E025",
      "txHash": "0x903d1224453209083ef5c60cb1bdc85dffd30a41c1da8351684d12356f553381",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:25"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:26"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:27"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:28"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:29"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:30"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/mstationMining/MstationMining.sol:31"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:32"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:33"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:34"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8176_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8198_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:63"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8176_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8176_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8176_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8198_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8198_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "20384f0849649c64ed9db90acab0e6c9026dc13260a52281c8ae9043413b7868": {
      "address": "0x2dd5BBE6906F4E872DD5910cc63F3965E9e72017",
      "txHash": "0xabcd33dd71b0e44207cc6049b5c14f438c70d1f7e0cf5fa0a62453a29f557bd2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:25"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:26"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:27"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:28"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:29"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:30"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/mstationMining/MstationMining.sol:31"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:32"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:33"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:34"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8176_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8198_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:63"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8176_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8176_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8176_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8198_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8198_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "2a9653f7e6a878f465bda56ef695ae2d47efec695f00455c3e8803bd577771c0": {
      "address": "0x9D73e4152EEcB89D0b552A33cc4f36603844847C",
      "txHash": "0xdcefa0df29b6c2923ec4aacf571ea2c43e66405f31eb8e409db48e341b140fc3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:17"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:47"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:49"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)9512_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)9527_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:59"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:61"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)9572_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:69"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:71"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:73"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)9512_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)9512_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)9527_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)9527_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)9572_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)9572_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "45d0d703c1cfd8f82f8bf9d5a9ca88830236c53b7b4c950da38907265632dc69": {
      "address": "0x5689DfCA38418e6f55022BFB4623fE8954dED010",
      "txHash": "0xb21ddef2092c3341e555d7aedb9fdf81e378ab77f61c6cb0ac87d3206fe99e54",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:25"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:26"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:27"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:28"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:29"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:30"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)4286",
            "src": "contracts/mstationMining/MstationMining.sol:31"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:32"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:33"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:34"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)4497_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)4519_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:63"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)4286": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)4497_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)4497_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)4497_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)4519_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)4519_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "faae3047875713c65294275d9a0ebef8594348207d30179c913078ecb394775b": {
      "address": "0x09e7af8B484447fbb02C3c6e5DD17B49D71B3ffb",
      "txHash": "0xc914b7933200c980238ee3619fa3802f5ee803d8121b719215a5714f69e95f30",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:25"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:26"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:27"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:28"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:29"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:30"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)4286",
            "src": "contracts/mstationMining/MstationMining.sol:31"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:32"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:33"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:34"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)4497_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)4519_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:63"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)4286": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)4497_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)4497_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)4497_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)4519_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)4519_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "3668b8483a087101a380dd82feded6f6cd50f0b263d49ffab1412615348a11c1": {
      "address": "0x3c862BEbB1f68C37B8759ae4fBf4b87a25F6698b",
      "txHash": "0xf9529213efc386f60cd582f923cedb8fbfeb514a60b88d3993f5ffc6929e24f0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:25"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:26"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:27"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:28"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:29"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:30"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/mstationMining/MstationMining.sol:31"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:32"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:33"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:34"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8211_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8233_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:63"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:65"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8211_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8211_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8211_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8233_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8233_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7729ba2cbdadc379427406fed7b350d4a40d5bedbdb5b01658d436be39440018": {
      "address": "0x20548C7EF7017d9169b0292c6387c19510eeD0EE",
      "txHash": "0xdc1c3b66ea4231a242ccd7d0f90d63c56c490de43608169cc95ce5bcfbc78beb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:25"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:26"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:27"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:28"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:29"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:30"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/mstationMining/MstationMining.sol:31"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:32"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:33"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:34"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8211_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8235_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:61"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:63"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8211_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8211_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8211_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8235_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8235_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d2d84985fc193ca49f7c92a4d4830ded0c2e72f8ec8b4577c19a7cee93860bc4": {
      "address": "0x77B36a460711F708dCF1ceF277ae142167c99224",
      "txHash": "0xa13e740eb12d8227b71fb62ed08816c4bba36e6cd9a50e2bb1b4e2509692cc4c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:25"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:26"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:27"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:28"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:29"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:30"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/mstationMining/MstationMining.sol:31"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:32"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:33"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:34"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8211_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8235_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:61"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:63"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8211_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8211_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8211_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8235_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8235_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7072d7ce04d79f74a0ba89b93ddff003e394a8a1c64a86a9c567b881a66dff10": {
      "address": "0x9Aa32A2332DFCbc432022D9572690590d5304fCd",
      "txHash": "0x10c2da5b8bf83e2860b723e4f2902f302826b34f4dc80d1b49f258d88247512e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:25"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:26"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:27"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:28"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:29"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:30"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/mstationMining/MstationMining.sol:31"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:32"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:33"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:34"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8211_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8235_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:61"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:63"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8211_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8211_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8211_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8235_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8235_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "30051a26f56e8359ee3474e36e91cbeaff6e442b59cfb13feb40ce43225afc35": {
      "address": "0xfa36C21e42903fA329228adCE9fa267E84516515",
      "txHash": "0xfdb2f1c920590116753b085f1f46feec80c8abba31cb13fc83f0375be23cb030",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:18"
          },
          {
            "contract": "MstationSchool",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:19"
          },
          {
            "contract": "MstationSchool",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:20"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNFTWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:21"
          },
          {
            "contract": "MstationSchool",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:22"
          },
          {
            "contract": "MstationSchool",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:23"
          },
          {
            "contract": "MstationSchool",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:24"
          },
          {
            "contract": "MstationSchool",
            "label": "upgradePlans",
            "type": "t_mapping(t_uint256,t_struct(UpgradePlan)11925_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:34"
          },
          {
            "contract": "MstationSchool",
            "label": "students",
            "type": "t_mapping(t_uint256,t_struct(Student)11937_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:41"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(UpgradePlan)11925_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.UpgradePlan)"
          },
          "t_struct(UpgradePlan)11925_storage": {
            "label": "struct MstationSchool.UpgradePlan",
            "members": [
              {
                "label": "fromLevel",
                "type": "t_uint16"
              },
              {
                "label": "toLevel",
                "type": "t_uint16"
              },
              {
                "label": "amountBSCS",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardsMultiplier",
                "type": "t_uint16"
              },
              {
                "label": "rateFailure",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(Student)11937_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.Student)"
          },
          "t_struct(Student)11937_storage": {
            "label": "struct MstationSchool.Student",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "0f6c43c97a97499376c27c4c0783158f534a000ea31eb880f64ed1d7f9f4f6c1": {
      "address": "0xa305551b6D9Ce45A655679F41598222F4e4BE148",
      "txHash": "0xc865bd75a81d047e88a063f832cafc70c4e2b752217cc7d89ffa3f29d687fff7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:17"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:47"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:49"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)9646_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)9661_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:59"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:61"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)9706_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:69"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:71"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:73"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)9646_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)9646_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)9661_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)9661_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)9706_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)9706_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f20d7d182b07922b4583b9c4c1ce7fa6bebbc3b9c97595467061d3043c858700": {
      "address": "0x1e974811A7d1Aa45a77b14717D7996f01fDC09d0",
      "txHash": "0x8d443ee498f2d1e448708b0a89843af6a98177675d2fbc52f2ea4741e6b142ca",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:18"
          },
          {
            "contract": "MstationSchool",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:19"
          },
          {
            "contract": "MstationSchool",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:20"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNFTWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:21"
          },
          {
            "contract": "MstationSchool",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:22"
          },
          {
            "contract": "MstationSchool",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)802",
            "src": "contracts/mstationNFT/MstationSchool.sol:23"
          },
          {
            "contract": "MstationSchool",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)802",
            "src": "contracts/mstationNFT/MstationSchool.sol:24"
          },
          {
            "contract": "MstationSchool",
            "label": "upgradePlans",
            "type": "t_mapping(t_uint256,t_struct(UpgradePlan)1448_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:33"
          },
          {
            "contract": "MstationSchool",
            "label": "students",
            "type": "t_mapping(t_uint256,t_struct(Student)1460_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:40"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)802": {
            "label": "contract ERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(UpgradePlan)1448_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.UpgradePlan)"
          },
          "t_struct(UpgradePlan)1448_storage": {
            "label": "struct MstationSchool.UpgradePlan",
            "members": [
              {
                "label": "fromLevel",
                "type": "t_uint16"
              },
              {
                "label": "toLevel",
                "type": "t_uint16"
              },
              {
                "label": "amountBSCS",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rateFailure",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(Student)1460_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.Student)"
          },
          "t_struct(Student)1460_storage": {
            "label": "struct MstationSchool.Student",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "738f30cc35c2ac28d3a15f3621d43e05980c5412eef68db466491840cef5acce": {
      "address": "0x740943AF4517FCF4c743443Ec6016Bd6D3B18A35",
      "txHash": "0xb1fc8f069c2a001dec22f00f7787b3d582349c7bd41d52deb6ec0593eb2b2819",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:18"
          },
          {
            "contract": "MstationSchool",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:19"
          },
          {
            "contract": "MstationSchool",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:20"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNFTWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:21"
          },
          {
            "contract": "MstationSchool",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:22"
          },
          {
            "contract": "MstationSchool",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:23"
          },
          {
            "contract": "MstationSchool",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:24"
          },
          {
            "contract": "MstationSchool",
            "label": "upgradePlans",
            "type": "t_mapping(t_uint256,t_struct(UpgradePlan)11916_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:33"
          },
          {
            "contract": "MstationSchool",
            "label": "students",
            "type": "t_mapping(t_uint256,t_struct(Student)11928_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:40"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(UpgradePlan)11916_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.UpgradePlan)"
          },
          "t_struct(UpgradePlan)11916_storage": {
            "label": "struct MstationSchool.UpgradePlan",
            "members": [
              {
                "label": "fromLevel",
                "type": "t_uint16"
              },
              {
                "label": "toLevel",
                "type": "t_uint16"
              },
              {
                "label": "amountBSCS",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rateFailure",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(Student)11928_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.Student)"
          },
          "t_struct(Student)11928_storage": {
            "label": "struct MstationSchool.Student",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "212186fe0eba0d685f3422bea2a504ac52095eeb8b48d41e95e41f838cfef885": {
      "address": "0xf81E58Afa886b45Ed717264ca82363C53604992a",
      "txHash": "0xba405be758916eff326376191eb23c1fa4019cc7f2212ca4192100d877715836",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)5458_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "BSCD",
            "label": "pause",
            "type": "t_bool",
            "src": "contracts/token/BSCD.sol:15"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)5458_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)5458_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5157_storage"
              }
            ]
          },
          "t_struct(Set)5157_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "0115418e5aa4bbb065d9441d5e58e1591e22717140152b90d78d81d0166cf4eb": {
      "address": "0x27c686d49465200728D88FB44A3839487F3c4b9B",
      "txHash": "0x071a382fe7ad142520c04c1e8a5226a3fdd4c413fc3b59190ac9f937aa298535",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:18"
          },
          {
            "contract": "MstationSchool",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:19"
          },
          {
            "contract": "MstationSchool",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:20"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNFTWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:21"
          },
          {
            "contract": "MstationSchool",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:22"
          },
          {
            "contract": "MstationSchool",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:23"
          },
          {
            "contract": "MstationSchool",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:24"
          },
          {
            "contract": "MstationSchool",
            "label": "upgradePlans",
            "type": "t_mapping(t_uint256,t_struct(UpgradePlan)11916_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:33"
          },
          {
            "contract": "MstationSchool",
            "label": "students",
            "type": "t_mapping(t_uint256,t_struct(Student)11928_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:40"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(UpgradePlan)11916_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.UpgradePlan)"
          },
          "t_struct(UpgradePlan)11916_storage": {
            "label": "struct MstationSchool.UpgradePlan",
            "members": [
              {
                "label": "fromLevel",
                "type": "t_uint16"
              },
              {
                "label": "toLevel",
                "type": "t_uint16"
              },
              {
                "label": "amountBSCS",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rateFailure",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(Student)11928_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.Student)"
          },
          "t_struct(Student)11928_storage": {
            "label": "struct MstationSchool.Student",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "8742962b4109e51ff89c2e093632121c3c516ef858a02786359f7f1148f0ac94": {
      "address": "0x8b79d270B68E5656BFE393761c40012B8f8f6866",
      "txHash": "0x58b8b68bfa80398642475271bf5236c6aef2aad78864e34b477462f163e19627",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:18"
          },
          {
            "contract": "MstationSchool",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:19"
          },
          {
            "contract": "MstationSchool",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:20"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNFTWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:21"
          },
          {
            "contract": "MstationSchool",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:22"
          },
          {
            "contract": "MstationSchool",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:23"
          },
          {
            "contract": "MstationSchool",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:24"
          },
          {
            "contract": "MstationSchool",
            "label": "upgradePlans",
            "type": "t_mapping(t_uint256,t_struct(UpgradePlan)11916_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:33"
          },
          {
            "contract": "MstationSchool",
            "label": "students",
            "type": "t_mapping(t_uint256,t_struct(Student)11928_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:40"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(UpgradePlan)11916_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.UpgradePlan)"
          },
          "t_struct(UpgradePlan)11916_storage": {
            "label": "struct MstationSchool.UpgradePlan",
            "members": [
              {
                "label": "fromLevel",
                "type": "t_uint16"
              },
              {
                "label": "toLevel",
                "type": "t_uint16"
              },
              {
                "label": "amountBSCS",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rateFailure",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(Student)11928_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.Student)"
          },
          "t_struct(Student)11928_storage": {
            "label": "struct MstationSchool.Student",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "cec917a0f245d9199fd0257db6d10befb11d3967cb50fdf4d7af0385382d1ce8": {
      "address": "0x04351e0D66fCCA9bF21Ae1957DD0623819274d9f",
      "txHash": "0x3c029a4eef14193f9122bbf2c5754422cb620ec4167bbf1ae78866790fd5de4b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:18"
          },
          {
            "contract": "MstationSchool",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:19"
          },
          {
            "contract": "MstationSchool",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:20"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNFTWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:21"
          },
          {
            "contract": "MstationSchool",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:22"
          },
          {
            "contract": "MstationSchool",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:23"
          },
          {
            "contract": "MstationSchool",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:24"
          },
          {
            "contract": "MstationSchool",
            "label": "upgradePlans",
            "type": "t_mapping(t_uint256,t_struct(UpgradePlan)11916_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:33"
          },
          {
            "contract": "MstationSchool",
            "label": "students",
            "type": "t_mapping(t_uint256,t_struct(Student)11928_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:40"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(UpgradePlan)11916_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.UpgradePlan)"
          },
          "t_struct(UpgradePlan)11916_storage": {
            "label": "struct MstationSchool.UpgradePlan",
            "members": [
              {
                "label": "fromLevel",
                "type": "t_uint16"
              },
              {
                "label": "toLevel",
                "type": "t_uint16"
              },
              {
                "label": "amountBSCS",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rateFailure",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(Student)11928_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.Student)"
          },
          "t_struct(Student)11928_storage": {
            "label": "struct MstationSchool.Student",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "7604ef55f3dd3b463bed718b799ec10341cb6e43ac50342cfb5d595c16379b4b": {
      "address": "0x604a8994AdD69F64050DEbf615f8A8F29c17cbCe",
      "txHash": "0x966fce1d048b2e14c207d1dcdc4fd71a8c313edb52f38a15d5c77da598f803f6",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:18"
          },
          {
            "contract": "MstationSchool",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:19"
          },
          {
            "contract": "MstationSchool",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:20"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNFTWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:21"
          },
          {
            "contract": "MstationSchool",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:22"
          },
          {
            "contract": "MstationSchool",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:23"
          },
          {
            "contract": "MstationSchool",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:24"
          },
          {
            "contract": "MstationSchool",
            "label": "upgradePlans",
            "type": "t_mapping(t_uint256,t_struct(UpgradePlan)11916_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:33"
          },
          {
            "contract": "MstationSchool",
            "label": "students",
            "type": "t_mapping(t_uint256,t_struct(Student)11928_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:40"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(UpgradePlan)11916_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.UpgradePlan)"
          },
          "t_struct(UpgradePlan)11916_storage": {
            "label": "struct MstationSchool.UpgradePlan",
            "members": [
              {
                "label": "fromLevel",
                "type": "t_uint16"
              },
              {
                "label": "toLevel",
                "type": "t_uint16"
              },
              {
                "label": "amountBSCS",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rateFailure",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(Student)11928_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.Student)"
          },
          "t_struct(Student)11928_storage": {
            "label": "struct MstationSchool.Student",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "16365404d2847aa7913f7e2561f9161ec2120a37cb6efd5ab35e99cdd89b3fe9": {
      "address": "0x83153Cfd7D89F76d8412a6c4d1E6b6282146A9aC",
      "txHash": "0x892a37c45533b7ca4cabb43f532f6fb9603889ed5dbbc58d40cc470aff879bad",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:18"
          },
          {
            "contract": "MstationSchool",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:19"
          },
          {
            "contract": "MstationSchool",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:20"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNFTWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:21"
          },
          {
            "contract": "MstationSchool",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:22"
          },
          {
            "contract": "MstationSchool",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:23"
          },
          {
            "contract": "MstationSchool",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:24"
          },
          {
            "contract": "MstationSchool",
            "label": "upgradePlans",
            "type": "t_mapping(t_uint256,t_struct(UpgradePlan)11765_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:33"
          },
          {
            "contract": "MstationSchool",
            "label": "students",
            "type": "t_mapping(t_uint256,t_struct(Student)11777_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:40"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(UpgradePlan)11765_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.UpgradePlan)"
          },
          "t_struct(UpgradePlan)11765_storage": {
            "label": "struct MstationSchool.UpgradePlan",
            "members": [
              {
                "label": "fromLevel",
                "type": "t_uint16"
              },
              {
                "label": "toLevel",
                "type": "t_uint16"
              },
              {
                "label": "amountBSCS",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rateFailure",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(Student)11777_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.Student)"
          },
          "t_struct(Student)11777_storage": {
            "label": "struct MstationSchool.Student",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "bf27b109eb5e49644a27ec34c2e1c165627fd45a33a93b4f8cd91bb786c517a6": {
      "address": "0x02df998CB1E861F3A5e8e03ca8Ff1140466cf7BB",
      "txHash": "0xb22b8d80164317c65c5a331b0e411d52c2b48a45c9282f25c4fe4f9cf558e441",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:17"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:47"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:49"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)9646_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)9661_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:59"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:61"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)9706_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:69"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:71"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:73"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)9646_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)9646_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)9661_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)9661_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)9706_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)9706_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "4a060e3ae428c901e45c2628da6500005bdfbef6753b5855d4d602154cb973e6": {
      "address": "0x4cD89a8dF3c239b89AbABD572D77B0a9966aB707",
      "txHash": "0x678852705561dc2a9000d202439897772b5ede90f08721acffc29ef3b07d7d1e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:18"
          },
          {
            "contract": "MstationSchool",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:19"
          },
          {
            "contract": "MstationSchool",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:20"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNFTWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:21"
          },
          {
            "contract": "MstationSchool",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:22"
          },
          {
            "contract": "MstationSchool",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:23"
          },
          {
            "contract": "MstationSchool",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:24"
          },
          {
            "contract": "MstationSchool",
            "label": "upgradePlans",
            "type": "t_mapping(t_uint256,t_struct(UpgradePlan)11765_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:33"
          },
          {
            "contract": "MstationSchool",
            "label": "students",
            "type": "t_mapping(t_uint256,t_struct(Student)11777_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:40"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(UpgradePlan)11765_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.UpgradePlan)"
          },
          "t_struct(UpgradePlan)11765_storage": {
            "label": "struct MstationSchool.UpgradePlan",
            "members": [
              {
                "label": "fromLevel",
                "type": "t_uint16"
              },
              {
                "label": "toLevel",
                "type": "t_uint16"
              },
              {
                "label": "amountBSCS",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rateFailure",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(Student)11777_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.Student)"
          },
          "t_struct(Student)11777_storage": {
            "label": "struct MstationSchool.Student",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "7808baf44d14c5fa6c44018e784cdc22c45183e7e9dbcd3f58d57ccfb3869365": {
      "address": "0x1654262E7BC47c9EeD8Dd162090B92ae43AaCB15",
      "txHash": "0x2a92c8281140fa7d23d5abfcd69b69cba5da57108d4a5e442e7c429b245071e3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:18"
          },
          {
            "contract": "MstationSchool",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:19"
          },
          {
            "contract": "MstationSchool",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:20"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNFTWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:21"
          },
          {
            "contract": "MstationSchool",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:22"
          },
          {
            "contract": "MstationSchool",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:23"
          },
          {
            "contract": "MstationSchool",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:24"
          },
          {
            "contract": "MstationSchool",
            "label": "upgradePlans",
            "type": "t_mapping(t_uint256,t_struct(UpgradePlan)11993_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:33"
          },
          {
            "contract": "MstationSchool",
            "label": "students",
            "type": "t_mapping(t_uint256,t_struct(Student)12005_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:40"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(UpgradePlan)11993_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.UpgradePlan)"
          },
          "t_struct(UpgradePlan)11993_storage": {
            "label": "struct MstationSchool.UpgradePlan",
            "members": [
              {
                "label": "fromLevel",
                "type": "t_uint16"
              },
              {
                "label": "toLevel",
                "type": "t_uint16"
              },
              {
                "label": "amountBSCS",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rateFailure",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(Student)12005_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.Student)"
          },
          "t_struct(Student)12005_storage": {
            "label": "struct MstationSchool.Student",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "971e785de7fb7ed7487b635080417630246a0a9011cf8b4c1e8c8eb3589d11a3": {
      "address": "0xD26e5991B041F9F4eC3fB788A87324F0844eEB1c",
      "txHash": "0x637db290b213d99e35cfbaad45badcdf372180f609930ccca05341756426db09",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:17"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:47"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:49"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)9646_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)9661_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:59"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:61"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)9706_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:69"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:71"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:73"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)9646_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)9646_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)9661_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)9661_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)9706_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)9706_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8e313ff38c0c9e74132b646924fd1936f0095557b4779bb3fcd3dd8bee3a0fad": {
      "address": "0xbbc6a2148AbdecB21c4556D56899d7ea5c41C052",
      "txHash": "0x3b8f89d35e03815a349fd258c2ce8e47fd339894644591b8893c4ceb51f8a21d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:17"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:47"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:49"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)9646_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)9661_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:59"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:61"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)9706_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:69"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:71"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:73"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)9646_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)9646_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)9661_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)9661_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)9706_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)9706_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "dd343725e626cb26adc02b70dc66940341cf2f18c0706e3e7dec49bc6d933042": {
      "address": "0x3Ee801468E507F9f40F2646AFAEE3da150FCE294",
      "txHash": "0xaebc63185511b067cad487123a21662c0ce2f6df4a928a1931bb69c757a3b20f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:25"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:26"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:27"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:28"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:29"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:30"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/mstationMining/MstationMining.sol:31"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:32"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:33"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:34"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8211_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8235_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:61"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:63"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:67"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8211_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8211_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8211_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8235_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8235_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "a62b9b80aa51d306b12240510b6a728a5a00ad87cd87a5b31eaa2c383f4803bd": {
      "address": "0xa8c51f99522AA553bf602451bdCf78435687C32E",
      "txHash": "0x09b7216f6ff571aeffe7ce24a363f68e7d2ad96167f6746bdc58be3c8162ea54",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:25"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:26"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:27"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:28"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:29"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:30"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/mstationMining/MstationMining.sol:31"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:32"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:33"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:34"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8211_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8235_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:61"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:63"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:67"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8211_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8211_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8211_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8235_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8235_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "01aad50eb0b52364d29e60e25f33ba2e14cb83ccc855b957da3258b34aa93ff8": {
      "address": "0xD51B0A9487788Ee8017771f575C9aa2d382eFecE",
      "txHash": "0x962b7e32044744253c45fd6728daffb4d8dff5147b280357e25b77517fe36ef9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:25"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:26"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:27"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:28"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:29"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:30"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/mstationMining/MstationMining.sol:31"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:32"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:33"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:34"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8211_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8235_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:61"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:63"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:67"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8211_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8211_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8211_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8235_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8235_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c3111d3d8f35b0bf278f0ba38667eee29bdc994eb43d2ef6f3b6f837a606be95": {
      "address": "0xf2cE4cE760Ea07dedb339cf1Cc15aC2C887f7Ce2",
      "txHash": "0xeaaf5ec3ccdd9ae5e2cc7e504619aa475aa606b17f57ee4a295228d34373e6f8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:25"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:26"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:27"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:28"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:29"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:30"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/mstationMining/MstationMining.sol:31"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:32"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:33"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:34"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8211_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8235_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:61"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:63"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:67"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8211_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8211_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8211_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8235_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8235_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b6b11626da21554cd8cc5bb0c713173604ae0f18e3dfc9d22c5e8d33f48a2018": {
      "address": "0x6040587371c5C7611872117f859cF5CE7645728F",
      "txHash": "0x189f40db0970d3c6597b5a9541af4bd8788a71ba0217e0e7f5d4f7aa86e75855",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8176_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8189_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8176_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8176_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8176_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8189_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8189_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c3d9010f18c7b0d5849fa2290994d32ffb565594eeb19c7b07aff533ec7440cb": {
      "address": "0xF47e782B61c314f728C4747C006c0Acb47207516",
      "txHash": "0x404c5fdf46ac431988509c9e2e6bb30c13928f63f080fa65ec2a5c12c3bb6128",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8176_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8189_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8176_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8176_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8176_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8189_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8189_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b394faee7efb3c4f02abee61ad4e91d8ea3b64c75230282a602450740706a5e3": {
      "address": "0xB938041b7dB729840840ed138CF5dAFAfb66ECC9",
      "txHash": "0xb5edfa94a00dcaad483f1d06ad76bf06bc46016648f13f0f4c29fd14c355f4e5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8176_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8189_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8176_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8176_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8176_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8189_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8189_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "a3320f3178b741d5bbb8a7f0932135b97dad6b3466310c90ac2f229c4163e3dc": {
      "address": "0x37e4BA3Ed08fe754A89957ac76cc036E1072f492",
      "txHash": "0x68a1924a96bace946db69e5e440664442a197124786794c06c96fd0f4bc0c24e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8176_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8189_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8176_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8176_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8176_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8189_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8189_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c8fe25bfebc338ed1f40eb2c3611cf7a1a646f66ef3e1e89ee05f09f133d8c24": {
      "address": "0x6E414ca3f8FC427b9A8E58D2E982F79D265a252C",
      "txHash": "0x44a44428f9c975daa39b82c9e1c0a6d74951ff4e98b309302da6bd5d234e962a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8176_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8189_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8176_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8176_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8176_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8189_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8189_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b3ac27f8a6119af63f0e5254f5a178d67d1e7792bf816de77c7bd7733face9b4": {
      "address": "0x7BED19689c407a25d009913b652ed4Ae1605bf2C",
      "txHash": "0x9a83e35140809b616921942164c7ac14e1c77fcd49418d0084eba40d5d7a834a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8176_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8189_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8176_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8176_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8176_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8189_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8189_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "991857001f600a3bcbe8770161f50f563ff789b97e2934e444956e6a7c7d5cb1": {
      "address": "0x533f91fA1168b573681B37BF9dA719Cc0d7b91bF",
      "txHash": "0x18c8a2e9843e77e1fb105b4d5acd1abe98f4db227adfe2924433d487040f7c05",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8176_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8189_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8176_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8176_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8176_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8189_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8189_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "897606f3b85a652665a4fdb220bfed7572086a5730815ee7df1a825123a74ab7": {
      "address": "0x36EcB3eC88fb6C9EC4d5Be18790a13117421df20",
      "txHash": "0x1a8b646bc992ecaf4cac5aff1f60a2f8952b5c139f7e0a2cb7ed716d89f79a2b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8180_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8193_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8180_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8180_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8180_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8193_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8193_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e58b77785ce998320c5d6cc7dedeebea0f154f705371615afe16e06ce4b6cf9e": {
      "address": "0x8685C09a4A32e17e0073400bB680d95885B07d80",
      "txHash": "0x8a32229ce6d5fea4fae5fb98e1e84af908aba75f586167da9fe9f0b252a71177",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8180_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8193_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8180_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8180_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8180_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8193_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8193_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "4ee8a6587a98dd00eabf83575c7d31caf1d049db183143581c20a8814e47b75f": {
      "address": "0x1949BC9416C02Ea1DD95B93aE8cd5368f444E4DA",
      "txHash": "0x81eedeefaeb85434f502de1a5133676c506bd2a9559b7ba109e783f4b935fb9d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13139_storage))",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)13162_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)13173_storage)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13180_storage)",
            "src": "contracts/pve/MstationPve.sol:104"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)13187_storage)",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:111"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13139_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)13139_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)13139_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "isWin",
                "type": "t_bool"
              },
              {
                "label": "claimed",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint64,t_struct(Monster)13162_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)13162_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)13173_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)13173_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)13180_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)13180_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)13187_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)13187_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "54ab273ea64fb789b25982fb8a4091316a257abfdf83d0b9a02f2615a11d25e1": {
      "address": "0x2F22112223Dcb9Ad8ee791b19fAB9651e29843a4",
      "txHash": "0x9eb7ea8bbb1a4817b74f3abaa1b4b25a67bb52bb0a824bed100bc2a4233a7dd4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13139_storage))",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)13162_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)13173_storage)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13180_storage)",
            "src": "contracts/pve/MstationPve.sol:104"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)13187_storage)",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:111"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13139_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)13139_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)13139_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "isWin",
                "type": "t_bool"
              },
              {
                "label": "claimed",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint64,t_struct(Monster)13162_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)13162_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)13173_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)13173_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)13180_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)13180_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)13187_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)13187_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "23cef8abdc82309b5853069fdfebe65cfc68ddb7b4cbb602942efb92da56ff6c": {
      "address": "0xc1a64CAeaF7cB724370dB1715F03bf3F235ff91C",
      "txHash": "0x3c831ce9d0b65f4471458f01c733929280695c91314be624141ed88dd2b131ed",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13139_storage))",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)13162_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)13173_storage)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13180_storage)",
            "src": "contracts/pve/MstationPve.sol:104"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)13187_storage)",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:111"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13139_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)13139_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)13139_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "isWin",
                "type": "t_bool"
              },
              {
                "label": "claimed",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint64,t_struct(Monster)13162_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)13162_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)13173_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)13173_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)13180_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)13180_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)13187_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)13187_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f6260ae58d08e182c73baeff28d27edf686e58024023b10c275b2581203ef4ee": {
      "address": "0x5b9bdC8787804432e3f8f915e67F1398a2669F8b",
      "txHash": "0xac3136b70f16e427317cdd1cdf40f87500b8ec749830e931de4073ac4328d207",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13139_storage))",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)13162_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)13173_storage)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13180_storage)",
            "src": "contracts/pve/MstationPve.sol:104"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)13187_storage)",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:111"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13139_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)13139_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)13139_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "isWin",
                "type": "t_bool"
              },
              {
                "label": "claimed",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint64,t_struct(Monster)13162_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)13162_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)13173_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)13173_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)13180_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)13180_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)13187_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)13187_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "91717abbdd3cef2ce9bc6a1568b93972603370a00c67962982d876e0bc674dfb": {
      "address": "0x489C6BAcfd3EFBd3FE8B7d3E995c8f5C9fE81605",
      "txHash": "0x67b9e7a884616f37a64599a40ea0933440fc2ca761c7707d0082d2f861886935",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13139_storage))",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)13162_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)13173_storage)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13180_storage)",
            "src": "contracts/pve/MstationPve.sol:104"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)13187_storage)",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:111"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13139_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)13139_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)13139_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "isWin",
                "type": "t_bool"
              },
              {
                "label": "claimed",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint64,t_struct(Monster)13162_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)13162_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)13173_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)13173_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)13180_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)13180_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)13187_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)13187_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "251df85e7033e0c16b493ac51ca32fd10e8558fc645b91f4725d3df50289ea32": {
      "address": "0x59b4617526f64f6E7bfb73000f4532513EE9d418",
      "txHash": "0x0b6e4799c55037f6f8054bdfc6ea8b0cf965ffda7559dcc82f986d1db4290ec5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13139_storage))",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)13162_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)13173_storage)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13180_storage)",
            "src": "contracts/pve/MstationPve.sol:104"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)13187_storage)",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:111"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13139_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)13139_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)13139_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "isWin",
                "type": "t_bool"
              },
              {
                "label": "claimed",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint64,t_struct(Monster)13162_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)13162_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)13173_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)13173_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)13180_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)13180_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)13187_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)13187_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "31b02d8e21dda3a3c0133367a35d4ab186a4e2325d0733299b14c6a4db653103": {
      "address": "0xB0eCdA9Bd6e99edc174c2416dAF3Cb652700a684",
      "txHash": "0x8f15e26075b3633d6cca6a796c3a91fb617ce842ccc7ac3a913f1a9730eeeaab",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13139_storage))",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)13162_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)13173_storage)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13180_storage)",
            "src": "contracts/pve/MstationPve.sol:104"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)13187_storage)",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:111"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13139_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)13139_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)13139_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "isWin",
                "type": "t_bool"
              },
              {
                "label": "claimed",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint64,t_struct(Monster)13162_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)13162_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)13173_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)13173_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)13180_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)13180_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)13187_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)13187_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "babe89930a6e2bc55a344aa705f965dabb599d0a5d2f43de3f4f9e7c9dbfc00e": {
      "address": "0xF66e7fEBeDa9287dC1d3716c5e8A55C2F0730cD9",
      "txHash": "0xbdf93a93c2acb0f4442340bfa31039846b21cf5f62eac565a245e1705822a732",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13139_storage))",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)13162_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)13173_storage)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13180_storage)",
            "src": "contracts/pve/MstationPve.sol:104"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)13187_storage)",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:111"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13139_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)13139_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)13139_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "isWin",
                "type": "t_bool"
              },
              {
                "label": "claimed",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint64,t_struct(Monster)13162_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)13162_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)13173_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)13173_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)13180_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)13180_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)13187_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)13187_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "6b95e99ed1317edac662c88c676c9ec9d948b8066fc072737895285503b49218": {
      "address": "0x64cBfBE5E1860C02Cbe4cB30Cd7355B4f9aE4C43",
      "txHash": "0x4782667244789163a26630fc4bdb6c42de0e36bd4c25d3ca7f3c5930656a69e8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13144_storage))",
            "src": "contracts/pve/MstationPve.sol:99"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)13167_storage)",
            "src": "contracts/pve/MstationPve.sol:101"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)13178_storage)",
            "src": "contracts/pve/MstationPve.sol:103"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13185_storage)",
            "src": "contracts/pve/MstationPve.sol:105"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)13192_storage)",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:112"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13144_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)13144_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)13144_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "isWin",
                "type": "t_bool"
              },
              {
                "label": "claimed",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint64,t_struct(Monster)13167_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)13167_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)13178_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)13178_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)13185_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)13185_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)13192_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)13192_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c524d9b653be4e903e552148d4db52ca678fafbd2e3c5af0d1bc58e0abb37227": {
      "address": "0xEc633dF57f28b293F3c49288504A0a26092d5B71",
      "txHash": "0x33378dcfd31ae7c66121598e5f6d34ae999cf1597f37673d6e5e96bb2449ab1e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13144_storage))",
            "src": "contracts/pve/MstationPve.sol:99"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)13167_storage)",
            "src": "contracts/pve/MstationPve.sol:101"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)13178_storage)",
            "src": "contracts/pve/MstationPve.sol:103"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13185_storage)",
            "src": "contracts/pve/MstationPve.sol:105"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)13192_storage)",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:113"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13144_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)13144_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)13144_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "isWin",
                "type": "t_bool"
              },
              {
                "label": "claimed",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint64,t_struct(Monster)13167_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)13167_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)13178_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)13178_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)13185_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)13185_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)13192_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)13192_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "28affb70d5474cc0fbd18ea2f1dc7080f64a8c7a4294a12a04edef44016d6125": {
      "address": "0x067372fe1aC1c600E3DEe86Af1Fb4BBFCA1B3C87",
      "txHash": "0x7b12d37268f75b5d4ba403cbe762345dc98e7c589c744fe983c708f75a143957",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13144_storage))",
            "src": "contracts/pve/MstationPve.sol:99"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)13167_storage)",
            "src": "contracts/pve/MstationPve.sol:101"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)13178_storage)",
            "src": "contracts/pve/MstationPve.sol:103"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13185_storage)",
            "src": "contracts/pve/MstationPve.sol:105"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)13192_storage)",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:113"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13144_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)13144_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)13144_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "isWin",
                "type": "t_bool"
              },
              {
                "label": "claimed",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint64,t_struct(Monster)13167_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)13167_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)13178_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)13178_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)13185_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)13185_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)13192_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)13192_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "89551fa01c1fec8a19b94a7dadd1205b1587d3b5e2c16d7dea3915b2fc202920": {
      "address": "0x0130bCfd151Cd6d9C1b30681c22AF92b98Afe752",
      "txHash": "0x659272ec6eb2aacc4d2d55836ddab63056b4c8ef0e46c0133ad77466c6de02c5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)6581",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13144_storage))",
            "src": "contracts/pve/MstationPve.sol:99"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)13167_storage)",
            "src": "contracts/pve/MstationPve.sol:101"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)13178_storage)",
            "src": "contracts/pve/MstationPve.sol:103"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13185_storage)",
            "src": "contracts/pve/MstationPve.sol:105"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)13192_storage)",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:113"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6581": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13144_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)13144_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)13144_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "isWin",
                "type": "t_bool"
              },
              {
                "label": "claimed",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint64,t_struct(Monster)13167_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)13167_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)13178_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)13178_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)13185_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)13185_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)13192_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)13192_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "56b54e1fe8a4de7f6ee4c8a2a098a424dde735fcb0d711a4c2e6aa2dd6dec086": {
      "address": "0xa1Fde419601139e1304144caa0D5b6fC558FF20f",
      "txHash": "0x885fa0db863d1336efc4c3e792e04550266cc0879863fa8949564041334439f6",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:18"
          },
          {
            "contract": "MstationSchool",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:19"
          },
          {
            "contract": "MstationSchool",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:20"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNFTWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:21"
          },
          {
            "contract": "MstationSchool",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:22"
          },
          {
            "contract": "MstationSchool",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:23"
          },
          {
            "contract": "MstationSchool",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:24"
          },
          {
            "contract": "MstationSchool",
            "label": "upgradePlans",
            "type": "t_mapping(t_uint256,t_struct(UpgradePlan)11993_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:33"
          },
          {
            "contract": "MstationSchool",
            "label": "students",
            "type": "t_mapping(t_uint256,t_struct(Student)12005_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:40"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(UpgradePlan)11993_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.UpgradePlan)"
          },
          "t_struct(UpgradePlan)11993_storage": {
            "label": "struct MstationSchool.UpgradePlan",
            "members": [
              {
                "label": "fromLevel",
                "type": "t_uint16"
              },
              {
                "label": "toLevel",
                "type": "t_uint16"
              },
              {
                "label": "amountBSCS",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rateFailure",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(Student)12005_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.Student)"
          },
          "t_struct(Student)12005_storage": {
            "label": "struct MstationSchool.Student",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "3152c650097cf383f1b6bea490182aeb7853846f8c7eda33d052ad8ebb427b26": {
      "address": "0xe1868F85E865c3f274eDB2327c439Be62A1d652D",
      "txHash": "0x8d709ab44c0218956cb365eea0d0eaa93259c76895e340422c9fab35cf459668",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:18"
          },
          {
            "contract": "MstationSchool",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:19"
          },
          {
            "contract": "MstationSchool",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:20"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNFTWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:21"
          },
          {
            "contract": "MstationSchool",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:22"
          },
          {
            "contract": "MstationSchool",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:23"
          },
          {
            "contract": "MstationSchool",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:24"
          },
          {
            "contract": "MstationSchool",
            "label": "upgradePlans",
            "type": "t_mapping(t_uint256,t_struct(UpgradePlan)11993_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:33"
          },
          {
            "contract": "MstationSchool",
            "label": "students",
            "type": "t_mapping(t_uint256,t_struct(Student)12005_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:40"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(UpgradePlan)11993_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.UpgradePlan)"
          },
          "t_struct(UpgradePlan)11993_storage": {
            "label": "struct MstationSchool.UpgradePlan",
            "members": [
              {
                "label": "fromLevel",
                "type": "t_uint16"
              },
              {
                "label": "toLevel",
                "type": "t_uint16"
              },
              {
                "label": "amountBSCS",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rateFailure",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(Student)12005_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.Student)"
          },
          "t_struct(Student)12005_storage": {
            "label": "struct MstationSchool.Student",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "6ee50f0cacf3a4fca3c387885b9b9b026aab9a6c846d28afd6721e69137ad0fd": {
      "address": "0x653E2c165f22Ae1f4031b03d03ac0eC4fb8551Bc",
      "txHash": "0x1bd060bd8ca3eeb2cefe89d2df86f019e0222b8f1d455552a64f45043546f771",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11119_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:53"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:62"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:63"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:64"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:65"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:66"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:67"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11119_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11119_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "38e46a0239ad85fedd5928e955bbf79c4eabdee709b795b36e890631af9d56a2": {
      "address": "0xf242F1439BF4f8DD409eC47af9d32E8982e8aDb7",
      "txHash": "0x4f2253e6462050db520a3319cdc983cdee1562dbc7842a8f21c07ca2776a971b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11119_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:53"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:62"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:63"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:64"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:65"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:66"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:67"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11119_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11119_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ec3c1fbccc8a8916ab076870affa0d59babce8fa815c61ec279f1e6a7bae6850": {
      "address": "0x5b23aaEA9C58bB4FC5A75A6174854A749f6A2D03",
      "txHash": "0xe4fd10254283613c544bef52a6e3954c0f726ccf5d15adc84ab017958b70c5b2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11119_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:53"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:62"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:63"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:64"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:65"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:66"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:67"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11119_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11119_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7ea7741bfc8848570c3d139eb4204e436199f25a5649f5dac948f4d3fbbf5c67": {
      "address": "0xD93E1B561f3564fb8f9B94eE20265fcfAf02cFcb",
      "txHash": "0xa154fd102d24fef0d49b2b315fcb726b0852e78763d812302dfb5967925c700d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11119_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:53"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:62"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:63"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:64"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:65"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:66"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:67"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11119_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11119_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8b5441b947dd622677586462a1cfa217c49d8e95ceee9f353d55d345786c4587": {
      "address": "0x3467a3627161c12bA2A752958897D698c341A5E7",
      "txHash": "0xf98e01a1cebb2463e2dd8c91f81865f655f0ad6a4d22bf5be5974c86e941c1fd",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11119_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:53"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:62"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:63"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:64"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:65"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:66"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:67"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11119_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11119_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "a5e000f7f381702531f50ceb8b60e7f3bcd190e8a5f6033b1cacf3a68828127a": {
      "address": "0xB642e6943A169e581496B85e098F972eFb21E4A1",
      "txHash": "0x8f01f3edc18e0cf3889c2dfd5d8d6f406eb37fdbc1295e56ff764c7380b04327",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11119_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:53"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:62"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:63"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:64"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:65"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:66"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:67"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11119_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11119_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "811a55ffe6ee8718e5be224aed6517f39dbc9594d523a239b74b70f8953b2daf": {
      "address": "0x09688D6B0C5E2f661eE1BF5A14A09118a5E69736",
      "txHash": "0xd8e509a304aabb14fbd124c2bf74c3d239f15de5003bfca0f557c24784b87c9e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11119_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:53"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:62"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:63"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:64"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:65"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:66"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:67"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11119_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11119_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "5556eb6d7ea6335f041d08dea7acdad6d76e760d88e66eeef82753cd0b33d579": {
      "address": "0x67905c964C3e93EbfE06D700C097740E121593C2",
      "txHash": "0x9b76fbabd64a810da814d55efaa8a7d1b0c7907f33e6e2774d2a03dc3ff6837d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11119_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:53"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:62"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:63"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:64"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:65"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:66"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:67"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11119_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11119_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "afe36bb3fb8db4dc2a40118561de23b5b3a47c40c86f4c64a4b3a7001ed79d33": {
      "address": "0x4aD39ecB2FD52512cDBdA65Eca32BeFC2c172294",
      "txHash": "0x1ef96e42181597c4951ed56a36fb38df973db784ded9b215449544510ffc158a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:17"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:53"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)9762_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)9777_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:56"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:59"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:61"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:65"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)9822_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:73"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:80"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)9762_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)9762_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)9777_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)9777_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)9822_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)9822_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "80c3822f444c2b7edcec2b0c0c7076bc3b08e5329f763728a02dbd820264dd6f": {
      "address": "0xa2E70CE5Cd87a73DddD8132C36D871D4f7648315",
      "txHash": "0x6764fbea0b40fddc5d9cf442869908bf3701704f24d1e3342c6a4dc4dc6659c2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:17"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:53"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)9762_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)9777_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:56"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:59"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:61"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:65"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)9822_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:73"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:80"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)9762_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)9762_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)9777_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)9777_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)9822_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)9822_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "df780a95a582b22ce9568523dd34e000d65c9a5c6dbf61a52a178cebde608b03": {
      "address": "0x22D53eB7be4F7C133ad07C53dEA80A4D7E2fE798",
      "txHash": "0x82669b264183002eddd980c68dc6c046f4b01f5f7c4170aa42e0e31821479637",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:17"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:53"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)9762_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)9777_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:56"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:59"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:61"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:65"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)9822_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:73"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:80"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)9762_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)9762_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)9777_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)9777_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)9822_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)9822_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f28db0a6affe275738952732f3d43c34aad342b27d1e6b868a61af86c7186c91": {
      "address": "0x5B296b32760881D59Eac15B44b78b0aa4543f677",
      "txHash": "0x0340c201907250b4f9b9a858a823a4ab3108976ddcbacc1390742457083fab17",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)10953_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:53"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:62"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:63"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:64"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:65"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:66"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:67"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)10953_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)10953_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "6d22145f912ad51c676018731e593dd6c191b3269f3df0f5aaa9e1ced0f5d263": {
      "address": "0x0A87304641277830344f7Ace581f326b023A10ec",
      "txHash": "0xecc282166d93b1e4f9adae490ba2264d81b5d2a68db14edad829f17730c12244",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:17"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:53"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)9762_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)9777_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:56"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:59"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:61"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:65"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)9822_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:73"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:80"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)9762_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)9762_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)9777_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)9777_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)9822_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)9822_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "0b4460cc1a7b5aa19ea2351502bd35c65e19368040ee533957c1cde065564e93": {
      "address": "0xc7A87361d6c2785846050363A7F57A76dbf2A6df",
      "txHash": "0xdcb58fe1489133445c56522cfd9dac89f6ff830abcc7147ce639d02b759b0492",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11662_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:53"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:62"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:63"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:64"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:65"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:66"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:67"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11662_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11662_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "fc78692d139fd3a7ac25695fdd45bbe3c7844899ebc71d8dd625244fed333cc5": {
      "address": "0xb9ea6a7DdEA3df2f50ff61EeFB115ff16d409A37",
      "txHash": "0xec7e4182230972b0dcd4a5a758af150a03acb95ee0a9e3eb414a702ddb211cf8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:17"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:53"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)9762_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)9777_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:56"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:59"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:61"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:65"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)9822_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:73"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:80"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)9762_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)9762_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)9777_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)9777_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)9822_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)9822_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "744f0e773e789a98da5487f7ff329f4ec8e9d9c28f7bf10cade990224251469e": {
      "address": "0x24CEE360c817D256733834d44160E622D25E4E68",
      "txHash": "0xfe528a111e7ca0f0bbaebdb962a3f865af766e030018c7a3c39981d177fbfa7b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:17"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:53"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)9762_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)9777_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:56"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:59"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:61"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:65"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)9822_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:73"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:80"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)9762_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)9762_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)9777_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)9777_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)9822_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)9822_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b3dd42754d82a4ab3ef4cc9e179fbfa1d25d2e083a6a1aaf6ebfc2d77934c916": {
      "address": "0x2C212EEF11aA31b11003a4aFdb198a15BAA94E50",
      "txHash": "0xc6c8958092e2c31f8ecef6293cbe356593a404107fcd2b2c8652c57c1d7d09df",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11482_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:53"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:62"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:63"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:64"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:65"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:66"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:67"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11482_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11482_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7792040e08cb34029501ba2ce24430a62137cdede41e76942dba20c9b6f9911f": {
      "address": "0x3bEC78cB40FAa2Bc9A9032AA846619E23A4b206F",
      "txHash": "0x4743f62117031fe8906089adb04db10cebd2ef85b1a5a897541b893f736f7bec",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:17"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:53"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)9762_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)9777_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:56"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:59"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:61"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:65"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)9822_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:73"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:80"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)9762_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)9762_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)9777_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)9777_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)9822_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)9822_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "2ab7025c9b352d1d882c6e6cbde8cf5dd23493e23ddc88be881d8c29ff5899f8": {
      "address": "0x7AFc0E7f9f826F66Ca28D592837EA9CEC56a33Ca",
      "txHash": "0x444317b2d9a4a142a3e872ff09aaac70bf162b640fbf6694095b218fcfc02020",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:17"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:53"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)9762_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)9777_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:56"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:59"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:61"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:65"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)9822_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:73"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:80"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)9762_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)9762_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)9777_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)9777_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)9822_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)9822_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c86623f27157cb7ee94674a636ca43e029ae9b7589c9667bdb74b4c9a7587b41": {
      "address": "0xa32925cd256Cecd859439fe58624e3D4d51B18Fd",
      "txHash": "0x4caea6e394a83458df4e54efd5f80997ecda346f3cd1b08c4e6ec5cd2682b7eb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:17"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:53"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)9762_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)9777_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:56"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:59"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:61"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:65"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)9822_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:73"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:80"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)9762_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)9762_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)9777_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)9777_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)9822_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)9822_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c9441b29c6f1e776e793e69bbdfb0a9ed42816b814bcfdb85805c6db3662aa1b": {
      "address": "0xa45dC99d6A60e037aC140991E6bd6f500dB0bA8f",
      "txHash": "0xd4d95536d6663e593cd52f6aa32080d37ca9e89de078d37d6a7ea3af050eff61",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:17"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:53"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)9762_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)9777_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:56"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:59"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:61"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:65"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)9822_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:73"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:80"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)9762_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)9762_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)9777_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)9777_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)9822_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)9822_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "12f7745e864bb415378ed3d2de34285e0a280e7e940ccb03647a578f03129d37": {
      "address": "0x7391601b0d959f6679156220Caa0a618Ed4e66E2",
      "txHash": "0x7d1e93f3bb6e70de250a3d3fcdd8ad35b44b743d66d0bad09d77828504f2201c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:17"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:53"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)9762_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)9777_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:56"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:59"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:61"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:65"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)9822_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:73"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:80"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)9762_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)9762_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)9777_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)9777_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)9822_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)9822_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c75c99f4fccf5399a5585653aaecf1af5288fa6ec94dcacea609c4b7cf5da023": {
      "address": "0xfb5f659DE3e233f84E7BD9BAc31586e32Da02578",
      "txHash": "0x03abde2cd1a1a6278979ce31f4a787bdca76276f00989298ffab8c0b46739ac8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:17"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:53"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)9762_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)9777_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:56"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:59"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:61"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:65"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)9822_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:73"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:80"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)9762_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)9762_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)9777_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)9777_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)9822_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)9822_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "98950ee589b7badf623759f7e15d5117ea45d65ab09b3a603a468ef8fd7a300c": {
      "address": "0xF0feA912907D404e6C7f58E42CFAA9725A8a7f03",
      "txHash": "0x366b337c57b21595dc89ef08ad8ea6c1b4626ee12f70c5a15d0bcd7dfd63aef1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:17"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:53"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)9762_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)9777_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:56"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:59"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:61"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:65"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)9822_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:73"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:80"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)9762_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)9762_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)9777_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)9777_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)9822_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)9822_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "4bcbb26be2c0a1df05d226536f22d2f13b1f9a23206485dc199560d5be1f61c0": {
      "address": "0x30275D770897e430DDD79358d153aC5a83a3b8FC",
      "txHash": "0xb4b2879a8bf3c5b1742015f9d3019bbba8a3ce9fb35290cfb153d3c00e3f4517",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:50"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)10153_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)10168_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:62"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)10215_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)10153_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)10153_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)10168_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)10168_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)10215_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)10215_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f0caddc8e91eefa8dffe117fda0b1960afb57820acd32f5b1f5945deb78d7f5c": {
      "address": "0x96AbD4a7c7BFD6444189f1717765923a22c53A18",
      "txHash": "0xa0bd2f0e985c6ec89b7f2d3ce0e247953802642ccf1ee17c0c476f8caaef7e58",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:50"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)10153_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)10168_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:62"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)10215_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)10153_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)10153_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)10168_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)10168_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)10215_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)10215_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ac0e5d72cf236bb105a60313e4cca064389c50a8340aa646e880bd0d3a29a36b": {
      "address": "0xBf7300FB67E87E222E729DCd167C006C00B67692",
      "txHash": "0xc7aaa9ce4b4b5553e3d07c2f26fc9354c1d03f0b1bcdcae3158085fc9d03cb31",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:50"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)10153_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)10168_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:62"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)10215_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)10153_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)10153_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)10168_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)10168_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)10215_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)10215_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "3cf2e401aea1fe15601ab088328dfebd441f3176170b31e72dbcc7d6a7ef377a": {
      "address": "0x78bf941f71ec5c426DDe9eefE9a8e79Cb0990362",
      "txHash": "0xcc97b8c975bbb59274c1c47c67733c7e2020b6ce470e8c59bd616c089980d6ce",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11654_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:53"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:62"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:63"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:64"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:65"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:66"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:67"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11654_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11654_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "31bb6516a651341f482232399b832449ac95d9a4e97a2b180bcf7801ac9c6d45": {
      "address": "0x6D1c9FbcF544A22530e7c0631551B55947CCCC2b",
      "txHash": "0xd031979c8852af4c05e1c29b52b6b3080d528aee7a98694a86d2dabdf243c0bc",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:50"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)10153_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)10168_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:62"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)10215_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)10153_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)10153_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)10168_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)10168_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)10215_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)10215_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "3a3150844a2f4260c627f2a975617f5ebf1231f88285937b3562a8b960e78824": {
      "address": "0x806257eFfC5F7E037e1159E460A417b9b6e80E12",
      "txHash": "0x62beec3b3fdb020623da9a3dc098f24a361878a0580788eab7d09209f9486c03",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11666_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:53"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:55"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11666_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11666_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "bc3c85f89c56bcec76aa826920930468b98e5cb2288e4918098304c421258047": {
      "address": "0x026423c5DAFEF941985348407A123D7c6f4C4344",
      "txHash": "0x1eda04471de7d161bae61ded2839386b345d9b13fa21ac4dff96cdf641f483ef",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:50"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)10153_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)10168_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:62"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)10215_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)10153_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)10153_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)10168_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)10168_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)10215_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)10215_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "274c5517088c0e6054eb9fa81bdc187db42350cd25e3a0a3594af65d37cc0e29": {
      "address": "0x61d58b88B37FeDFECc4Cf2c8Be3Ed9bCaDa5EF37",
      "txHash": "0x0b5fcec7338893f8f4acb7e3e2a38a02ec55eec0678573775bf3b3f191f5c9f5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11589_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:53"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:55"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11589_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11589_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d6a7e4716e3a8a7c005c587bce7317b1b264a933c47352fae71c5b05f061a2a3": {
      "address": "0xfEDE51bC2bfd69D26A549c592a000FFE34A0B7ce",
      "txHash": "0x8709a2515040e50e880ed11c26c864c568a94ad09cd63cfb51fae141a990605a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:50"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)10153_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)10168_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:62"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)10215_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)10153_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)10153_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)10168_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)10168_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)10215_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)10215_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "a3652d9bee4c5d4f7f6accc562417859146a902abf6b075c100ebc6dc7027863": {
      "address": "0xDa2a16813AA30398d1493a59272678EaF9f80EE0",
      "txHash": "0x41b735810dd5be47ae9b7fee9262e14f88dc7f9b4da1be8513a29df8d8029229",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:50"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)10153_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)10168_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:62"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)10215_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)10153_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)10153_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)10168_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)10168_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)10215_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)10215_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "2439e34aa24e54b33148b5d14b203e45817904be471a2b2eae194d398357a33d": {
      "address": "0x8685A85F56F3204818D25Af5d870AeA9d655108E",
      "txHash": "0x06590ab6aac85a06ff39ab2c3f8a40d8e7d2595f9a599903faa51e2b5e82f02e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:50"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)10153_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)10168_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:62"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)10215_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)10153_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)10153_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)10168_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)10168_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)10215_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)10215_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "382418cbda51697dd9dc788abdcf5db61aa57d399781961ee6414601ae50c2c1": {
      "address": "0xA68d4C844D5C2be5806881BA09699bdc869f06d5",
      "txHash": "0x7735204a688df078f7e7b0aeef1dc710a9793c994a6b5eff71cde8cb2aa4a7e2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11589_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:53"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:55"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11589_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11589_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "a72d6301374453927ac4471ed4b8633f9664f7a402251878b4b433a35cf4bfcf": {
      "address": "0xA3EEf2E810C441b042497C16c12160026283C8e7",
      "txHash": "0x8f166fd2356c0d8802b9bca2dc98549e2e1c501d7ee36659b61dbc88d1409f88",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11589_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:53"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:55"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11589_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11589_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "3afc2fec123ab9f0c5e4f5f0b72dcc3274ccc84e0e7ca987533199ce62ee7f1f": {
      "address": "0x9763c74e2c44d57191EA3a0d858b02597EdBDEAe",
      "txHash": "0x926e3cade945e8ceb25ee15b1d5252fcd7ad6d082bdbc9f69f079bba21e5fc76",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11589_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:53"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:55"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11589_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11589_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "fb18adbe9d4326e77ce175c1eafaf3d0ce36bdbbcfc48ee3c2e74dda174f8aad": {
      "address": "0xc660C56ba52e7df020b725F28046Ad1BA33C2E56",
      "txHash": "0x70eccdcf0ed1c5af39c0e5061a6753ee994d55475c27a608fe518ae3fee1b1ac",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11589_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:53"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:55"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11589_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11589_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c8fff204832b2cd4f23cc2df3200f40fb52690d0544d8216c1899a4bd2902039": {
      "address": "0x04022c4c5f025906Df3650B8a0c708051B20d473",
      "txHash": "0xf1c7a246d9da726ddf0ce12bb63cb36000bad83d19ee4ff49dd2f578e15e2d70",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11589_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:53"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:55"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11589_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11589_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7aa430616304b9ce5eb12ce96c7c5266fd2d440fce61f2fd6122611cb3b66d58": {
      "address": "0x843605797fd9e2De78591a968FA1f84246070f95",
      "txHash": "0x20146ddb5813c345a3c1a0403d60742faf8d125dae00001c337168701f3c2aae",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11589_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:53"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:55"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11589_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11589_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "06eaaa0d71586cd5053e8588c81d73b8805e81941406593290acd66ac4e598e9": {
      "address": "0x62549db4F6ff7767D975188294399F9E6fc35950",
      "txHash": "0x3f716623ae33d5ccdcb3948e05542a6ca7fa933e38fca84b81f294730a8e5f2c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11589_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:53"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:55"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11589_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11589_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "2123cc00ba0c474a11291aee5ca25f63b1c81f0f92f494a255440658f2dfa278": {
      "address": "0xBe3e673942FC817C48bDa8e6eA9d54Fa8C91c62A",
      "txHash": "0x1a67e7decf432efbaab62905bddd6d829d05558d9113ea8f86e11b05180c4910",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11589_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:53"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:55"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11589_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11589_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "0232b094fb859bb02f26279a1c14cc1db878a6985cfe1fd45d73cc60f1f5aafb": {
      "address": "0x8e98959550a16f8B4E59e6E0578Df187B3130d40",
      "txHash": "0x665debb4d7b758e3237679411242b4a6ceeeec6ef76ab6ba9f295ec5db9a101f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11589_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:53"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:55"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11589_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11589_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "a7048c48f9c8e385fdd19a936f0e2960ea31226bad22c3a0574a32535b13da5f": {
      "address": "0x6774bBf18807Ad4C45bC419Be97333E53E75a064",
      "txHash": "0x966f17147ef555425c10bba4d02a22f1d3f87afb921b8803a7cc9a97bfd697f1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11589_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:53"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:55"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11589_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11589_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c9b0900afe7af6f88c53d669826e12ea66e9514501cd11c3897148faf73cfeda": {
      "address": "0xeBEE9eC92d90a6bB6f0da6A38ae21330202F457E",
      "txHash": "0x3000f99f592c6e9765dcae88c4bbaac08bf182702b03ade7b23c66b528843951",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11589_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:53"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:55"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContractMap",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)11589_storage)",
            "src": "contracts/mstationNFT/MstationNFT.sol:61"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11589_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11589_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)11589_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "4f7d46fde74e5deb8906383ae94545067bec7354e93373232fc89c9f3e69714d": {
      "address": "0x89480E34d31745DFB348C61730A91189e854d541",
      "txHash": "0x9b3ab78d8f4ef5dd0f545a02a73eae9f16f5608dd3af99a184d1f1b89e45a369",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11589_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:53"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:55"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContractMap",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)11589_storage)",
            "src": "contracts/mstationNFT/MstationNFT.sol:61"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11589_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11589_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)11589_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "78d0d05f202de274e8a3879078f13048f2372eaa4c68e76f29ae8a7ee709ae1b": {
      "address": "0xC57eC8A48CC4711f8A8947a8283cd16a783Cf488",
      "txHash": "0x37e5436366460a3fd25615a3c0938286446776e0ffe158acb4d810ce70eb6272",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11589_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:53"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:55"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContractMap",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)11589_storage)",
            "src": "contracts/mstationNFT/MstationNFT.sol:61"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11589_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11589_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)11589_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e95056ffc8bc596baaf082920e830fdd9c70eb7b5557b62dcaa8c29300530af0": {
      "address": "0x16fD99c4e18F7DA823b4bE0BBdF41A96E9c4e3F4",
      "txHash": "0x13f82e4f69d1a08c930e7992d50e7a50b8281972ed41dd15d4525922d0f75e92",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11674_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:53"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:55"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContractMap",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)11674_storage)",
            "src": "contracts/mstationNFT/MstationNFT.sol:61"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11674_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11674_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)11674_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "bc569072a78e25927c4398c788c51df6104784ac38b3f330b0a2d8dd09385667": {
      "address": "0xA36a4a29110B49a9e478F3F2E88714716591803d",
      "txHash": "0x26532de90351f6993d0a010eb2fe5515c31c4439f30a78ac7609e30e5c08a7e6",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:50"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)10153_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)10168_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:62"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)10215_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)10153_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)10153_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)10168_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)10168_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)10215_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)10215_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ad3b723ced9fa4a3f1546a505c9df8bd9a9d8e782917a995162c5923e2c24ac0": {
      "address": "0xc635FD21102633dB2522464bBd9779F4C9956EBb",
      "txHash": "0xb0cd79f565dee4d301419d73c6b7e2c8b6722c4c7d38966f2f2af08281bc63cb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:52"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11678_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:54"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:61"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContractMap",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)11678_storage)",
            "src": "contracts/mstationNFT/MstationNFT.sol:62"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11678_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11678_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)11678_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b12210e39f45e72922ac93e4ed4e4e65119229a0811113f54d569868f46da22d": {
      "address": "0x25F61a4C113D5737c147B74dB54009Bc4504abe0",
      "txHash": "0x97fc6f44e67f97e7e9ea2de04926aaf7daf6ae77a47a8635218c9d1d2a854658",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:52"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11678_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:54"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:61"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContractMap",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)11678_storage)",
            "src": "contracts/mstationNFT/MstationNFT.sol:62"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11678_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11678_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)11678_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b2cf99f1841c05fab5ba666816bee0a74f823ff3378f69f60af19930a477fc02": {
      "address": "0x8B900DEEab0482b9d8B3ED85D878D364F7Fe44Ce",
      "txHash": "0x6d43a4e11906f03b6f6e0c18faf1bdd8784d7c3c3b6a58fda62f6e0a9c581c50",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:52"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11678_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:54"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:61"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContractMap",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)11678_storage)",
            "src": "contracts/mstationNFT/MstationNFT.sol:62"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11678_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11678_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)11678_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "bdeda83956bd6a93fee70ef72f333a7bdf9a7d8eaf69c82b70f6e6d774316794": {
      "address": "0x54f2C726eAd398DCFFe57e05207B7044794e0454",
      "txHash": "0x9bb09d9f2889e89dbe9fd35297816523e7ae648fbed56c7326a379ef98146a20",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:52"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11678_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:54"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:61"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContractMap",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)11678_storage)",
            "src": "contracts/mstationNFT/MstationNFT.sol:62"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11678_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11678_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)11678_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "65e027a234d330684a189b5cb0735fc6273f91b155faaf4309515b8ce8e6aa0c": {
      "address": "0x255E511c6Bb54743d3aD5977ab1EC20e83b7aB8f",
      "txHash": "0xfb764dbaa36e4b2f9c59f16fa6cb2f8f9a9215d668ae61fc00bc9b458ffee17b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:52"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11678_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:54"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:61"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContractMap",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)11678_storage)",
            "src": "contracts/mstationNFT/MstationNFT.sol:62"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11678_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11678_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)11678_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7b3433fc0b12dde6b05be746d1893f6394845369e0183fa558641a2f303fe6b8": {
      "address": "0x05370d1ED61b6A87eFf364373bfdcdd02E2c5231",
      "txHash": "0x02d76a1d098497d8e17b26639a5404a30c763debcc5b3d83e6d60a7a98bb5f1d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:52"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11678_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:54"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:61"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContractMap",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)11678_storage)",
            "src": "contracts/mstationNFT/MstationNFT.sol:62"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11678_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11678_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)11678_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f6c944b2ebd9c7fba427a95d18abb17f1f886fdea41805f14f9981f0520d899a": {
      "address": "0x055c7A42fA64C1cBf3C88852CE86C1EE4a2e65fB",
      "txHash": "0x8f73f38f1d4be11beca4763a3f6dfe217898f95bef051613872f70f2bcaee72a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:52"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11678_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:54"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:61"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContractMap",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)11678_storage)",
            "src": "contracts/mstationNFT/MstationNFT.sol:62"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11678_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11678_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)11678_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e96610fe25262261e0477268bfbafa74b5eb929a23f6a1cde688f4c606f0e2de": {
      "address": "0x2c91c59536b7c4Cb8Aa656969d3ad99f69F6F48c",
      "txHash": "0xd7b3fb87df9190f7b858ee993783bb48d49203cf4441ec26f9b6474c6086fd00",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:52"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11678_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:54"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:61"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContractMap",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)11678_storage)",
            "src": "contracts/mstationNFT/MstationNFT.sol:62"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11678_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11678_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)11678_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "87a6dfe90b76ed20a465bbc9d2ce899064954ad622909ba7efe9e11b92d4eea0": {
      "address": "0xCd067b10c4426f91342EcB12E8B58600958E68DB",
      "txHash": "0x70c042fa33d3974daea2df9cbbd59929eab53ad5839834957ae95f7363a9e637",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:52"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11685_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:54"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:61"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContractMap",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)11685_storage)",
            "src": "contracts/mstationNFT/MstationNFT.sol:62"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11685_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11685_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)11685_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "898f7a5a7066d77c6aa133b77988eba64320f12a6540bbc008bb7c4232690975": {
      "address": "0x7C0DB67e07CCE1F919b895841Cd2202032ED7DF7",
      "txHash": "0x7d4c15932823a93e35faa66f278775b46b32a2efb103b9820e9204970dc76f33",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:52"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11685_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:54"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:61"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContractMap",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)11685_storage)",
            "src": "contracts/mstationNFT/MstationNFT.sol:62"
          },
          {
            "contract": "MstationNFT",
            "label": "_status",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:65"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11685_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11685_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)11685_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "89a2fec6b6249190d60220f220b7d978d8936e226aefbfb6f6b8f90b678c6666": {
      "address": "0xe1D61b5139FFA4B2716058Ed052e496F138F842d",
      "txHash": "0x805f8ba7a60cec3bce94cc5189ead38a053e50d45ba7d794201488c0d2abc23c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:52"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)11816_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:54"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:61"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContractMap",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)11816_storage)",
            "src": "contracts/mstationNFT/MstationNFT.sol:62"
          },
          {
            "contract": "MstationNFT",
            "label": "_status",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:65"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)11816_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)11816_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)11816_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "fdbe8e73c155885195b2cc4dc6fd079a42dbfac5fa6b1e26bda2201c9b18a9b0": {
      "address": "0x95Fe801156a5bB0E15d9C8B3755EbD9824520e22",
      "txHash": "0x127b47a051dc549825e56f1993985d0fafafe188b94a16a7dd1cfd64a8ec81f6",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)6974",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13443_storage))",
            "src": "contracts/pve/MstationPve.sol:92"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)13466_storage)",
            "src": "contracts/pve/MstationPve.sol:94"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)13477_storage)",
            "src": "contracts/pve/MstationPve.sol:96"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13484_storage)",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)13493_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)13500_storage)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:105"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:106"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:107"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6974": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13443_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)13443_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)13443_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)13466_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)13466_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)13477_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)13477_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)13484_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)13484_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)13493_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)13493_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)13500_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)13500_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "3c33293910832cdbfd5ed20e95f7656243dbfc8a9e42f160af43435d02905539": {
      "address": "0x602d54eF3c7D18EDbD119f5BD1E601E04b522AB8",
      "txHash": "0x006f736553b6590e1329170b451fb4e41804d69cf5648db915836dec4a14fd95",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)6974",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13501_storage))",
            "src": "contracts/pve/MstationPve.sol:92"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)13524_storage)",
            "src": "contracts/pve/MstationPve.sol:94"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)13535_storage)",
            "src": "contracts/pve/MstationPve.sol:96"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13542_storage)",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)13551_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)13558_storage)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:105"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:106"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:107"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6974": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13501_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)13501_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)13501_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)13524_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)13524_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)13535_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)13535_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)13542_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)13542_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)13551_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)13551_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)13558_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)13558_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "fc41a38a57b41259c6c8472b75e6a18d826985a75793a58cde883a325ca40868": {
      "address": "0x06eE0c5036e9a409c4136d01CfF8e2DfC3698272",
      "txHash": "0x0b5cefd6b782113256f7979411f3a1bb011a33169c4d1708361d15be03fbeac3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:18"
          },
          {
            "contract": "MstationSchool",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:19"
          },
          {
            "contract": "MstationSchool",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:20"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNFTWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:21"
          },
          {
            "contract": "MstationSchool",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:22"
          },
          {
            "contract": "MstationSchool",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:23"
          },
          {
            "contract": "MstationSchool",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:24"
          },
          {
            "contract": "MstationSchool",
            "label": "upgradePlans",
            "type": "t_mapping(t_uint256,t_struct(UpgradePlan)12623_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:33"
          },
          {
            "contract": "MstationSchool",
            "label": "students",
            "type": "t_mapping(t_uint256,t_struct(Student)12635_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:40"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNumerator",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:41"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(UpgradePlan)12623_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.UpgradePlan)"
          },
          "t_struct(UpgradePlan)12623_storage": {
            "label": "struct MstationSchool.UpgradePlan",
            "members": [
              {
                "label": "fromLevel",
                "type": "t_uint16"
              },
              {
                "label": "toLevel",
                "type": "t_uint16"
              },
              {
                "label": "amountBSCS",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rateFailure",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(Student)12635_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.Student)"
          },
          "t_struct(Student)12635_storage": {
            "label": "struct MstationSchool.Student",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "5c9a1e356f4260e361329280ed9d31a7bec6e8e2daee56284268f08e3fc1aba6": {
      "address": "0xD8f868eBF91592Ec71d478FaAB9e89a4144CDc4f",
      "txHash": "0x7aa29c86068c4fd7fbf54b5f41a8313e2b15b17c3e97e053b9b2269ef0c89ed3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:18"
          },
          {
            "contract": "MstationSchool",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:19"
          },
          {
            "contract": "MstationSchool",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:20"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNFTWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:21"
          },
          {
            "contract": "MstationSchool",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:22"
          },
          {
            "contract": "MstationSchool",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:23"
          },
          {
            "contract": "MstationSchool",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:24"
          },
          {
            "contract": "MstationSchool",
            "label": "upgradePlans",
            "type": "t_mapping(t_uint256,t_struct(UpgradePlan)12743_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:33"
          },
          {
            "contract": "MstationSchool",
            "label": "students",
            "type": "t_mapping(t_uint256,t_struct(Student)12755_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:40"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNumerator",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:41"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(UpgradePlan)12743_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.UpgradePlan)"
          },
          "t_struct(UpgradePlan)12743_storage": {
            "label": "struct MstationSchool.UpgradePlan",
            "members": [
              {
                "label": "fromLevel",
                "type": "t_uint16"
              },
              {
                "label": "toLevel",
                "type": "t_uint16"
              },
              {
                "label": "amountBSCS",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rateFailure",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(Student)12755_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.Student)"
          },
          "t_struct(Student)12755_storage": {
            "label": "struct MstationSchool.Student",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "5b7f1ec323840e15630924182a98fea1b280ee3e1f66648c678ba2c95ec073ed": {
      "address": "0xfb7F52F797D4a64c99E9638C1F1dBA0aC3b649b0",
      "txHash": "0xb4fb8cb49bfa814e886753351987df040f9a09ee373c40a68bfc77110e8fbadb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:50"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)10153_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)10168_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:62"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)10215_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)10153_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)10153_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)10168_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)10168_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)10215_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)10215_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "77cd13f8e88f879d3ac9ff0e6990f59e982356901c9455f9cd3df4ce86656c68": {
      "address": "0xf983BC845104B5f3555B3e3A5b9887c806DDa143",
      "txHash": "0xe6771282f9c697895ed97d0f3fed4535f7f590175e11d6ba696b0f26d4c6d39e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:50"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)12231_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)12246_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:62"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)12293_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)12231_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)12231_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)12246_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)12246_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)12293_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)12293_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f0a9a793eb629384ec6e19f205489d57c822fabaa7272af91ebd44a037e0352b": {
      "address": "0xC8Ac32d32717cc3be8EB9971F1e555f97Ea97DD6",
      "txHash": "0x8a57e299a0a5011d2a7d65f73bcc8fbbe60fc6208d10501253aabd45e3571157",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)6974",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13501_storage))",
            "src": "contracts/pve/MstationPve.sol:92"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)13524_storage)",
            "src": "contracts/pve/MstationPve.sol:94"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)13535_storage)",
            "src": "contracts/pve/MstationPve.sol:96"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13542_storage)",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)13551_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)13558_storage)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:105"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:106"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:107"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6974": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13501_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)13501_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)13501_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)13524_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)13524_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)13535_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)13535_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)13542_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)13542_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)13551_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)13551_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)13558_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)13558_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "352bf2ee103f401b9615e8862b6d9c23dcb0528619cbc706bdc9c4d46577238f": {
      "address": "0xc07d04424389c0699c132e2272B922232bAb0d46",
      "txHash": "0xfb0175fd3117ba48aa1eadfa3d410dc46fedf7583236f32666e8a6067420a84c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)6974",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13501_storage))",
            "src": "contracts/pve/MstationPve.sol:92"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)13524_storage)",
            "src": "contracts/pve/MstationPve.sol:94"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)13535_storage)",
            "src": "contracts/pve/MstationPve.sol:96"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13542_storage)",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)13551_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)13558_storage)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:105"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:106"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:107"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6974": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13501_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)13501_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)13501_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)13524_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)13524_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)13535_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)13535_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)13542_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)13542_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)13551_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)13551_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)13558_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)13558_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c705ab7e8e729a181341494fbc9c3ea1482a026edd654dec7a15a044644134db": {
      "address": "0x0f7F20023A3704e85Fc6C8839b4F28fd7D6334c1",
      "txHash": "0x81d0fe8be52170adf2fd13386b73967b4539ea1b79b2123e5ca633e29c80e9de",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)6974",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13501_storage))",
            "src": "contracts/pve/MstationPve.sol:92"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)13524_storage)",
            "src": "contracts/pve/MstationPve.sol:94"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)13535_storage)",
            "src": "contracts/pve/MstationPve.sol:96"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13542_storage)",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)13551_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)13558_storage)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:105"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:106"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:107"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6974": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13501_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)13501_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)13501_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)13524_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)13524_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)13535_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)13535_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)13542_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)13542_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)13551_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)13551_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)13558_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)13558_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f6b9cfb46d5d08f08bae22fac3d2aeddc2889d375df72d4fc704109049ebaecf": {
      "address": "0x19C9Ae34dAb586BA45E629f61bEcECeC63989691",
      "txHash": "0x622834bacc9e662f9a3ff9ae5fa224ceb350814da13f58d3a986ee48616077c5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)6974",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13501_storage))",
            "src": "contracts/pve/MstationPve.sol:99"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)13524_storage)",
            "src": "contracts/pve/MstationPve.sol:101"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)13535_storage)",
            "src": "contracts/pve/MstationPve.sol:103"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13542_storage)",
            "src": "contracts/pve/MstationPve.sol:105"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)13551_storage)",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)13558_storage)",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)13567_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6974": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13501_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)13501_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)13501_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)13524_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)13524_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)13535_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)13535_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)13542_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)13542_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)13551_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)13551_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)13558_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)13558_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)13567_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)13567_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "33c6871cbd5863236b6e3da82490c43c862072c29d701037d5e23bdd774103d5": {
      "address": "0x8a0365AB6AebC8d5948e85DFc897FD11822d10fF",
      "txHash": "0x7f7b416bc4668e5223440b91081a4426ef7f1949fca0e996cd8db034cd0c255d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)6974",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13501_storage))",
            "src": "contracts/pve/MstationPve.sol:99"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)13524_storage)",
            "src": "contracts/pve/MstationPve.sol:101"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)13535_storage)",
            "src": "contracts/pve/MstationPve.sol:103"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13542_storage)",
            "src": "contracts/pve/MstationPve.sol:105"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)13551_storage)",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)13558_storage)",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)13567_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6974": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13501_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)13501_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)13501_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)13524_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)13524_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)13535_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)13535_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)13542_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)13542_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)13551_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)13551_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)13558_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)13558_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)13567_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)13567_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "675198fae9ee54672d3a582e5d9ce66d16cd2d86a6721d1b958433b02c9d07c6": {
      "address": "0xcFcA09F9cc9f8508d3F9A1171B70EF8594b5cc7a",
      "txHash": "0x1d2a508b9aaec6bc8473a87ead9526aedd707e775583f610467167b2f23fb9cb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)6974",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13501_storage))",
            "src": "contracts/pve/MstationPve.sol:99"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)13524_storage)",
            "src": "contracts/pve/MstationPve.sol:101"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)13535_storage)",
            "src": "contracts/pve/MstationPve.sol:103"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13542_storage)",
            "src": "contracts/pve/MstationPve.sol:105"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)13551_storage)",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)13558_storage)",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)13567_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6974": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13501_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)13501_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)13501_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)13524_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)13524_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)13535_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)13535_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)13542_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)13542_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)13551_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)13551_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)13558_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)13558_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)13567_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)13567_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "eb8ff80548f13e70bbc8c2afcd8b2c830500de1b175c26826cf7b0dfa94a2feb": {
      "address": "0x98129ACF7b2286Cb6ec5b0b1c5cc35a298912433",
      "txHash": "0x0d138eb86a92c4d29a9be53e5c596f46610f7174b6e78710a716896e825e6610",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)6974",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13501_storage))",
            "src": "contracts/pve/MstationPve.sol:99"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)13524_storage)",
            "src": "contracts/pve/MstationPve.sol:101"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)13535_storage)",
            "src": "contracts/pve/MstationPve.sol:103"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13542_storage)",
            "src": "contracts/pve/MstationPve.sol:105"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)13551_storage)",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)13558_storage)",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)13567_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6974": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13501_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)13501_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)13501_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)13524_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)13524_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)13535_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)13535_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)13542_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)13542_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)13551_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)13551_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)13558_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)13558_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)13567_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)13567_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "1f87a143e3a2c05414f36f4dc0c697aa8ed8e0c4544437f2406a34cbd0c6836d": {
      "address": "0xEA7afcb94654C7a418357872fB23B832197ca37B",
      "txHash": "0xcfac1182529ad8df09535e4755e0d2e3c7920732e03c6a45741db29203b6f452",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)4286",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)4504_storage))",
            "src": "contracts/pve/MstationPve.sol:99"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)4527_storage)",
            "src": "contracts/pve/MstationPve.sol:101"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)4538_storage)",
            "src": "contracts/pve/MstationPve.sol:103"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)4545_storage)",
            "src": "contracts/pve/MstationPve.sol:105"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)4554_storage)",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)4561_storage)",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)4570_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)4286": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)4504_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)4504_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)4504_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)4527_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)4527_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)4538_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)4538_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)4545_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)4545_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)4554_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)4554_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)4561_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)4561_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)4570_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)4570_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "1fb9453fb93da8aed199f92a27d7f861caddac452498e3bf9e578bc5b2ae414c": {
      "address": "0x8c5467ec1DD96C762D46Ac591c501c4e4EBC18bd",
      "txHash": "0xe43e584f03667820fb61a6b323e0450f6426767c51d1e98a31155780ab4e4e6e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6974",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8573_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8586_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:80"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6974": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8573_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8573_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8573_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8586_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8586_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "1b5f3723daba1a86fddc668dbc8d63d16ceaf3b71f4d5c211547b01ae276e4fa": {
      "address": "0x26A1D79Af75841Fc0Da896AF93A062742D3bA3F3",
      "txHash": "0xb90d27e8c0e29ec253f0668c4d0dbc8e626f6c3cbb69bfaec506ff4f4567debc",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6974",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8573_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8586_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:80"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6974": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8573_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8573_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8573_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8586_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8586_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "acc3e627229a15a84da091b423f56eb9cf0aeaf003aab3e94b6a70059517a27a": {
      "address": "0xa78b056f7a76149AB5493FdeAD96806864268867",
      "txHash": "0x9124d377223cc3c6add2d232034fba68413987183a0a54c07095d57ecfdee275",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6974",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8573_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8586_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:80"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6974": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8573_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8573_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8573_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8586_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8586_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "238c8e4f6517d9fb4df9f0532016af591d73472095c0a216dc19327043133dae": {
      "address": "0x35bd07c7C846258Dc67888209Bee3ab8CeD89090",
      "txHash": "0x978832a3d8a0ad62d88923a3e89df46dc99a0f71a42884447172e9f85937647b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6974",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8573_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8586_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:80"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6974": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8573_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8573_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8573_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8586_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8586_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "0c699ced3c23e91ecb86a0604634bfad154d39671c0eceef0fa3d0af135fa3de": {
      "address": "0x6436761FC8e0942e39077203b8C43846986DDF1c",
      "txHash": "0xfff266f1fede580f8c5bde8d90480d67203ddbaa540a8eaceed6de29dcc74837",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6974",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8573_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8586_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:80"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6974": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8573_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8573_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8573_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8586_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8586_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "2ffca80794a5354c1c5fe04f279b635d6f746be6175beb5133d1a259e8d1fb50": {
      "address": "0x6bEbA30eC57D966D96af38Ed9761A7A9264380B8",
      "txHash": "0x4f534a812b511741ef9a571529d1d4fd5466d3405d55a881279cc2a9b4e7b752",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6974",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8573_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8586_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:80"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6974": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8573_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8573_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8573_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8586_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8586_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "999257393828f3db029f43fc88797521bfe33028c45bd57d07451d29bf2432aa": {
      "address": "0x29683611B9400a74De550a9ECf79d106ad99Df34",
      "txHash": "0xa9279ab4fccbd9415bb128f37cc3c9ad37c2b3cb21ff067bbb9f62811b594202",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6974",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8573_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8586_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:80"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6974": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8573_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8573_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8573_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8586_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8586_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d0fcde63bab00b4694dd361b16d83e2237d5f74becb88ead7d38281fa4d7f427": {
      "address": "0xD625eb860761D874C20D64b70048c04ac0dBD771",
      "txHash": "0x0b0307c941a7918c401d21751cb915add60b1e62eb550d03ffa303480eae95a2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6974",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8573_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8586_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:80"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6974": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8573_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8573_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8573_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8586_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8586_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "0c34d9707f1540c488829c04cb5b6752c99456935d476960b19d37e27918e275": {
      "address": "0x9e37fAF7b995f24D32874FbE99e8565110961622",
      "txHash": "0xf7ff78b831a38b4344fd2afa841e73b42ece84e0807ebb305f0cca334a6c443d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6974",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8573_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8586_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:80"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6974": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8573_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8573_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8573_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8586_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8586_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "dcac187c8974e8932dd107e7fe2b042c78e9cab67e745dbb8c3fc3bc564ae011": {
      "address": "0xA75a55b46841A69F8aE8dd60b4b57692C8E0687F",
      "txHash": "0xb2e9623f8ee815be88b40d1ed33c278bcf02311e9f96ec16e753e48a1317da38",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)6974",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8573_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8586_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:80"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6974": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)8573_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)8573_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)8573_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8586_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)8586_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "09ba90ccab97dc3a109cd3b7cccb237883b62a579abcf18e7e3cd7fc20c69438": {
      "address": "0xBed81771a8aaa895BA80723A5D33aDbC064646E9",
      "txHash": "0xa6ec62a34ab21628e5f725738ef117df0ec1dbea4e3e8b292c9219c29b4bd260",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)6974",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13591_storage))",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)13614_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)13625_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13632_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)13641_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)13648_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)13657_storage)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13632_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)13641_storage))",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)13667_storage",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)13662_storage)",
            "src": "contracts/pve/MstationPve.sol:134"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6974": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13591_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)13591_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)13591_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)13614_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)13614_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)13625_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)13625_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)13632_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)13632_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)13641_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)13641_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)13648_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)13648_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)13657_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)13657_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)13641_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)13667_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)13662_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)13662_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e826dc39b012253fb6d5a5a8139ebfb8f471bb801fdc4519bf42c4f6624c5d19": {
      "address": "0xeC5A65fe849420ED11304d37202D748D43F2Bc0d",
      "txHash": "0xd512ec8fb74d99f281e66262571d5946b582270065dd8f21168bfb9857a16c05",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)6974",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13591_storage))",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)13614_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)13625_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13632_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)13641_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)13648_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)13657_storage)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13632_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)13641_storage))",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)13667_storage",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)13662_storage)",
            "src": "contracts/pve/MstationPve.sol:134"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6974": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13591_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)13591_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)13591_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)13614_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)13614_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)13625_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)13625_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)13632_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)13632_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)13641_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)13641_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)13648_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)13648_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)13657_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)13657_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)13641_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)13667_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)13662_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)13662_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "37c72060643cf770a6aede77b7020ecbd86fa5f233abab49c9e5265a056682f3": {
      "address": "0x8548aBB251A5b25d270299Bbf2Dc0DE27b7Ac6c2",
      "txHash": "0xdb764ebcc1f1b55913f5d08365b2da2b8bdbc5332d64680c37dbf66e8e110f7f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)6974",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13591_storage))",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)13614_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)13625_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13632_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)13641_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)13648_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)13657_storage)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13632_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)13641_storage))",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)13667_storage",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)13662_storage)",
            "src": "contracts/pve/MstationPve.sol:134"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6974": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13591_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)13591_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)13591_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)13614_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)13614_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)13625_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)13625_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)13632_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)13632_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)13641_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)13641_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)13648_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)13648_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)13657_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)13657_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)13641_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)13667_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)13662_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)13662_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "5ce0a0de617a4cde178e0791dcb29b88ed3f196845c2faf0ca800f17f325ac43": {
      "address": "0xbA7815b7A4e889f42031654C744f5f2F8Edcdcd3",
      "txHash": "0xc97f96756af5a9040a5a6d144c22a0ec39a02b4453519830ff0956f05a9eee34",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)6974",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13591_storage))",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)13614_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)13625_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13632_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)13641_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)13648_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)13657_storage)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13632_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)13641_storage))",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)13667_storage",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)13662_storage)",
            "src": "contracts/pve/MstationPve.sol:134"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6974": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13591_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)13591_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)13591_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)13614_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)13614_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)13625_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)13625_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)13632_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)13632_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)13641_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)13641_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)13648_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)13648_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)13657_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)13657_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)13641_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)13667_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)13662_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)13662_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "5c8fd3766a96131e00a9ad7f1e0df717d356fab20ef99fb6268cdecb216081a1": {
      "address": "0x49B303b332931DE2272218F41212172334E9cD17",
      "txHash": "0x2c03abca143c5ee0d6a3cbdaaa0bbb4b9912000d9faabb4a5e06f23d53dc4b0e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)6974",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13591_storage))",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)13614_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)13625_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13632_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)13641_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)13648_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)13657_storage)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13632_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)13641_storage))",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)13667_storage",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)13662_storage)",
            "src": "contracts/pve/MstationPve.sol:134"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6974": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13591_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)13591_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)13591_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)13614_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)13614_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)13625_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)13625_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)13632_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)13632_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)13641_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)13641_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)13648_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)13648_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)13657_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)13657_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)13641_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)13667_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)13662_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)13662_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "530fce6c899419614c93c1309973e8271214f479a8542e650eb66b537a680f94": {
      "address": "0xF4343Ab9AB8eeB71a942786e3B86354aaF7451C9",
      "txHash": "0x60e02aa2a66ea2516f0dd1ac32659cf12aae6f3fcaaaaf8d23f062503dda974d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)6974",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13591_storage))",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)13614_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)13625_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13632_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)13641_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)13648_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)13657_storage)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13632_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)13641_storage))",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)13667_storage",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)13662_storage)",
            "src": "contracts/pve/MstationPve.sol:134"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6974": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13591_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)13591_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)13591_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)13614_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)13614_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)13625_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)13625_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)13632_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)13632_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)13641_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)13641_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)13648_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)13648_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)13657_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)13657_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)13641_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)13667_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)13662_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)13662_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8ff886634afc9bc820909d7a7cd4094a339c6ba3f14a943739e593a9c65a08d2": {
      "address": "0x12D6826be35A6F1b54f86204EB22cd7E1C9aA812",
      "txHash": "0xe5b12d448353b5c4215052dab832ca5420488c1ecef5606ddcdb28aecd90d165",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)6974",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13591_storage))",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)13614_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)13625_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13632_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)13641_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)13648_storage)",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)13657_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)13632_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)13641_storage))",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)13667_storage",
            "src": "contracts/pve/MstationPve.sol:133"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)13662_storage)",
            "src": "contracts/pve/MstationPve.sol:135"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)6974": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)13591_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)13591_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)13591_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)13614_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)13614_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)13625_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)13625_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)13632_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)13632_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)13641_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)13641_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)13648_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)13648_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)13657_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)13657_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)13641_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)13667_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)13662_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)13662_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7de43b2de9cac4e7029975ce3d64f80b70378d66fb9d7c53a767cd7adcdfce61": {
      "address": "0x77CC6E12B63b9883D638315edB126D5da7e5d5F9",
      "txHash": "0x65805c3bcb0ff420378af3e44637b06d2c15bab45be5957856946e7337338e82",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8951",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15552_storage))",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15575_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15586_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15593_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15602_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15609_storage)",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15618_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15593_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15602_storage))",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15628_storage",
            "src": "contracts/pve/MstationPve.sol:133"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15623_storage)",
            "src": "contracts/pve/MstationPve.sol:135"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8951": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15552_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15552_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15552_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15575_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15575_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15586_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15586_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15593_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15593_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15602_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15602_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15609_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15609_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15618_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15618_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15602_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15628_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15623_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15623_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "47cfe47128ecc9c94d0f22f285bc80571af6a919f80d3fcade01d9d84a4d1056": {
      "address": "0x20F73FCB822f56F0AEA614CD67901FBDE6Bb5eb0",
      "txHash": "0xfddce6d0fb4916366ef486265f5302e8d6de64072c95ddcd7b8f59d8bcc440a8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:18"
          },
          {
            "contract": "MstationSchool",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:19"
          },
          {
            "contract": "MstationSchool",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:20"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNFTWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:21"
          },
          {
            "contract": "MstationSchool",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:22"
          },
          {
            "contract": "MstationSchool",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:23"
          },
          {
            "contract": "MstationSchool",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:24"
          },
          {
            "contract": "MstationSchool",
            "label": "upgradePlans",
            "type": "t_mapping(t_uint256,t_struct(UpgradePlan)12743_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:33"
          },
          {
            "contract": "MstationSchool",
            "label": "students",
            "type": "t_mapping(t_uint256,t_struct(Student)12755_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:40"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNumerator",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:41"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(UpgradePlan)12743_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.UpgradePlan)"
          },
          "t_struct(UpgradePlan)12743_storage": {
            "label": "struct MstationSchool.UpgradePlan",
            "members": [
              {
                "label": "fromLevel",
                "type": "t_uint16"
              },
              {
                "label": "toLevel",
                "type": "t_uint16"
              },
              {
                "label": "amountBSCS",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rateFailure",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(Student)12755_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.Student)"
          },
          "t_struct(Student)12755_storage": {
            "label": "struct MstationSchool.Student",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "68a1a3baa46e8bdea4494d1af8126fdefd1c0de1b49b16633a0c0ca11505b0b2": {
      "address": "0x2e0882912220FaC0996F6AF4AE4018Bb993f0ac9",
      "txHash": "0x29c2c4626f3a54d02af8221feecf61cb9a92248fdf6ed61a4a71bd239272680c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:19"
          },
          {
            "contract": "MstationSchool",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:20"
          },
          {
            "contract": "MstationSchool",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:21"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNFTWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:22"
          },
          {
            "contract": "MstationSchool",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:23"
          },
          {
            "contract": "MstationSchool",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:24"
          },
          {
            "contract": "MstationSchool",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:25"
          },
          {
            "contract": "MstationSchool",
            "label": "upgradePlans",
            "type": "t_mapping(t_uint256,t_struct(UpgradePlan)14072_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:34"
          },
          {
            "contract": "MstationSchool",
            "label": "students",
            "type": "t_mapping(t_uint256,t_struct(Student)14084_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:41"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNumerator",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:42"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(UpgradePlan)14072_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.UpgradePlan)"
          },
          "t_struct(UpgradePlan)14072_storage": {
            "label": "struct MstationSchool.UpgradePlan",
            "members": [
              {
                "label": "fromLevel",
                "type": "t_uint16"
              },
              {
                "label": "toLevel",
                "type": "t_uint16"
              },
              {
                "label": "amountBSCS",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rateFailure",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(Student)14084_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.Student)"
          },
          "t_struct(Student)14084_storage": {
            "label": "struct MstationSchool.Student",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "64d24f8964f10e859a92411e07c5cea67dc42029ec8051c53ab30e3ec6805f4e": {
      "address": "0xf8bdA7EBAd4A47127c15E4C7F13Ef6264eDdDd98",
      "txHash": "0xf7329ef4b34c81a2e3ca7dd3b2f9d6d81f94c76b928aa72a0168b296458f0250",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:19"
          },
          {
            "contract": "MstationSchool",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:20"
          },
          {
            "contract": "MstationSchool",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:21"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNFTWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:22"
          },
          {
            "contract": "MstationSchool",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:23"
          },
          {
            "contract": "MstationSchool",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:24"
          },
          {
            "contract": "MstationSchool",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:25"
          },
          {
            "contract": "MstationSchool",
            "label": "upgradePlans",
            "type": "t_mapping(t_uint256,t_struct(UpgradePlan)14072_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:34"
          },
          {
            "contract": "MstationSchool",
            "label": "students",
            "type": "t_mapping(t_uint256,t_struct(Student)14084_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:41"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNumerator",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:42"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(UpgradePlan)14072_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.UpgradePlan)"
          },
          "t_struct(UpgradePlan)14072_storage": {
            "label": "struct MstationSchool.UpgradePlan",
            "members": [
              {
                "label": "fromLevel",
                "type": "t_uint16"
              },
              {
                "label": "toLevel",
                "type": "t_uint16"
              },
              {
                "label": "amountBSCS",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rateFailure",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(Student)14084_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.Student)"
          },
          "t_struct(Student)14084_storage": {
            "label": "struct MstationSchool.Student",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "c0793e94548cd0dff80d7a0d34c34150af53936b0a081e2eba87b24a06a890bb": {
      "address": "0x69bc2A3f88319FC9FFc3E3340a18934E001BcE97",
      "txHash": "0x04ddf5f5e7a28ec8cdaf0e964dad647ec0d0cc5fe5750bc9d6d02ae5c0db9513",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:19"
          },
          {
            "contract": "MstationSchool",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:20"
          },
          {
            "contract": "MstationSchool",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:21"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNFTWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:22"
          },
          {
            "contract": "MstationSchool",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:23"
          },
          {
            "contract": "MstationSchool",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:24"
          },
          {
            "contract": "MstationSchool",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:25"
          },
          {
            "contract": "MstationSchool",
            "label": "upgradePlans",
            "type": "t_mapping(t_uint256,t_struct(UpgradePlan)14072_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:34"
          },
          {
            "contract": "MstationSchool",
            "label": "students",
            "type": "t_mapping(t_uint256,t_struct(Student)14084_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:41"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNumerator",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:42"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(UpgradePlan)14072_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.UpgradePlan)"
          },
          "t_struct(UpgradePlan)14072_storage": {
            "label": "struct MstationSchool.UpgradePlan",
            "members": [
              {
                "label": "fromLevel",
                "type": "t_uint16"
              },
              {
                "label": "toLevel",
                "type": "t_uint16"
              },
              {
                "label": "amountBSCS",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rateFailure",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(Student)14084_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.Student)"
          },
          "t_struct(Student)14084_storage": {
            "label": "struct MstationSchool.Student",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "f8d3149bd282e8fcde819cb3d20c45427e25e9e407cd5d4b3c1b0c79e577b8a7": {
      "address": "0xfdEC2A45B1016e9abead9e81C037D9950E9E36c2",
      "txHash": "0x953d76eecff3641a1093f79b1a93358d63b129cea576e0e5692a8b063a2c0fc7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:19"
          },
          {
            "contract": "MstationSchool",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:20"
          },
          {
            "contract": "MstationSchool",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:21"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNFTWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:22"
          },
          {
            "contract": "MstationSchool",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:23"
          },
          {
            "contract": "MstationSchool",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:24"
          },
          {
            "contract": "MstationSchool",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:25"
          },
          {
            "contract": "MstationSchool",
            "label": "upgradePlans",
            "type": "t_mapping(t_uint256,t_struct(UpgradePlan)14722_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:34"
          },
          {
            "contract": "MstationSchool",
            "label": "students",
            "type": "t_mapping(t_uint256,t_struct(Student)14734_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:41"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNumerator",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:42"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(UpgradePlan)14722_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.UpgradePlan)"
          },
          "t_struct(UpgradePlan)14722_storage": {
            "label": "struct MstationSchool.UpgradePlan",
            "members": [
              {
                "label": "fromLevel",
                "type": "t_uint16"
              },
              {
                "label": "toLevel",
                "type": "t_uint16"
              },
              {
                "label": "amountBSCS",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rateFailure",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(Student)14734_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.Student)"
          },
          "t_struct(Student)14734_storage": {
            "label": "struct MstationSchool.Student",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "3adf65884364f8e8fae5088ce7204538ecf5a92e4cabbb7ba0ae1bc642e8e566": {
      "address": "0xE24211D3Aa15E643d071426052dF8a4346DF2c94",
      "txHash": "0x3436aef08475a95eaa7e5c29a588bf984885dcb49128ee627e19de9e36268748",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)744",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)744",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)744",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:52"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)1751_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:54"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:61"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContractMap",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)1751_storage)",
            "src": "contracts/mstationNFT/MstationNFT.sol:62"
          },
          {
            "contract": "MstationNFT",
            "label": "_status",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:65"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)744": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)1751_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)1751_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)1751_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f696aa505e7834361489f7d7fd89e0d94317300b34f8efb3266a148467f16359": {
      "address": "0x43c464B72c12d3F141F8878223E04B9a6CD12593",
      "txHash": "0xa00d45b0cf13f2c691f4847d6c50f414fed1abcedffef345e0d7562a27f20cc7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:52"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)13144_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:54"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:61"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContractMap",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)13144_storage)",
            "src": "contracts/mstationNFT/MstationNFT.sol:62"
          },
          {
            "contract": "MstationNFT",
            "label": "_status",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:65"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)13144_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)13144_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)13144_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "08594bb0936e4b8896d1310f676e2f581409f0958adea99e71c1e6cac196ab75": {
      "address": "0x3F94451E5429D576EfFcaB07336436c6D03cE3e6",
      "txHash": "0x639192e32d91bc665a5854e03514d7fac91beccc6fd44b00c49509f2fa6839e2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8951",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15575_storage))",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15598_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15609_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15616_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15625_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15632_storage)",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15641_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15616_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15625_storage))",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15651_storage",
            "src": "contracts/pve/MstationPve.sol:133"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15646_storage)",
            "src": "contracts/pve/MstationPve.sol:135"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8951": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15575_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15575_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15575_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15598_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15598_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15609_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15609_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15616_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15616_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15625_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15625_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15632_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15632_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15641_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15641_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15625_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15651_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15646_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15646_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "1b84b2f228f658da93897a48a54ad317b6b234c4eeae026de5cb1daf89c00cb6": {
      "address": "0x0bF3caC6b8FE4e9ae6FA710A60bA4A9dcABf1Df0",
      "txHash": "0x360ba5810a187eb48b2e0b5af465f4589a44e306853c448672e1e3c72f7455eb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "_token",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/vesting/TokenVestingSchedule.sol:45"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "vestingSchedulesIds",
            "type": "t_array(t_bytes32)dyn_storage",
            "src": "contracts/vesting/TokenVestingSchedule.sol:47"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "vestingSchedules",
            "type": "t_mapping(t_bytes32,t_struct(VestingSchedule)20881_storage)",
            "src": "contracts/vesting/TokenVestingSchedule.sol:48"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "vestingSchedulesTotalAmount",
            "type": "t_uint256",
            "src": "contracts/vesting/TokenVestingSchedule.sol:49"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "holdersVestingCount",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/vesting/TokenVestingSchedule.sol:50"
          }
        ],
        "types": {
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_struct(VestingSchedule)20881_storage)": {
            "label": "mapping(bytes32 => struct TokenVestingSchedule.VestingSchedule)"
          },
          "t_struct(VestingSchedule)20881_storage": {
            "label": "struct TokenVestingSchedule.VestingSchedule",
            "members": [
              {
                "label": "initialized",
                "type": "t_bool"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "cliff",
                "type": "t_uint256"
              },
              {
                "label": "start",
                "type": "t_uint256"
              },
              {
                "label": "duration",
                "type": "t_uint256"
              },
              {
                "label": "slicePeriodSeconds",
                "type": "t_uint256"
              },
              {
                "label": "revocable",
                "type": "t_bool"
              },
              {
                "label": "amountTotal",
                "type": "t_uint256"
              },
              {
                "label": "released",
                "type": "t_uint256"
              },
              {
                "label": "revoked",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ff0c8a72606a31c218dc69d3c7ceebc2cad05c904bf3c8971ff5feaaa10a111b": {
      "address": "0x3d3FD4D7da71aE0Ab1a62F44ee78a4992656B189",
      "txHash": "0x516e524db3859b20a819b87144d05438e9807ce4f7457d78f9b31dbfafe7a2e1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)5458_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "BSCDToken",
            "label": "pause",
            "type": "t_bool",
            "src": "contracts/token/BSCD_Upgradeable.sol:17"
          },
          {
            "contract": "BSCDToken",
            "label": "blacklist",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/token/BSCD_Upgradeable.sol:18"
          },
          {
            "contract": "BSCDToken",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/token/BSCD_Upgradeable.sol:19"
          },
          {
            "contract": "BSCDToken",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/token/BSCD_Upgradeable.sol:20"
          },
          {
            "contract": "BSCDToken",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "contracts/token/BSCD_Upgradeable.sol:21"
          },
          {
            "contract": "BSCDToken",
            "label": "_name",
            "type": "t_string_storage",
            "src": "contracts/token/BSCD_Upgradeable.sol:22"
          },
          {
            "contract": "BSCDToken",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "contracts/token/BSCD_Upgradeable.sol:23"
          },
          {
            "contract": "BSCDToken",
            "label": "recoveryAdmin",
            "type": "t_address",
            "src": "contracts/token/BSCD_Upgradeable.sol:25"
          },
          {
            "contract": "BSCDToken",
            "label": "recoveryAdminCandidate",
            "type": "t_address",
            "src": "contracts/token/BSCD_Upgradeable.sol:26"
          },
          {
            "contract": "BSCDToken",
            "label": "recoveryAdminKeyHash",
            "type": "t_bytes32",
            "src": "contracts/token/BSCD_Upgradeable.sol:27"
          },
          {
            "contract": "BSCDToken",
            "label": "admin",
            "type": "t_address",
            "src": "contracts/token/BSCD_Upgradeable.sol:28"
          },
          {
            "contract": "BSCDToken",
            "label": "timelockPeriod",
            "type": "t_uint256",
            "src": "contracts/token/BSCD_Upgradeable.sol:29"
          },
          {
            "contract": "BSCDToken",
            "label": "losslessTurnOffTimestamp",
            "type": "t_uint256",
            "src": "contracts/token/BSCD_Upgradeable.sol:30"
          },
          {
            "contract": "BSCDToken",
            "label": "isLosslessOn",
            "type": "t_bool",
            "src": "contracts/token/BSCD_Upgradeable.sol:31"
          },
          {
            "contract": "BSCDToken",
            "label": "lossless",
            "type": "t_contract(ILssController)20480",
            "src": "contracts/token/BSCD_Upgradeable.sol:32"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_contract(ILssController)20480": {
            "label": "contract ILssController"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)5458_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)5458_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5157_storage"
              }
            ]
          },
          "t_struct(Set)5157_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "867c01cc42148fe99ea38cab605b86bf58d2c8a8b72628d28b0d3f354d357ea3": {
      "address": "0x82F4681A8799df0A3203F0d00E430565c5393814",
      "txHash": "0x0245e1fa87711864c3cc1ce7dd15185d7059aeb583981d0450a537dc1f318588",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)5458_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "BSCDToken",
            "label": "pause",
            "type": "t_bool",
            "src": "contracts/token/BSCD_Upgradeable.sol:17"
          },
          {
            "contract": "BSCDToken",
            "label": "blacklist",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/token/BSCD_Upgradeable.sol:18"
          },
          {
            "contract": "BSCDToken",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/token/BSCD_Upgradeable.sol:19"
          },
          {
            "contract": "BSCDToken",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/token/BSCD_Upgradeable.sol:20"
          },
          {
            "contract": "BSCDToken",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "contracts/token/BSCD_Upgradeable.sol:21"
          },
          {
            "contract": "BSCDToken",
            "label": "_name",
            "type": "t_string_storage",
            "src": "contracts/token/BSCD_Upgradeable.sol:22"
          },
          {
            "contract": "BSCDToken",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "contracts/token/BSCD_Upgradeable.sol:23"
          },
          {
            "contract": "BSCDToken",
            "label": "recoveryAdmin",
            "type": "t_address",
            "src": "contracts/token/BSCD_Upgradeable.sol:25"
          },
          {
            "contract": "BSCDToken",
            "label": "recoveryAdminCandidate",
            "type": "t_address",
            "src": "contracts/token/BSCD_Upgradeable.sol:26"
          },
          {
            "contract": "BSCDToken",
            "label": "recoveryAdminKeyHash",
            "type": "t_bytes32",
            "src": "contracts/token/BSCD_Upgradeable.sol:27"
          },
          {
            "contract": "BSCDToken",
            "label": "admin",
            "type": "t_address",
            "src": "contracts/token/BSCD_Upgradeable.sol:28"
          },
          {
            "contract": "BSCDToken",
            "label": "timelockPeriod",
            "type": "t_uint256",
            "src": "contracts/token/BSCD_Upgradeable.sol:29"
          },
          {
            "contract": "BSCDToken",
            "label": "losslessTurnOffTimestamp",
            "type": "t_uint256",
            "src": "contracts/token/BSCD_Upgradeable.sol:30"
          },
          {
            "contract": "BSCDToken",
            "label": "isLosslessOn",
            "type": "t_bool",
            "src": "contracts/token/BSCD_Upgradeable.sol:31"
          },
          {
            "contract": "BSCDToken",
            "label": "lossless",
            "type": "t_contract(ILssController)20474",
            "src": "contracts/token/BSCD_Upgradeable.sol:32"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_contract(ILssController)20474": {
            "label": "contract ILssController"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)5458_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)5458_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5157_storage"
              }
            ]
          },
          "t_struct(Set)5157_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d727c14a83a9e4b4b5a16f8928f5b68e1e4745bec021926b69f917bf99f0815b": {
      "address": "0xEEAE152A6ACda088451E9dF3A15263eC2bd55C2f",
      "txHash": "0x259b3e8b4df594099253221194cf436b57461a11cc599782b1f9bf4a2a83012f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:19"
          },
          {
            "contract": "MstationSchool",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:20"
          },
          {
            "contract": "MstationSchool",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:21"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNFTWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:22"
          },
          {
            "contract": "MstationSchool",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:23"
          },
          {
            "contract": "MstationSchool",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:24"
          },
          {
            "contract": "MstationSchool",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:25"
          },
          {
            "contract": "MstationSchool",
            "label": "upgradePlans",
            "type": "t_mapping(t_uint256,t_struct(UpgradePlan)15145_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:34"
          },
          {
            "contract": "MstationSchool",
            "label": "students",
            "type": "t_mapping(t_uint256,t_struct(Student)15157_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:41"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNumerator",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:42"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:44"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(UpgradePlan)15145_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.UpgradePlan)"
          },
          "t_struct(UpgradePlan)15145_storage": {
            "label": "struct MstationSchool.UpgradePlan",
            "members": [
              {
                "label": "fromLevel",
                "type": "t_uint16"
              },
              {
                "label": "toLevel",
                "type": "t_uint16"
              },
              {
                "label": "amountBSCS",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rateFailure",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(Student)15157_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.Student)"
          },
          "t_struct(Student)15157_storage": {
            "label": "struct MstationSchool.Student",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "a1e433189b22d95f28d0f7f024db489aacd267bb1c8a82e6f48a5ad81332b10a": {
      "address": "0xEEC684fBfea42e56612A2bFCA910B93DC5850F30",
      "txHash": "0x0a2c057aad5c398ba9b03138b8550b97ed8e307cb4017dc1a95b89ff4196e18b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8951",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:38"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15574_storage))",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15597_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15608_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15615_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15624_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15631_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15640_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15615_storage)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15624_storage))",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15650_storage",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15645_storage)",
            "src": "contracts/pve/MstationPve.sol:136"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8951": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15574_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15574_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15574_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15597_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15597_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15608_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15608_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15615_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15615_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15624_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15624_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15631_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15631_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15640_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15640_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15624_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15650_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15645_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15645_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "fe50176d406113c3a714b0c40fa41eb36c30e9669afa2f3cc5d403451edf5cdd": {
      "address": "0xf9e23dB679af4544f75326766d2b7Bdde22a48C7",
      "txHash": "0xe25241b0746a249668a0087b9c83a693839d26e3bd4b48ea436e7aba554c6362",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8951",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:38"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15574_storage))",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15597_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15608_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15615_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15624_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15631_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15640_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15615_storage)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15624_storage))",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15650_storage",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15645_storage)",
            "src": "contracts/pve/MstationPve.sol:136"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8951": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15574_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15574_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15574_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15597_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15597_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15608_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15608_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15615_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15615_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15624_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15624_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15631_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15631_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15640_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15640_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15624_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15650_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15645_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15645_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "79943b0c096e7f77046b233f7d9595c647c77d7feca73c3373a1a67b08687bb7": {
      "address": "0xF679dE4Be05D82D3dEe152f7EDe0116F25a96097",
      "txHash": "0x7cd538ff56e6dc7d7625571898ccb6d021683d5a7dafcb7999ab7f5a4cca7bb0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8951",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:38"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15574_storage))",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15597_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15608_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15615_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15624_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15631_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15640_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15615_storage)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15624_storage))",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15650_storage",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15645_storage)",
            "src": "contracts/pve/MstationPve.sol:136"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8951": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15574_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15574_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15574_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15597_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15597_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15608_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15608_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15615_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15615_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15624_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15624_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15631_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15631_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15640_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15640_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15624_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15650_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15645_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15645_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "152cbefb805a601d10811ca3601253215324210a23500a6086efb7b22edee592": {
      "address": "0xEB6d778A373D9A3Fa213bbc9682c73A7b4242a2a",
      "txHash": "0x5348c43dc2b4c80242a63651fe4a475d22a179c4f4b8b5017d9ddbf950afa527",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8951",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:38"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15587_storage))",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15610_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15621_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15628_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15637_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15644_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15653_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15628_storage)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15637_storage))",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15663_storage",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15658_storage)",
            "src": "contracts/pve/MstationPve.sol:136"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8951": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15587_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15587_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15587_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15610_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15610_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15621_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15621_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15628_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15628_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15637_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15637_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15644_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15644_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15653_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15653_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15637_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15663_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15658_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15658_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e80d90904cd73edb34a10933b01dad6fc9c20d128a5ac9e6aed70d8a50784ef1": {
      "address": "0x97656f9412dCdeEA2d52ae9E7339eD07410B2fEF",
      "txHash": "0x4237a122e0c85a18e7bf27adb2c9d046bf3436a4cbc80579b081e27fc6b0fae5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:50"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)12250_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)12265_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:62"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)12312_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)12250_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)12250_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)12265_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)12265_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)12312_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)12312_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8a20603746b7087706a166219831c545154fa423e9f55220af8a006683241d7a": {
      "address": "0x1047Cb1cFbaD060A36157e5A75CBDaD1bCcfc290",
      "txHash": "0xa3781b171062ad28bc3053fab1b798aa8e633baa00ed3a04c580ea1e4e0f2167",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8951",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:38"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15587_storage))",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15610_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15621_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15628_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15637_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15644_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15653_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15628_storage)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15637_storage))",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15663_storage",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15658_storage)",
            "src": "contracts/pve/MstationPve.sol:136"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8951": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15587_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15587_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15587_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15610_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15610_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15621_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15621_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15628_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15628_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15637_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15637_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15644_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15644_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15653_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15653_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15637_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15663_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15658_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15658_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "4309ca700f78302f7fc344e77ab0b7073faa167ed1dd5e77c739f0c8979813bb": {
      "address": "0x531a392B41F0b6B0607d014095353BAAB8C8abDE",
      "txHash": "0xf99742bccff6da61d10e66829d757588908ed16d548b9d6318f9e6b5c923588d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8951",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:38"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15587_storage))",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15610_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15621_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15628_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15637_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15644_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15653_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15628_storage)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15637_storage))",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15663_storage",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15658_storage)",
            "src": "contracts/pve/MstationPve.sol:136"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8951": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15587_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15587_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15587_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15610_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15610_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15621_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15621_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15628_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15628_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15637_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15637_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15644_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15644_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15653_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15653_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15637_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15663_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15658_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15658_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "3be1320eca4990eecb5b0f9720cda405355590ec757caf82f592b9f90211c931": {
      "address": "0x21d9652cCa0EB29AC4f7DB20a1d56843eA54d7b8",
      "txHash": "0xe0066f131ed69aec1e4421538601c2a3131b65a6594f3bf08ff8dfda01d02886",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8951",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:38"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15587_storage))",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15610_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15621_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15628_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15637_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15644_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15653_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15628_storage)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15637_storage))",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15663_storage",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15658_storage)",
            "src": "contracts/pve/MstationPve.sol:136"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8951": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15587_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15587_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15587_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15610_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15610_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15621_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15621_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15628_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15628_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15637_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15637_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15644_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15644_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15653_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15653_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15637_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15663_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15658_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15658_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "06697311b2a3626996f725518b6ca02c62c488f9286f633a2a3a23fcf813c154": {
      "address": "0xa786DDD2De6DCFcD145785fEAe256243B226aE94",
      "txHash": "0xdb845554bb2d64f3962c214da7998db923dcb1f47e407b074bdd6c252ce9bc6b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8951",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:38"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15587_storage))",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15610_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15621_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15628_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15639_storage)",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15646_storage)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15655_storage)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15628_storage)",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15639_storage))",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15665_storage",
            "src": "contracts/pve/MstationPve.sol:135"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15660_storage)",
            "src": "contracts/pve/MstationPve.sol:137"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8951": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15587_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15587_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15587_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15610_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15610_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15621_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15621_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15628_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15628_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15639_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15639_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15646_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15646_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15655_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15655_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15639_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15665_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15660_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15660_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "5ef9e24e4043ac58b509c14c79570e95d5e186bb616e5a84341999d2f4166c19": {
      "address": "0x30C1a00f4fF735a9536e51b7a0A25C65Da4199EB",
      "txHash": "0xc3b2b7160847eafffd0ac43da170a740835c6f3f8a119b3d2757f86cba478cc8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8951",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:38"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15587_storage))",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15610_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15621_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15628_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15639_storage)",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15646_storage)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15655_storage)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15628_storage)",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15639_storage))",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15665_storage",
            "src": "contracts/pve/MstationPve.sol:135"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15660_storage)",
            "src": "contracts/pve/MstationPve.sol:137"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8951": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15587_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15587_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15587_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15610_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15610_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15621_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15621_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15628_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15628_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15639_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15639_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15646_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15646_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15655_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15655_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15639_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15665_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15660_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15660_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "5a067b4dc3347a8969b153caf8281cf682fc1e7327059e6c5050df79c08d1907": {
      "address": "0x1C2ffB3a0CFE56Bc45F36608Ab2211a078B54c7A",
      "txHash": "0x46d498cfccb904470c1e556757bde996d16e1c4e52005ae5383fddfd1f4f1937",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MStationTreasury",
            "label": "pause",
            "type": "t_bool",
            "src": "contracts/treasury/MStationTreasury.sol:23"
          },
          {
            "contract": "MStationTreasury",
            "label": "mstIssued",
            "type": "t_uint256",
            "src": "contracts/treasury/MStationTreasury.sol:25"
          },
          {
            "contract": "MStationTreasury",
            "label": "mstMonthlyEmission",
            "type": "t_uint256",
            "src": "contracts/treasury/MStationTreasury.sol:27"
          },
          {
            "contract": "MStationTreasury",
            "label": "mstTokenAddress",
            "type": "t_address",
            "src": "contracts/treasury/MStationTreasury.sol:29"
          },
          {
            "contract": "MStationTreasury",
            "label": "bscsTokenAddress",
            "type": "t_address",
            "src": "contracts/treasury/MStationTreasury.sol:31"
          },
          {
            "contract": "MStationTreasury",
            "label": "router",
            "type": "t_address",
            "src": "contracts/treasury/MStationTreasury.sol:33"
          },
          {
            "contract": "MStationTreasury",
            "label": "pathSwap",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/treasury/MStationTreasury.sol:35"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8a8ea70ac086acf9deeb4fe149ca4b818ed77ef55546e90886ca95fbe5dc5bcc": {
      "address": "0xfC7E9130FE27a5007Be0D12982682cEE41a134CE",
      "txHash": "0x793b274af8f526dde29c64a523078a2ddd1121a556f3b9d306af9fdd48d91d93",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MStationTreasury",
            "label": "pause",
            "type": "t_bool",
            "src": "contracts/treasury/MStationTreasury.sol:23"
          },
          {
            "contract": "MStationTreasury",
            "label": "mstIssued",
            "type": "t_uint256",
            "src": "contracts/treasury/MStationTreasury.sol:25"
          },
          {
            "contract": "MStationTreasury",
            "label": "mstMonthlyEmission",
            "type": "t_uint256",
            "src": "contracts/treasury/MStationTreasury.sol:27"
          },
          {
            "contract": "MStationTreasury",
            "label": "mstTokenAddress",
            "type": "t_address",
            "src": "contracts/treasury/MStationTreasury.sol:29"
          },
          {
            "contract": "MStationTreasury",
            "label": "bscsTokenAddress",
            "type": "t_address",
            "src": "contracts/treasury/MStationTreasury.sol:31"
          },
          {
            "contract": "MStationTreasury",
            "label": "router",
            "type": "t_address",
            "src": "contracts/treasury/MStationTreasury.sol:33"
          },
          {
            "contract": "MStationTreasury",
            "label": "pathSwap",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/treasury/MStationTreasury.sol:35"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d07ba74113dd9edfeba2038232ffcde74bdd10bdc00c40ebdf32df6b4a845bbb": {
      "address": "0x0fF15136D53080B284cFCDB731e8a1Ca7DA24728",
      "txHash": "0xa05b35bc9cacb9cc384e7fd9ba6efe437f76930f4995e1ede23ee5b7fdf982e3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MStationTreasury",
            "label": "pause",
            "type": "t_bool",
            "src": "contracts/treasury/MStationTreasury.sol:23"
          },
          {
            "contract": "MStationTreasury",
            "label": "mstIssued",
            "type": "t_uint256",
            "src": "contracts/treasury/MStationTreasury.sol:25"
          },
          {
            "contract": "MStationTreasury",
            "label": "mstMonthlyEmission",
            "type": "t_uint256",
            "src": "contracts/treasury/MStationTreasury.sol:27"
          },
          {
            "contract": "MStationTreasury",
            "label": "mstTokenAddress",
            "type": "t_address",
            "src": "contracts/treasury/MStationTreasury.sol:29"
          },
          {
            "contract": "MStationTreasury",
            "label": "bscsTokenAddress",
            "type": "t_address",
            "src": "contracts/treasury/MStationTreasury.sol:31"
          },
          {
            "contract": "MStationTreasury",
            "label": "router",
            "type": "t_address",
            "src": "contracts/treasury/MStationTreasury.sol:33"
          },
          {
            "contract": "MStationTreasury",
            "label": "pathSwap",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/treasury/MStationTreasury.sol:35"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ab660c7f5c28676a0b18bf1f3cc323765f1ea159c03f45e373e575c0a41664db": {
      "address": "0x6631A169aa14a9a1f39C7F5E1aC3ba3d760f2b03",
      "txHash": "0xb0625a667f65c5925e1dbabe6a05e43d99e4e1bd119cf10fe836880cfe7d2e20",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MStationTreasury",
            "label": "pause",
            "type": "t_bool",
            "src": "contracts/treasury/MStationTreasury.sol:23"
          },
          {
            "contract": "MStationTreasury",
            "label": "mstIssued",
            "type": "t_uint256",
            "src": "contracts/treasury/MStationTreasury.sol:25"
          },
          {
            "contract": "MStationTreasury",
            "label": "mstMonthlyEmission",
            "type": "t_uint256",
            "src": "contracts/treasury/MStationTreasury.sol:27"
          },
          {
            "contract": "MStationTreasury",
            "label": "mstTokenAddress",
            "type": "t_address",
            "src": "contracts/treasury/MStationTreasury.sol:29"
          },
          {
            "contract": "MStationTreasury",
            "label": "bscsTokenAddress",
            "type": "t_address",
            "src": "contracts/treasury/MStationTreasury.sol:31"
          },
          {
            "contract": "MStationTreasury",
            "label": "router",
            "type": "t_address",
            "src": "contracts/treasury/MStationTreasury.sol:33"
          },
          {
            "contract": "MStationTreasury",
            "label": "pathSwap",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/treasury/MStationTreasury.sol:35"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "99f86a4f48050fa3825caa99862b029ab9d763c2dec66d09e39428ece1f1e736": {
      "address": "0x6c9DbB8A5900F38d4B305963D2f1D6B56ac81eb0",
      "txHash": "0x9b443455c174715e4f5e2e21167277c0a5229bd907275b7525fc12d887558f4f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8913",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:38"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15982_storage))",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16005_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16016_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16023_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16034_storage)",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16041_storage)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16050_storage)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16023_storage)",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16034_storage))",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16060_storage",
            "src": "contracts/pve/MstationPve.sol:135"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16055_storage)",
            "src": "contracts/pve/MstationPve.sol:137"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:139"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:140"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:142"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8913": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15982_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15982_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15982_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16005_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16005_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16016_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16016_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16023_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16023_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16034_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16034_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16041_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16041_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16050_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16050_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16034_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16060_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16055_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16055_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "13ac0783620416974b9cca21eafecfb0e8ccca11599711e630f47bdd7c829cc7": {
      "address": "0x3933DEB60B1221380BEB2B5589E8A7B4E1Dc71D4",
      "txHash": "0xce067968285d4c858afb1e673540e8b85e6c6957b99297f9b446642d48d9d8b2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:19"
          },
          {
            "contract": "MstationSchool",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:20"
          },
          {
            "contract": "MstationSchool",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:21"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNFTWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:22"
          },
          {
            "contract": "MstationSchool",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationSchool.sol:23"
          },
          {
            "contract": "MstationSchool",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:24"
          },
          {
            "contract": "MstationSchool",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationSchool.sol:25"
          },
          {
            "contract": "MstationSchool",
            "label": "upgradePlans",
            "type": "t_mapping(t_uint256,t_struct(UpgradePlan)15145_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:34"
          },
          {
            "contract": "MstationSchool",
            "label": "students",
            "type": "t_mapping(t_uint256,t_struct(Student)15157_storage)",
            "src": "contracts/mstationNFT/MstationSchool.sol:41"
          },
          {
            "contract": "MstationSchool",
            "label": "burnNumerator",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:42"
          },
          {
            "contract": "MstationSchool",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationSchool.sol:44"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_struct(UpgradePlan)15145_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.UpgradePlan)"
          },
          "t_struct(UpgradePlan)15145_storage": {
            "label": "struct MstationSchool.UpgradePlan",
            "members": [
              {
                "label": "fromLevel",
                "type": "t_uint16"
              },
              {
                "label": "toLevel",
                "type": "t_uint16"
              },
              {
                "label": "amountBSCS",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rateFailure",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(Student)15157_storage)": {
            "label": "mapping(uint256 => struct MstationSchool.Student)"
          },
          "t_struct(Student)15157_storage": {
            "label": "struct MstationSchool.Student",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "0fffe8b700dd2968e7365b201774f8ae52088f2df91a33ba7fc5bb9431e6cf1c": {
      "address": "0x60DbD24D3acABBbb6f312c8BAb0Ad68125E0b7c7",
      "txHash": "0xc0ab8921367858ef3b969588600e6bb01c7338f31322066b87880bf5aa0fb2e8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MStationTreasury",
            "label": "pause",
            "type": "t_bool",
            "src": "contracts/treasury/MStationTreasury.sol:23"
          },
          {
            "contract": "MStationTreasury",
            "label": "mstIssued",
            "type": "t_uint256",
            "src": "contracts/treasury/MStationTreasury.sol:25"
          },
          {
            "contract": "MStationTreasury",
            "label": "mstMonthlyEmission",
            "type": "t_uint256",
            "src": "contracts/treasury/MStationTreasury.sol:27"
          },
          {
            "contract": "MStationTreasury",
            "label": "mstTokenAddress",
            "type": "t_address",
            "src": "contracts/treasury/MStationTreasury.sol:29"
          },
          {
            "contract": "MStationTreasury",
            "label": "bscsTokenAddress",
            "type": "t_address",
            "src": "contracts/treasury/MStationTreasury.sol:31"
          },
          {
            "contract": "MStationTreasury",
            "label": "router",
            "type": "t_address",
            "src": "contracts/treasury/MStationTreasury.sol:33"
          },
          {
            "contract": "MStationTreasury",
            "label": "pathSwap",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/treasury/MStationTreasury.sol:35"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "0991379d0535e212ae520cb070c75df035ea8ccda230c0fb36e3d27ce3d6ec25": {
      "address": "0x1EFb236B6aac902c3D71d17eDB735c0b3C75a1e4",
      "txHash": "0x1d3670fc0af6c474ac84b9fefd5ba081aea719aa807698b9a731a4b3d9059d9f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MStationTreasury",
            "label": "pause",
            "type": "t_bool",
            "src": "contracts/treasury/MStationTreasury.sol:23"
          },
          {
            "contract": "MStationTreasury",
            "label": "mstIssued",
            "type": "t_uint256",
            "src": "contracts/treasury/MStationTreasury.sol:25"
          },
          {
            "contract": "MStationTreasury",
            "label": "mstMonthlyEmission",
            "type": "t_uint256",
            "src": "contracts/treasury/MStationTreasury.sol:27"
          },
          {
            "contract": "MStationTreasury",
            "label": "mstTokenAddress",
            "type": "t_address",
            "src": "contracts/treasury/MStationTreasury.sol:29"
          },
          {
            "contract": "MStationTreasury",
            "label": "bscsTokenAddress",
            "type": "t_address",
            "src": "contracts/treasury/MStationTreasury.sol:31"
          },
          {
            "contract": "MStationTreasury",
            "label": "router",
            "type": "t_address",
            "src": "contracts/treasury/MStationTreasury.sol:33"
          },
          {
            "contract": "MStationTreasury",
            "label": "pathSwap",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/treasury/MStationTreasury.sol:35"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d602e0abc5d7a86b860a9a8986ea9e0f2e5852241dac0a53ef664c3d57120233": {
      "address": "0xED3a9FE863660B03a391a206182B0dA54D783292",
      "txHash": "0x454bcc689fb20894fdb4c059562f72c576f32f35828e0f9c9b555febc31cccd1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10512_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)10525_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:80"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:82"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:83"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10512_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10512_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10512_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)10525_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)10525_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ea2082b0a0c965d9bfab1d42ffe7c1a8676598bfda321080d6f93d8c29771334": {
      "address": "0xd188512A3e07d4de0E6CF230c6B8d876Cf24b5F1",
      "txHash": "0xceb6e2b63ce829b06f417e371934808e7308245b1db15b710301d25ddaf24574",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:37"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:38"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15839_storage))",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15862_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15873_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15880_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15891_storage)",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15898_storage)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15907_storage)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15880_storage)",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15891_storage))",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15917_storage",
            "src": "contracts/pve/MstationPve.sol:135"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15912_storage)",
            "src": "contracts/pve/MstationPve.sol:137"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:139"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:140"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:142"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15839_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15839_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15839_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15862_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15862_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15873_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15873_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15880_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15880_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15891_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15891_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15898_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15898_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15907_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15907_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15891_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15917_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15912_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15912_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ff377958fafb8282e1d3236797c3f5b551e34498583c2b99d4728acb174c3314": {
      "address": "0x8801BCC6CB2DFD0CC97E23528FAcd80fb88177eB",
      "txHash": "0x123a7619dde7ad72c5cde20f79dd9f702176b3bfca60fa807cff8f4be138875f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:50"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)12934_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)12949_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:62"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)12996_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)12934_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)12934_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)12949_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)12949_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)12996_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)12996_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c0de732308c20a20893025cdf49b3cb355c2c65572a264f835a1574cf05b8a66": {
      "address": "0x7A060973Ab7d9A85b62E2b8f3aE017ec603eE46f",
      "txHash": "0xf1cb35dd612943c348e7ace1c9ac6c8ae6e82f5bfb338664876f821f4f781c97",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:37"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)14635_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:52"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:54"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:55"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContractMap",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)14635_storage)",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          },
          {
            "contract": "MstationNFT",
            "label": "_status",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:63"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)14635_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)14635_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)14635_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8ad70ea9c9ae42e42800fb1819b88975143aa1aef42c984d5fcd126ebd000116": {
      "address": "0xFAAe574335C8456e8150149f088429A1e00cE232",
      "txHash": "0xeffd49fecdb9ccfe1d8b8afff2207045c49ef850d5cbadaa2c89835ba46cbcf3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:37"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)14628_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:52"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:54"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:55"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContractMap",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)14628_storage)",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          },
          {
            "contract": "MstationNFT",
            "label": "_status",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:63"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)14628_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)14628_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)14628_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f80f7302b346229578d8b9695f4dc3b3171ceb63d3c399495f1fb1fcc1a29d1c": {
      "address": "0x99b1E34a14Ce654e41705e4Eff70ecfD8c49230C",
      "txHash": "0x5e2d9694a784ab7ac271bb77244cb7a4c7005f146dcac0936605f50ed1793418",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:37"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:38"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:39"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:40"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:41"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:42"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:43"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:44"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:45"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)13936_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:52"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:54"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:55"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContractMap",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)13936_storage)",
            "src": "contracts/mstationNFT/MstationNFT.sol:60"
          },
          {
            "contract": "MstationNFT",
            "label": "_status",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:63"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)13936_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)13936_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)13936_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "3f9e790c148f118229dd6d68945b411d5939c124f0822212d28ab4232a9ac396": {
      "address": "0xec109727306973b29373a116497a6D419E49dd5C",
      "txHash": "0xab78ed3aca4fe6516bf0d40820f644eb89447f9bc81dff59b1b789f8aef5e8fa",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10512_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)10525_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:80"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:82"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:83"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10512_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10512_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10512_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)10525_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)10525_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "36d56c2cbcd568ab6337f00147bf0457ac84a99745385847bad54916f33ec442": {
      "address": "0xBD20aba1d76D6f51A19979F131258aB9ed62a91a",
      "txHash": "0x75390f4b37699bfc499f7219a2af16181afb33348bf18ee7cf0199581d7a2276",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10512_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)10525_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:80"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:82"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:83"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10512_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10512_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10512_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)10525_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)10525_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "40a1c19f8fe491a2ff8ccb044fd104cbce067595b13a0faa48dc4f9d3ca4efb9": {
      "address": "0x65197AAD43aa41082C88f286E2DAfCAe6D744a21",
      "txHash": "0xed39e5c7d86e183c594c0dea1e83ffcf7efaa0ef2a6b9f0b035fa905027feb56",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10512_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)10525_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:80"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:82"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:83"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10512_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10512_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10512_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)10525_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)10525_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d2edffee66cc1cc21c809a7cba2a41fa717968e49548f2ffbd8989e6f65127a4": {
      "address": "0xDe6F7F818720589d27Fa10c1DaFFE07F4ca2C33D",
      "txHash": "0x65dce1c807a00d5da0b82c80b5cd79c4c9f8006b453854e60f6ff003bb33cf71",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:50"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)12337_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)12352_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:62"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)12399_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)12337_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)12337_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)12352_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)12352_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)12399_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)12399_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "99a3dcdc90dfa7e16c30b6d6c56f9dce1240c15cb6e6fc32b79612e9a22db907": {
      "address": "0x2392348FEfD31C1F812bcC8b68B36a2F8AA290D6",
      "txHash": "0x8c755b787725669f375ca6a2924306708f55f5ad63481c51ac83752bef9cb68a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10537_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)10550_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:80"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:82"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:83"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10537_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10537_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10537_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)10550_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)10550_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "82c6a369bb989e1bda604452f9e279a64d963e31c72250f111ecde8347d489b2": {
      "address": "0x0ee9CB871ecDB85A44b8111EC696E33ae77d4a23",
      "txHash": "0x379d3e3b5b7243601d48a83b5aa2dea09a1ceaea5f03b5a27b1d6ac6fd7f4b20",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17647_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:15"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:16"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:17"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17647_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17647_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "5a08180086e7c111f8526021f0de69fcab8eadd15a2ea44f7d922a37eb670d2b": {
      "address": "0xAbC385ef6e2E9306A6bC405d44b7321549526981",
      "txHash": "0x4a239a7dfa912d1cc8a160c43a3055d1021f32c5d3796863fd535e1fd0d77e52",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17634_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17639_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17634_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17634_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17639_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17639_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17639_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "51b0f5c0e676f265f4858ee5aa8bdc0bd80fd61fc18264bae3abc20662ba4a88": {
      "address": "0x47CA00148462F5437AB5D905D9F20Ebef5C204ED",
      "txHash": "0x328f8c6593751b341423ff9a52aa44439448b6d354a48f453fc4747e7c810f8d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17670_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17675_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "2e65b81585d403fb8b105c38f1e3b78451520d4bbdefce68fc09bfd1af0b5a84": {
      "address": "0xBC5ea3B7Fc4e9eEaeDbD2757ae514e9B9929c38E",
      "txHash": "0xb581ec72348fb8a68ff599bdb576de05a78e97c301e38a3f0ff84c52a019cd56",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15813_storage))",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15836_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15847_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15854_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15865_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15872_storage)",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15881_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15854_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15865_storage))",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15891_storage",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15886_storage)",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:136"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:137"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:138"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:139"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15813_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15813_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15813_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15836_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15836_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15847_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15847_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15854_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15854_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15865_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15865_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15872_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15872_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15881_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15881_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15865_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15891_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15886_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15886_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7e64d1b930cc4eaf0ed045bea82615bbb2d8ed8eec2a58af79778b9e0421e278": {
      "address": "0x00A482F035143e1e27E4E2DC6FE98a789337D1a0",
      "txHash": "0x536afa03aeca849444fd0ef6b32987373e0f8c9ccfc2e4a5c2294ac0b04ae8da",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15801_storage))",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15824_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15835_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15842_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15853_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15860_storage)",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15869_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15842_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15853_storage))",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15879_storage",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15874_storage)",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:136"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:137"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:138"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:139"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15801_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15801_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15801_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15824_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15824_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15835_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15835_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15842_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15842_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15853_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15853_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15860_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15860_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15869_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15869_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15853_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15879_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15874_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15874_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "323f9a164a6bdc42686f97174228cabe767242057c79eb38eccc0cdd873ae1e0": {
      "address": "0xdF75a19768e6376e5120F981193Fd32A73f28D23",
      "txHash": "0x6ae6f6f0865934bfd6433990e92a52c467072a727bb8b9555e1a0349731703b1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17670_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17675_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "7e3184d38e0efd3eb230070525101b9b67e12fe15d5e9637c2be7c9b893d6583": {
      "address": "0xadf2E4B6BD1ff2BE7B835Cc71e4115b2C62b78e4",
      "txHash": "0x89674e4e8623cfbfd9c45680d22ffb7fb1d7b5049fd0d21aaa7cb38d462767db",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17670_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17675_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "d10e76cec1f61fbc5ae6279e5ff0e652101e8b8ced5abd263be8c037c13c198c": {
      "address": "0x8489f25E714F8dC978B883E7B0b66852776E4354",
      "txHash": "0x0d603fcefe5c160916f2e558ffb19b3c270e0af1c490b46983099de21cf0c9fe",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17670_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17675_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "c8872dd595d0765baed4fa00964b0f770ee600db3da6bae3245c4e45b383b071": {
      "address": "0xd7c5D9e3048e62048b122252188FEbaa8aD38F01",
      "txHash": "0x38e3bfcf86f304d61216737e78651db65095840231d7139f4fec38b09eb06905",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17670_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17675_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "e9a4188c5d030bfbbe11e83f943d51c7992aa13209544b0ab74b3a006c2cf866": {
      "address": "0xa44E17280f45F48144bd937A0070287A4B21f39a",
      "txHash": "0x50eb40f6fc6b0ffdba3f800e24b1c8267efd546411b993da8a75a80176730048",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17670_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17675_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "7ec904aa431e899d5cd94e2cd48b2dc5cb72e01bfdf49e90a4c0114c9f29ef96": {
      "address": "0xc711f141fEcBb56B48aD94a9e570e3Cb73F41aC2",
      "txHash": "0xe8d056e68bb248f34bdfd7ba20b3a03c5154f5d8b84e19abc5a2b6790b469d65",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17670_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17675_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "83ae00a066964bac14a4a5f4065494b83e7c85ab055c2116574b992f1746ed00": {
      "address": "0x1A9Fc0264ca6fEaf008ea7f4F1e7189cB956182A",
      "txHash": "0xe5561249e7ab0d268ad41407e5680b8c4ea3a1482aa817d8e8388d7e7653e88b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17670_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17675_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "9eb0c5c242e2478b70b028e28ae83e82b6c2f965726ad2e4d5d169f1f8c60237": {
      "address": "0x84Fd314AfB73c6523f881C182b55053523d7423E",
      "txHash": "0x810eb693f4aa23d0b953054249f6193fc3ed263766f68becf14db786920acd28",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17670_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17675_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "eec411976d7660e2e33e3d8b715292ef1289b60996c39b2128a6dc080927a738": {
      "address": "0xbf74F20049B3a6609Bbc6B4013F94fe33f363712",
      "txHash": "0x534fe069255d2fe9ae4fde916d3445e0e1bc2fe6a4c460ce47ebe6c9cdc1a793",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17670_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17675_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "1cef24c2e10916c6b32e81816a400cc44df1b5bf113976d5f90c1130110cacd2": {
      "address": "0xC2200848B8021C309B44cdbDe7dE3Aef93637031",
      "txHash": "0xc69b1c7e180f4c8c9d43a72ca5fe20ebef16a6e71d2692573f0398eab90ded21",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17670_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17675_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "9ff0ce27530595405cabf669c780b8ef5bc61299987de287bfb056a801a1212d": {
      "address": "0xCBDe1a9705cD29b5051edf5248589B9ec514cfcb",
      "txHash": "0x23814427333b46e23f9b43cde56c6db5ff63326402e4c36c8a40c8244b5de211",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17670_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17675_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "e1151a9d204b6e18d7d8a95d40a3b3a9f910b8b4237135737c66edf745b1577c": {
      "address": "0x4404d4f417319CDABA867358cacd2f64B1F23f9E",
      "txHash": "0x5ec3bacaa5288fc25bca13af28273576d42dd3541cbde52002c3e2eadd3c1ccf",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17670_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17675_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "82dee5f1311b7aaa6a0223249d27ce66c7d4cc1eca50bed0d4ae7ef0d215f23c": {
      "address": "0x5fFE2Edc7579D50e4E85b90Ece9e6418D4a103AC",
      "txHash": "0x4405cbfa2477703f69be10bfae3871e4f17ea71ed69f2249278191d815aec992",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17670_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17675_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "b4c09afe8ce6c2f43e173612174770a1670ad7e72013d4c509c40f93013fb7ef": {
      "address": "0xB93fC37Ad645658CC40141318139BDc3fC2B753B",
      "txHash": "0x1b5acc51e1b82380ae43c40c9757234a12b7d791d804f1cf09fef08c6aabd475",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17670_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17675_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "d7ef5dac99608000dcd745a4561cb12210f01e5fd2f0c664c0899ca3ffae3ea3": {
      "address": "0x8D00Bf0c63502aa5ddFFbD8B8968ccFdd0619048",
      "txHash": "0x241ba02d125e0eb99f9336635f1b7b2a1ec6e4a679adf1c93d81efd554b00a4d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17670_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17675_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "a91a3bdf7831b68bec603e78b72ef1c3ec797ec11576930f6b8fe9ca2935d65d": {
      "address": "0xA7FA7C970203c13c7BC2c3cc8fa46c816fd29c6E",
      "txHash": "0xe68ec6923ba767bdf52c808766ff3e03d53a48cc70866b4fa77fb878fe4a0ae3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17670_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17675_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "eb199091307b87d23e7a904408317ad8de04199238e3d856a0c2e2b6a742ff73": {
      "address": "0xf41bF77280b707A070c6CD3f18DEea64F85a5463",
      "txHash": "0x07693e2f58f8b61260a51b0cbd83ef1089da5615fa9a8dd89d01d9fb086034d0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17670_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17675_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "b2918a851c61ad05c3e57cef57be8741586869fe1af622fff0dbe4c4e2afa2ab": {
      "address": "0x843E00C8D79e6A33F7a2A56D6F0424Af0Ea1Ca4D",
      "txHash": "0x29b62493d1afbacb91369163c083220ab03b9443d8686b7af7a21167df98de83",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17670_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17675_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "3c7983fa1920491e7de51c23345c6e1d98b51e3ec4d249f51565a6e679b93721": {
      "address": "0xF6d01fB76f7ed85B68A051567456eeD53c177C8B",
      "txHash": "0xa1d9210c0ee98d5975e7b116b03d0cfdd707457c5c41651383ef30cc956f796d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17670_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17675_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "7969d6997acc7fecac871d8b5c72fbc11ae0608f275590b03e1071b6bd830703": {
      "address": "0xc485d1188f92B58baAD0bBd9845A2d12FE94760F",
      "txHash": "0xd2f4831a1a50c3fbf17942877f605218a2bad7382ec09549ea5d05f2664eaf41",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17670_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17675_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "b744bdb7bfa36a7876123060a54c4aa2c0e8348cda5c31a36f530b61e2e4dc3e": {
      "address": "0x329FE3CFa58D7C11bdFB8e153fC2e2b34a044042",
      "txHash": "0xf682ebe2b1491488a44c1f022357eebd96829a30f045bd8af810918a4fe19f83",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17670_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17675_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "3965378505fd8d5e98cf0c4e79194fa3d97bdfc0152dc4bcb03bed3eb218758a": {
      "address": "0xE17f1937550CfE85Da3De0a5dE889902145084ae",
      "txHash": "0x32db6e856f0b0f0400d24f33a27ad6f642bd2b2263d587e0bccaacf01d2a3ced",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17670_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17670_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17675_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17675_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "3bdb37d17de0b0809f3d1f8b5c68b091088236627d8770f09513c4ad07802bdc": {
      "address": "0x20c3B53Db2c2aD89273EB140A47CF66648ec50Fd",
      "txHash": "0xfc5fb1b9a31c1554f2a56015a401fd9deb0745183c8af4fe88b3df21c930e5a1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17671_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17676_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17671_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17671_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17676_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17676_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17676_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "86c4824cfdcb9b01e6265a774033c3c98c286ba7e3b9783b1b985aa676728689": {
      "address": "0x17fc3D419aB862287958C44549e782aF160e2cf8",
      "txHash": "0x1a38afcfa9cfda49da4136a9153d0a90a5e07a5f4110fe100f9425524ed0825d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17716_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17721_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17716_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17716_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17721_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17721_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17721_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "5587aef44f04815f70ac787bc6c7ba0f0da614ce40301d2e22d9e6263206c7f5": {
      "address": "0xd5b3DeabCDAA0614889b0A9D70fA43E4e4b4C947",
      "txHash": "0x18575d9a1f428ba98cd6752a06d14140a08ef6affcea21b60cc99101678b8759",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17716_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17721_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17716_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17716_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17721_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17721_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17721_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "27fa17f4cb5a32c4f33f733e282fb678b6de955ec6a08d58ca3be40d47f9dba8": {
      "address": "0x17EaA327C4fD6c1Cbf8Bf1894E5A07e11bb53002",
      "txHash": "0x18f770dbf24c6bf0a0b93d37e4540d5acf24fd3e023409d98d6e18c3d52dbca6",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17716_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17721_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17716_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17716_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17721_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17721_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17721_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "cd955b512077da1530fd1283add01727b4010da1c06ccee6861c6fa7ce840f71": {
      "address": "0xF287DfBBc1334157706D9DdCd88dE4f20f3930Bb",
      "txHash": "0xeafdd6ca9f2934e41f134d3892b6c410285b08b95c492c558b068505e86a076f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17716_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17721_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17716_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17716_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17721_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17721_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17721_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "2add2141a4e343b3c617c2cf5aab8bc6f6b620e8296cf2e1764adedcde433063": {
      "address": "0x51E7011590246a7864B2EAE64010256255c91E86",
      "txHash": "0x60067a51c91594a99ec92b6da74779169cefc1aee2702754e7d0fac38983d3b0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)17767_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17772_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint16,t_struct(RewardConfig)17767_storage)": {
            "label": "mapping(uint16 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(RewardConfig)17767_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17772_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17772_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17772_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "b803123667171d2dfb9800f220af31bba524ada6c6ccce38028fe44b51e2a06a": {
      "address": "0x9f67Fc07ebEd1cf317d48573720E4Ead3218Efc2",
      "txHash": "0xc11b2225eacf1baccda0119e70ff440aac43d7fa7e1efd25ff9242c01dbd3591",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)17767_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17772_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)17767_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)17767_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17772_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17772_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17772_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "4da0eb0eb6d82040159cc9918349eead6844c6cea50a54f5d3af5436f03090ca": {
      "address": "0x3AcbBac7136165Bb85F2c74C7f51dfC1B4647444",
      "txHash": "0x582b80a219dafc175b8dcc13a5834b9350c0cdb4219870aed82fb56dc9db36d0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)17767_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17772_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)17767_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)17767_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17772_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17772_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17772_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "a166ef9bf10b83b7af6b45a4776be20aa6fe3498ca56c855199420b96de03a82": {
      "address": "0x7506A718F372803E480183b82371fe164C1c2a95",
      "txHash": "0xcc6b8d1eab2e9dfd64348aa119898cdd6431173c3f6bf6365f8d3ea69d2506c1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)17767_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17772_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)17767_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)17767_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17772_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17772_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17772_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "d181f7a0a5495e3b55dcc4724cb88eb65e7491bb8a298c1c09dc3710c7fcbfdb": {
      "address": "0xCFEC291271d8745BA18DfDE2831D72b475136B79",
      "txHash": "0x15ec38de9bb17d499de23db5c29b1c36cb2d50a97feb7e5075a491d82704b834",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)17767_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17772_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)17767_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)17767_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17772_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17772_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17772_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "dd9d6b7c6b924f987f7ddffb5f51b6954c8556c598a64cc7abfa7ea035b6cbe0": {
      "address": "0x34CEA8688929b6c32a13641903aB696e82fb7405",
      "txHash": "0x212bd9cadf38c693065a235784992ea131a2f4258b852ba7f6bdfa40db221636",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)17732_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17737_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_array(t_array(t_uint256)dyn_storage)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:24"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)17732_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)17732_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17737_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17737_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17737_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_array(t_uint256)dyn_storage)dyn_storage": {
            "label": "uint256[][]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "ac319f241cf2f1b57a758ee4cd0ca2600ddb574a9184b708058260e719dfdb3c": {
      "address": "0x515A1CaF4f5226c24DE3B959B3F8CD03B73CDaf3",
      "txHash": "0xf8ec3f4f4c9cedb3e957cc3437072309bf18bbc5c1a43ccd67bb6881371994d0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)17734_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17739_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:24"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)17734_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)17734_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17739_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17739_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17739_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "f9a966460a35a116c6a5b4fd7554022d229f94b28fe4e48d9d5f3346e7355ed0": {
      "address": "0xc4df3792BF01FeD39F6bFcf16c47d59AD100703F",
      "txHash": "0xbfaa81133d34cee6398ccf5fa907a5d5a19e59bc5d9b84f5e6915a05dcb0b8d2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)17734_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "poolRewardMonsters2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17739_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:24"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)17734_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)17734_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PoolRewardMonster)17739_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster))"
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)17739_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)17739_storage": {
            "label": "struct MstationPvEUtils.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "e557b22ccbd3594d91f019633f42661b5805957caf4460d296ba3fd76569085f": {
      "address": "0x28A067f269f4B009E233533568CA3dc2095aA88E",
      "txHash": "0x07740849d1ab04abee28a985f5c5afbb92e86d7ac34b36838c8d98f7331831b4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15898_storage))",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15921_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15932_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15939_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15950_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15957_storage)",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15966_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15939_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15950_storage))",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15976_storage",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15971_storage)",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:136"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:137"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:138"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:139"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:140"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15898_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15898_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15898_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15921_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15921_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15932_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15932_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15939_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15939_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15950_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15950_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15957_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15957_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15966_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15966_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15950_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15976_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15971_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15971_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f386cd1280564bb5113b5cf9bb46a9e5de4bab373fdaf8c46ab1c6ad9ed6909b": {
      "address": "0xDAFb13cFE8fe9CBcbC5364Bc6C1BAE7578C69F97",
      "txHash": "0x7d82747a48ea59465a7fa5e3346190d448e31f5cdc125f0674f05990111195b8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15898_storage))",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15921_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15932_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15939_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15950_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15957_storage)",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15966_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15939_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15950_storage))",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15976_storage",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15971_storage)",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:136"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:137"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:138"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:139"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:140"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15898_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15898_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15898_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15921_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15921_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15932_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15932_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15939_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15939_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15950_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15950_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15957_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15957_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15966_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15966_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15950_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15976_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15971_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15971_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ef9d98e51c34877afe3751559089580497d3b1264a3e022d2fd690ff2a8e749e": {
      "address": "0x55521eD906074Dc65356afE97060D1535e2B7B70",
      "txHash": "0xa59f100f6ea4f263f9b5389e91a4a81bf4ac63cba59d3a4917e41f1898b3f104",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15895_storage))",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15918_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15929_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15936_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15947_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15954_storage)",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15963_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15936_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15947_storage))",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)15973_storage",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15968_storage)",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:136"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:137"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:138"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:139"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:141"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15895_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15895_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15895_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15918_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15918_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15929_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15929_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15936_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15936_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15947_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15947_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15954_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15954_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15963_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15963_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15947_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)15973_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15968_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15968_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "9f755ac4d906321652ac73fb94ece0e43aea9f72e1616dc7f62b99f45ea7c928": {
      "address": "0x3f4a378b2e278A6892F4972B35f5E8307424B4ad",
      "txHash": "0x30d60de62915f3aada1682f1cfe64c878afeabe5c51c67454da077f589796b8e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15923_storage))",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)15946_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)15957_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15964_storage)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)15975_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)15982_storage)",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)15991_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)15964_storage)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15975_storage))",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16001_storage",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)15996_storage)",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:133"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:135"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:136"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:137"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15923_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15923_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15923_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)15946_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)15946_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)15957_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)15957_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)15964_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)15964_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)15975_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)15975_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)15982_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)15982_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)15991_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)15991_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)15975_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16001_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)15996_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)15996_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "2505c6d45ceafe0f512ffe2f2247870c6db6854a27a981eda337f9d03b7bf4fa": {
      "address": "0x43c08fb8fA7E5B14f4eAA4a2Ef45e2D91441d415",
      "txHash": "0x0d74e39392d942d4fc5cd12c8a52be3463869c6abc75d199e4c73dbeba814209",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:50"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)12468_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)12483_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:62"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)12530_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "isTransfer",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:84"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)12468_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)12468_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)12483_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)12483_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)12530_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)12530_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "6cf1afbc2d1f4ba91253dd68124e27a4a53809cd959dcab4b8ff4422fd3ba0a0": {
      "address": "0x0DCE87E9C797A005dB31489FfB5f1F730005Be64",
      "txHash": "0x6695216d777adaa41cb1a315413ba3f21dfee9ff905fc5d6b94acb4d7bb0b25d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:50"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)12686_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)12701_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:62"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)12748_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "isTransfer",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:84"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)12686_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)12686_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)12701_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)12701_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)12748_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)12748_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "6a7737d03359c5f2a43a916cc5030819635a2c554b058eac5b3c122b299becf8": {
      "address": "0x8E897c3c2aA5A263d3a9239D5bA874fb2F932BC0",
      "txHash": "0x14d9d6b7b0cab2b4f7412a039845d87162b5cbf01518ebfd0c1ed70a54f82f9b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)17521_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:19"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:21"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)17521_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)17521_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "71f3704950d0941e09b2a79e91e10f8d4d9b35efc4bffe9633575ae571d2052e": {
      "address": "0xF754F2f186dD2A5290226D767B85d0345417be10",
      "txHash": "0x59a5e9087b4f4b9fa517455ca37aceca85d7e68cca2350bd5f49bd85fff7a04a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10537_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)10550_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:80"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:82"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:83"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10537_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10537_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10537_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)10550_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)10550_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7f17262aab82999c3aea8e36c9c11e88a30e65409c884501b9009537127061f3": {
      "address": "0x2DCcCF7d9bcFce622a7D2070330faA669Aa1543a",
      "txHash": "0xe63d5082f42537d4dba9fb35f2d2f0bbe79513d9b450561ad69465d94b8e7f37",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:62"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10537_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:64"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:66"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)10550_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:68"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:70"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:71"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:74"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:76"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:78"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:80"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:82"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:83"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10537_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10537_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10537_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)10550_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)10550_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7d0bf1c2e3c2f14203654a3f2d86cb7167c0042f2778603e1e0021605d1b51d5": {
      "address": "0xAe186F1208C9786d536DC1BA7bBf1e7D9117Fe16",
      "txHash": "0x20a98cb6c31e9781b7573d307d43212b7ddf4f079af3a625f193f26ccc7ded58",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)17871_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:18"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:19"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:21"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:24"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)17871_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)17871_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "62cc2d6f959a3623298cd1c7857cc19aa4fd8b721728966896feb7b50037003e": {
      "address": "0xB917Aa6da5E5d768620B9fF3dBf8393Aa5594374",
      "txHash": "0xf1e5414bf0dc2c2122a7e7ab1c48b3c7694634d712db727329a7db110d47c278",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)17939_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:19"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:21"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:25"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)17939_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)17939_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8d25d5409ad4cc2d207e6823f5fa1ef4b24989aca6b2196d774cf8f6afd241ba": {
      "address": "0xAd5FF993fD4fbf59E9bDb1FD7495F266f9B43B39",
      "txHash": "0x30c59f7d1a13eaa865de3b2a398159fdb827d26d2db379823525ff02518f51f3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16107_storage))",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16130_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16141_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16148_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16159_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16166_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16175_storage)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16148_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16159_storage))",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16185_storage",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16180_storage)",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:133"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:134"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16107_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16107_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16107_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16130_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16130_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16141_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16141_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16148_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16148_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16159_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16159_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16166_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16166_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16175_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16175_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16159_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16185_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16180_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16180_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ccc4feeec1c4c712b3560e9f3e21da12700c6fcde9621888aa7a65179e8904a2": {
      "address": "0xc63D4B0780dD3655c1ed26fdE528CBa89447BB2F",
      "txHash": "0xec46f08aecf5d349a2fd8d9bf65bb201522e3fc960025018e092d5381c7f33ba",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16107_storage))",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16130_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16141_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16148_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16159_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16166_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16175_storage)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16148_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16159_storage))",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16185_storage",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16180_storage)",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:133"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:134"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16107_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16107_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16107_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16130_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16130_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16141_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16141_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16148_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16148_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16159_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16159_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16166_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16166_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16175_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16175_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16159_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16185_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16180_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16180_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e162f04a03c0f03e594b2133b5c9328ff9dd106adafbdd4c7ef563025cfeb7ed": {
      "address": "0x484713B9Fc5539a62cBc9b8F43a8F3fD778BBC6e",
      "txHash": "0x26755be137f084926d530a6c14e81aeb48e5fcfe8215061417c22d5539f6bed5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16107_storage))",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16130_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16141_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16148_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16159_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16166_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16175_storage)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16148_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16159_storage))",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16185_storage",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16180_storage)",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:133"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:134"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16107_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16107_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16107_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16130_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16130_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16141_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16141_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16148_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16148_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16159_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16159_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16166_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16166_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16175_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16175_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16159_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16185_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16180_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16180_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "44daaa9fbc1aaa48a96d35606b97f61cb8951844083eea3869d1ed0bff3e7d70": {
      "address": "0x6800ec28f155B14BfB987899799ca8B02dF76F07",
      "txHash": "0xa21dd68e17d7b0f600a6d549610b7b986b92bbaa3a1d88354d2156ced1c1964f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16107_storage))",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16130_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16141_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16148_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16159_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16166_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16175_storage)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16148_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16159_storage))",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16185_storage",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16180_storage)",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:133"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:134"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16107_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16107_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16107_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16130_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16130_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16141_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16141_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16148_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16148_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16159_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16159_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16166_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16166_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16175_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16175_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16159_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16185_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16180_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16180_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "130863494f21d820251f13451f02934036e7ea7523ee98c7e3d4e1e2732f9f1c": {
      "address": "0x5CF37f55e5C4478Dc81124eaaB7Fa00548E12809",
      "txHash": "0x3f71b8cbe7fa5ae3f67842fee7d31b53151eeb2221edbfb2e1862c46defdf3ac",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16114_storage))",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16137_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16148_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16155_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16166_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16173_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16182_storage)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16155_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16166_storage))",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16192_storage",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16187_storage)",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:133"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:134"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16114_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16114_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16114_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16137_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16137_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16148_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16148_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16155_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16155_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16166_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16166_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16173_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16173_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16182_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16182_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16166_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16192_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16187_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16187_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "dec81e5375fd75457a032b765043bea7cdff50457042ec94dd048c3e4ffc7f26": {
      "address": "0x22835B01347e16f746E74567AdD4286627c597E1",
      "txHash": "0x7daf2ed5872113a1766cf279cd61d16050391f53ace42a0256d4d5e1715d0892",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)17939_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:19"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:21"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:25"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)17939_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)17939_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "dd7d515fba901bf28220d380d26dbe1a23866aa11decbbef14227fc42062ba69": {
      "address": "0x31C38c56ec3D75C6e921032B4dACBc7B67af0146",
      "txHash": "0xdf74cdb7d130fa30d24e69a6bdd3ae485de2d2cf3b6700abdea82b029f2fde6e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)17939_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:19"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:21"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:25"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)17939_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)17939_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "665d239bc40a11d3477d6f3eb210a16acff034c1ea1a3b223babad57af11a629": {
      "address": "0x8329046542AF5815dc691e9B7EB1eaFc5f84Ba2A",
      "txHash": "0x9ae236fc3bfeb15988e610246f64a64ad00355a2913e83ba3e59d518a7a5fd4c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)18056_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:19"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:20"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:21"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:22"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:25"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)18056_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)18056_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "509c98ea9c17c910568e02cd26c7c14277515199ccbb7d1413687f88e358ea96": {
      "address": "0x74afD087654287bEf7526bEBc5cf60816c2e2EA8",
      "txHash": "0x5b7006468d91b6a616d1ae1612fecad3f464057e6bcd81cc7d562a5011397b86",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:37"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:39"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:41"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:43"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:45"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:47"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10482_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)10495_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:53"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:55"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:57"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:59"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10482_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10482_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10482_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)10495_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)10495_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "41ce1e1b4958d9ffa0ab09f83164e25742b4337f4ca24c802be4ea79efdfb832": {
      "address": "0x324ED8C06D4290F11e04193e0b7CC0E5a0824873",
      "txHash": "0x78aae5d8ebfa74fe61b50ecef422507882c887720d848158b50b85a0a4a091f5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:37"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:39"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:41"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:43"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:45"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:47"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10482_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)10495_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:53"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:55"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:57"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:59"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10482_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10482_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10482_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)10495_storage)": {
            "label": "mapping(uint256 => struct MstationMining.Miner)"
          },
          "t_struct(Miner)10495_storage": {
            "label": "struct MstationMining.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "19673a59d8eda232a595fc83bfcb52a7ffed47cad1eb48f08243dc7768238963": {
      "address": "0x2208df2718025815027B916A95e8Cab3ee75Abd3",
      "txHash": "0x275774ad445249207fb29959094dca33da22c997080ec9458437f54fbebf7638",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:9"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "refillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:10"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c0fbb02677ae532fcdf197e81f3fb24c39bf2c717bc9ed1996f1196793d0df4f": {
      "address": "0xA4A04B005d2189FB0fF98387e4Caf0bF813CB908",
      "txHash": "0x880094c99689d946aa6ff34bd2456840bb14f0b265c5d7b6838fcf4e2442d2e8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:9"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "refillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:10"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ad48c050756d834b488a1ebfd29ba0ae070c0fdfef395eebdf42a84b4a6db8d7": {
      "address": "0xA3260a44fee767989273D1d6E3Cb51d06B6Ab8d7",
      "txHash": "0x3c81bb7147ab1212bed1aa6690862cf8caa1782a8cf86b08d1726b214f37616c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:9"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "refillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:10"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "276fe1529e5f6d2a13cc69af74970d85a7772207c794116a72b3f35c9b791198": {
      "address": "0x43Cfe9d58CaDaA1b8161316482b4aB73813D3ed3",
      "txHash": "0x651f78efa33e3dd5f80bb204b85f95ffd669cbc9ad319c3c814f879bcef1c45d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:21"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "refillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:22"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "nftAddress",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:23"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "341bc30d854245ade95dc52402aeec45e10fb817b16e920a89a362dded7d7357": {
      "address": "0xF2344836EfE6Dc18AD24135b13286988dc5B9Eca",
      "txHash": "0xf495b4e49b0d631783a55d579b9b5f06e100f38828dc252b64bb3fd79e713792",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15998_storage))",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16021_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16032_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16039_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16050_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16057_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16066_storage)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16039_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16050_storage))",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16076_storage",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16071_storage)",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:133"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:134"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)15998_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)15998_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)15998_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16021_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16021_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16032_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16032_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16039_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16039_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16050_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16050_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16057_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16057_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16066_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16066_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16050_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16076_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16071_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16071_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "da571847b7422cbc1fc3dde0341691048299d8259bcabbfa5dae1dc05a02a433": {
      "address": "0x374bE8d23B0ec9DA2eE64A4CA2976ed8286C9AFA",
      "txHash": "0xdb0eb7b8623678579363c534e46d09757fa2cad25557b9ee1f175c6eee088c2c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:37"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:39"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:41"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:43"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:45"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:47"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10513_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)10425_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:53"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:55"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:57"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:59"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10513_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10513_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10513_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)10425_storage)": {
            "label": "mapping(uint256 => struct IMstationMiningUtils.Miner)"
          },
          "t_struct(Miner)10425_storage": {
            "label": "struct IMstationMiningUtils.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "047fb4fca7bd34fb1c9a4afe7a4f2d40ab035484d3d738a76366b8762d6f5e45": {
      "address": "0x384145F69020A4BCDA52e9D08DFaA7831B5C7Ce7",
      "txHash": "0x96b68e47bbd62e56601bee9054b2d88cbe53e071ace31b99e6af25a86c2b0487",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:18"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "refillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:19"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "nftAddress",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:20"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "26fbe614b586c3c633752a5650b5bf49d0927cde1c551d5ef3eb5e77084a41df": {
      "address": "0xb2381658541ffAfab882Ee5065C5cb6A54c794C4",
      "txHash": "0x30ad6cb4d0ea083b9e42aded28a6f9d88db9f9adff99cb383eef6d4491462384",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:37"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:39"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:41"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:43"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:45"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:47"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10513_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)10425_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:53"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:55"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:57"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:59"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10513_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10513_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10513_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)10425_storage)": {
            "label": "mapping(uint256 => struct IMstationMiningUtils.Miner)"
          },
          "t_struct(Miner)10425_storage": {
            "label": "struct IMstationMiningUtils.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "cdd52079eee59de40b31f278427e95e319e69aecb856de039f12f510799ce450": {
      "address": "0xEE2ef186B701829c2042484189515e3a3d44eB92",
      "txHash": "0xece62cb6ff45313044204251857045956fd98544f8de9161abff48f8a5d9d307",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:18"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "refillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:19"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "nftAddress",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:20"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "1b005608dd92a9e1aca60401d71bfb3a62a29874fb5f144fe1d921c4305616da": {
      "address": "0xAF7228314Bbf346032F33dfe1B404A51f92247FE",
      "txHash": "0xa4f43eacc4a7a74385084a5da66c374f61aa437ec12dc860ebd1c40122064b1a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:37"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:39"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:41"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:43"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:45"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:47"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10510_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)10425_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:53"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:55"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:57"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:59"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10510_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10510_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10510_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)10425_storage)": {
            "label": "mapping(uint256 => struct IMstationMiningUtils.Miner)"
          },
          "t_struct(Miner)10425_storage": {
            "label": "struct IMstationMiningUtils.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "30eac4611e12ec375e2c49258a4af2a11632c64de7f1db7525af3167fc6a66c7": {
      "address": "0x061E05636A4B7B01BF89744B1973c652bd0D91dd",
      "txHash": "0x6bf7435be69555c095d1a601981dd15f3ec22ce266cc2879eb7b615dfaa8dfb5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:18"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "refillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:19"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "nftAddress",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:20"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "29322c8a5fed543dc2a3aa6ce9ca1b4db6d5dc5900e916b1941fe4b28e9a8bf2": {
      "address": "0x71c1b7c1FB6336ea99d66f934Eaf08701CF61ef5",
      "txHash": "0x160c01da85ae5d0f75c28caca1e0b72ab6a6c300ad014d108d6a6c14f2f6c1e1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:18"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "refillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:19"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "nftAddress",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:20"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "218384b6e96e417900e494cea26cfaad51a211c0b383e3427bf0a0d46efde893": {
      "address": "0xEF3C98F5c01f9D0DD98DAb1dBEDA1d7e241fD878",
      "txHash": "0x91905eca25ef485a54882d8ad741208ba67faaecdef5906598b076251614214c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:18"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "refillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:19"
          },
          {
            "contract": "MstationMiningUtils",
            "label": "nftAddress",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/mstationMining/MstationMiningUtils.sol:20"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "4a65de79eac1560452386b26deabd24744a482369a8d43358390460acdd3a7fb": {
      "address": "0xA0C1B39cE42fc3844d3b0dB576C5F22f7006cA34",
      "txHash": "0x6089ac4a89edfda042d8dc7a2f757227ca03963f4fb826a42adacc21a31a9c80",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "_token",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/vesting/TokenVestingSchedule.sol:41"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "vestingSchedulesIds",
            "type": "t_array(t_bytes32)dyn_storage",
            "src": "contracts/vesting/TokenVestingSchedule.sol:43"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "vestingSchedules",
            "type": "t_mapping(t_bytes32,t_struct(VestingSchedule)29863_storage)",
            "src": "contracts/vesting/TokenVestingSchedule.sol:44"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "vestingSchedulesTotalAmount",
            "type": "t_uint256",
            "src": "contracts/vesting/TokenVestingSchedule.sol:45"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "holdersVestingCount",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/vesting/TokenVestingSchedule.sol:46"
          }
        ],
        "types": {
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_struct(VestingSchedule)29863_storage)": {
            "label": "mapping(bytes32 => struct TokenVestingSchedule.VestingSchedule)"
          },
          "t_struct(VestingSchedule)29863_storage": {
            "label": "struct TokenVestingSchedule.VestingSchedule",
            "members": [
              {
                "label": "initialized",
                "type": "t_bool"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "cliff",
                "type": "t_uint256"
              },
              {
                "label": "start",
                "type": "t_uint256"
              },
              {
                "label": "duration",
                "type": "t_uint256"
              },
              {
                "label": "slicePeriodSeconds",
                "type": "t_uint256"
              },
              {
                "label": "revocable",
                "type": "t_bool"
              },
              {
                "label": "amountTotal",
                "type": "t_uint256"
              },
              {
                "label": "released",
                "type": "t_uint256"
              },
              {
                "label": "revoked",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "04e9bb6b4f8907238d17407c61521cbd2268fe93c70571984b434bb73031517f": {
      "address": "0x50Db5A1836F99B719769e5A0DA194d9d0f990ECA",
      "txHash": "0xba5a0499609ac5c05f523d2e1d72a33abf11b910a62ddcb26bb41b694c374444",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "_token",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/vesting/TokenVestingSchedule.sol:41"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "vestingSchedulesIds",
            "type": "t_array(t_bytes32)dyn_storage",
            "src": "contracts/vesting/TokenVestingSchedule.sol:43"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "vestingSchedules",
            "type": "t_mapping(t_bytes32,t_struct(VestingSchedule)29863_storage)",
            "src": "contracts/vesting/TokenVestingSchedule.sol:44"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "vestingSchedulesTotalAmount",
            "type": "t_uint256",
            "src": "contracts/vesting/TokenVestingSchedule.sol:45"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "holdersVestingCount",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/vesting/TokenVestingSchedule.sol:46"
          }
        ],
        "types": {
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_struct(VestingSchedule)29863_storage)": {
            "label": "mapping(bytes32 => struct TokenVestingSchedule.VestingSchedule)"
          },
          "t_struct(VestingSchedule)29863_storage": {
            "label": "struct TokenVestingSchedule.VestingSchedule",
            "members": [
              {
                "label": "initialized",
                "type": "t_bool"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "cliff",
                "type": "t_uint256"
              },
              {
                "label": "start",
                "type": "t_uint256"
              },
              {
                "label": "duration",
                "type": "t_uint256"
              },
              {
                "label": "slicePeriodSeconds",
                "type": "t_uint256"
              },
              {
                "label": "revocable",
                "type": "t_bool"
              },
              {
                "label": "amountTotal",
                "type": "t_uint256"
              },
              {
                "label": "released",
                "type": "t_uint256"
              },
              {
                "label": "revoked",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "2495df83af1a0e3560404a57edb755758c48442336d1e0e921f436e166554574": {
      "address": "0x053bd8e634925Be55CF118e67780538846d2D575",
      "txHash": "0x588da66b333bdeba2f9a9247ab0e01bdfda77017d8de7332a318dc419acd46db",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "_token",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/vesting/TokenVestingSchedule.sol:41"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "vestingSchedulesIds",
            "type": "t_array(t_bytes32)dyn_storage",
            "src": "contracts/vesting/TokenVestingSchedule.sol:43"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "vestingSchedules",
            "type": "t_mapping(t_bytes32,t_struct(VestingSchedule)29863_storage)",
            "src": "contracts/vesting/TokenVestingSchedule.sol:44"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "vestingSchedulesTotalAmount",
            "type": "t_uint256",
            "src": "contracts/vesting/TokenVestingSchedule.sol:45"
          },
          {
            "contract": "TokenVestingSchedule",
            "label": "holdersVestingCount",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/vesting/TokenVestingSchedule.sol:46"
          }
        ],
        "types": {
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_struct(VestingSchedule)29863_storage)": {
            "label": "mapping(bytes32 => struct TokenVestingSchedule.VestingSchedule)"
          },
          "t_struct(VestingSchedule)29863_storage": {
            "label": "struct TokenVestingSchedule.VestingSchedule",
            "members": [
              {
                "label": "initialized",
                "type": "t_bool"
              },
              {
                "label": "beneficiary",
                "type": "t_address"
              },
              {
                "label": "cliff",
                "type": "t_uint256"
              },
              {
                "label": "start",
                "type": "t_uint256"
              },
              {
                "label": "duration",
                "type": "t_uint256"
              },
              {
                "label": "slicePeriodSeconds",
                "type": "t_uint256"
              },
              {
                "label": "revocable",
                "type": "t_bool"
              },
              {
                "label": "amountTotal",
                "type": "t_uint256"
              },
              {
                "label": "released",
                "type": "t_uint256"
              },
              {
                "label": "revoked",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d9ab63001d4ac2fc26ff5d6d59c534a7d3e162097ccaf730dcd5007dcb53bc42": {
      "address": "0xF0908D21EfD9517d6f4D2a630680dC0268508501",
      "txHash": "0x3936a715f333f6784fe998fffa79a4bd7e9ebfd8bb65eb52af6da51c9f70fcf9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)18084_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:24"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:25"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:26"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPveUtils.sol:27"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:28"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18094_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:29"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)18084_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)18084_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18094_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PillFee))"
          },
          "t_mapping(t_uint256,t_struct(PillFee)18094_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PillFee)"
          },
          "t_struct(PillFee)18094_storage": {
            "label": "struct MstationPvEUtils.PillFee",
            "members": [
              {
                "label": "amountMST",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "160e501b23ec7ae52f1bdb89742a0442328c545b5186e11efe9039f74d0908c8": {
      "address": "0xe9Fb3Ee2ef57DCC1ba065aC760819fe15239de18",
      "txHash": "0x5bcef57c24ea94370d53e994380172fb032e38f77fd57cd7fc27604d8720f0f2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16195_storage))",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16218_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16229_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16236_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16247_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16254_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16263_storage)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16236_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16247_storage))",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16273_storage",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16268_storage)",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:133"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "walletCoolingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:135"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16195_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16195_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16195_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16218_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16218_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16229_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16229_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16236_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16236_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16247_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16247_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16254_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16254_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16263_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16263_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16247_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16273_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16268_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16268_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e8c535f700771e067434a61276db2048e492d0c2e8c496071852df74c8bbd478": {
      "address": "0xbFcfC086250698490498cb5fa4996fFbB67C8D55",
      "txHash": "0x2bbb75e4bee1e2aa7d529d13540592bc0bd48d7d7c9c24e468c74970e1c88424",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)18084_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:23"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:24"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:25"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:26"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPveUtils.sol:27"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:28"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18094_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:29"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)18084_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)18084_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18094_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PillFee))"
          },
          "t_mapping(t_uint256,t_struct(PillFee)18094_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PillFee)"
          },
          "t_struct(PillFee)18094_storage": {
            "label": "struct MstationPvEUtils.PillFee",
            "members": [
              {
                "label": "amountMST",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "a67cee781526981339a6203f39f73c43ed919871a33adebfee0ea79bfc76c1f5": {
      "address": "0xA38dD89f6F438C9bA968C78a6AC957De75C43697",
      "txHash": "0xe64599593092de1d25195d20702af550757b6b2b26525bbfa7ba093b6521b062",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16250_storage))",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16273_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16284_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16291_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16302_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16309_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16318_storage)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16291_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16302_storage))",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16328_storage",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16323_storage)",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:133"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "walletCoolingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:135"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16250_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16250_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16250_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16273_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16273_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16284_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16284_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16291_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16291_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16302_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16302_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16309_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16309_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16318_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16318_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16302_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16328_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16323_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16323_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "dcada52e036390dc5ae1cbe24dc52797176c9c7863b9b7dd8ba95d45dd3c6451": {
      "address": "0xC09F5cf1EfbEe9F8D716E8aE0b180c6980498719",
      "txHash": "0x9000d92c77af33c97f24585eaf651b3282672a42d284602748ec4a0f22987121",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "Marketplace",
            "label": "listingId",
            "type": "t_uint256",
            "src": "contracts/marketplace/Marketplace.sol:64"
          },
          {
            "contract": "Marketplace",
            "label": "serviceSellerFee",
            "type": "t_uint256",
            "src": "contracts/marketplace/Marketplace.sol:65"
          },
          {
            "contract": "Marketplace",
            "label": "serviceBuyerFee",
            "type": "t_uint256",
            "src": "contracts/marketplace/Marketplace.sol:66"
          },
          {
            "contract": "Marketplace",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/marketplace/Marketplace.sol:67"
          },
          {
            "contract": "Marketplace",
            "label": "listings",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)9252_storage))",
            "src": "contracts/marketplace/Marketplace.sol:68"
          },
          {
            "contract": "Marketplace",
            "label": "itemListings",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(ItemListing)9261_storage))",
            "src": "contracts/marketplace/Marketplace.sol:69"
          },
          {
            "contract": "Marketplace",
            "label": "whitelistCurrencies",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/marketplace/Marketplace.sol:70"
          },
          {
            "contract": "Marketplace",
            "label": "whitelistNFTContracts",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/marketplace/Marketplace.sol:71"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)9252_storage))": {
            "label": "mapping(address => mapping(uint256 => struct Marketplace.Listing))"
          },
          "t_mapping(t_uint256,t_struct(Listing)9252_storage)": {
            "label": "mapping(uint256 => struct Marketplace.Listing)"
          },
          "t_struct(Listing)9252_storage": {
            "label": "struct Marketplace.Listing",
            "members": [
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "currency",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(ItemListing)9261_storage))": {
            "label": "mapping(address => mapping(uint256 => struct Marketplace.ItemListing))"
          },
          "t_mapping(t_uint256,t_struct(ItemListing)9261_storage)": {
            "label": "mapping(uint256 => struct Marketplace.ItemListing)"
          },
          "t_struct(ItemListing)9261_storage": {
            "label": "struct Marketplace.ItemListing",
            "members": [
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "bf311050d13814951616feda98551a5968744ae5e8f3c4e2fde94cf521660132": {
      "address": "0x6Fa08c5BBE2b65C27A0f07d417824d5EBCA3ca67",
      "txHash": "0x4d0c3a43719caccbdd7bbbb1d5399dff129726a0e76a311218dd746618912808",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16248_storage))",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16271_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16282_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16289_storage)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16300_storage)",
            "src": "contracts/pve/MstationPve.sol:116"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16307_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16316_storage)",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16289_storage)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16300_storage))",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16326_storage",
            "src": "contracts/pve/MstationPve.sol:128"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16321_storage)",
            "src": "contracts/pve/MstationPve.sol:129"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:130"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:131"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:132"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:133"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:134"
          },
          {
            "contract": "MstationPvE",
            "label": "walletCoolingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:135"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16248_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16248_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16248_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16271_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16271_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16282_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16282_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16289_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16289_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16300_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16300_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16307_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16307_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16316_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16316_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16300_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16326_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16321_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16321_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "455e89a77248d3d86b9c0007161ad702aa3da393f03fe309348cecd35773584c": {
      "address": "0x36BC952a0eEA21c5518C7792D2B9250A712a2F37",
      "txHash": "0x1f8c6220cb45dbfad983df5427b895d548d1be8cc5d35457b6dac07a2a86ec18",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mintStart",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:48"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "factory",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:50"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "mstationSchool",
            "type": "t_address",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:51"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelisted",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:52"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroAttributes",
            "type": "t_mapping(t_uint256,t_struct(HeroAttribute)12686_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:54"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "heroCombats",
            "type": "t_mapping(t_uint256,t_struct(HeroCombat)12701_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:55"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "baseUri",
            "type": "t_string_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:57"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropPrice",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:58"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "dropList",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:60"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:62"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:63"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonce3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:64"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistBoxMinters",
            "type": "t_mapping(t_address,t_struct(WhitelistBoxMinter)12748_storage)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:72"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:74"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "rarity",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:75"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "minValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:76"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "maxValues",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:77"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "tokePrefix",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:78"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:79"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "advantageIndex",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:81"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "configs",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:82"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:83"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "isTransfer",
            "type": "t_bool",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:84"
          },
          {
            "contract": "BaseMStationNFT",
            "label": "whitelistContracts",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/mstationNFT/BaseMStationNFT.sol:85"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(HeroAttribute)12686_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroAttribute)"
          },
          "t_struct(HeroAttribute)12686_storage": {
            "label": "struct BaseMStationNFT.HeroAttribute",
            "members": [
              {
                "label": "strength",
                "type": "t_uint16"
              },
              {
                "label": "stamina",
                "type": "t_uint16"
              },
              {
                "label": "vitality",
                "type": "t_uint16"
              },
              {
                "label": "courage",
                "type": "t_uint16"
              },
              {
                "label": "dexterity",
                "type": "t_uint16"
              },
              {
                "label": "intelligence",
                "type": "t_uint16"
              },
              {
                "label": "breed",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "rarity",
                "type": "t_uint16"
              },
              {
                "label": "teamId",
                "type": "t_uint16"
              },
              {
                "label": "talent",
                "type": "t_uint16"
              },
              {
                "label": "skill",
                "type": "t_uint16"
              },
              {
                "label": "combat",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(HeroCombat)12701_storage)": {
            "label": "mapping(uint256 => struct BaseMStationNFT.HeroCombat)"
          },
          "t_struct(HeroCombat)12701_storage": {
            "label": "struct BaseMStationNFT.HeroCombat",
            "members": [
              {
                "label": "lastCombatBlock",
                "type": "t_uint256"
              },
              {
                "label": "health",
                "type": "t_uint256"
              },
              {
                "label": "physicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "magicalAttack",
                "type": "t_uint256"
              },
              {
                "label": "defense",
                "type": "t_uint256"
              },
              {
                "label": "magicResistance",
                "type": "t_uint256"
              },
              {
                "label": "accuracy",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(WhitelistBoxMinter)12748_storage)": {
            "label": "mapping(address => struct BaseMStationNFT.WhitelistBoxMinter)"
          },
          "t_struct(WhitelistBoxMinter)12748_storage": {
            "label": "struct BaseMStationNFT.WhitelistBoxMinter",
            "members": [
              {
                "label": "total",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "totalMinted",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "2c816a814f28b24c34e17e9a27712eefc9b1d9e33a109d562322be529ca8fce1": {
      "address": "0x6db72bd1c184894dF2E417170C30945546508cB3",
      "txHash": "0xd312580a0df6f19bcc0e3e6775f02da124c43dee001aa42180abf1530a13415b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:36"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16241_storage))",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16264_storage)",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16275_storage)",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16282_storage)",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16293_storage)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16300_storage)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:115"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16309_storage)",
            "src": "contracts/pve/MstationPve.sol:117"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16282_storage)",
            "src": "contracts/pve/MstationPve.sol:118"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16293_storage))",
            "src": "contracts/pve/MstationPve.sol:119"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:120"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16319_storage",
            "src": "contracts/pve/MstationPve.sol:121"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16314_storage)",
            "src": "contracts/pve/MstationPve.sol:122"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:123"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:124"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:125"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:126"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:127"
          },
          {
            "contract": "MstationPvE",
            "label": "walletCoolingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:128"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16241_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16241_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16241_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16264_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16264_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16275_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16275_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16282_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16282_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16293_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16293_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16300_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16300_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16309_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16309_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16293_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16319_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16314_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16314_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "025c103ad1d0b25f936fe7997189032a464e23890e1021e3e8fa863b98b2cc4c": {
      "address": "0x7aE2c07170fd735241352dAE1F370E47D979FCA0",
      "txHash": "0x1785cc13b8a05114520879ff794ea8d15a8d48de790fab65864c5502ea164aef",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:52"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:53"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:54"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:55"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)14367_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:61"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:63"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:64"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:65"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:66"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:67"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:68"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContractMap",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)14367_storage)",
            "src": "contracts/mstationNFT/MstationNFT.sol:69"
          },
          {
            "contract": "MstationNFT",
            "label": "_status",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:72"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)14367_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)14367_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)14367_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7455e2edc0aed61b1dfec7f8aa41c4cc4c9d30ee35401b0cca0a1e52adb53997": {
      "address": "0x3f248b085c0ba06055Ba5538f3111497cb29dab1",
      "txHash": "0x49a79872945bce5ac14a65c942f72b82adc655164d78918252f4bf737a41773f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFT",
            "label": "isInitialized",
            "type": "t_bool",
            "src": "contracts/mstationNFT/MstationNFT.sol:46"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:47"
          },
          {
            "contract": "MstationNFT",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:48"
          },
          {
            "contract": "MstationNFT",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationNFT/MstationNFT.sol:49"
          },
          {
            "contract": "MstationNFT",
            "label": "bscsAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:50"
          },
          {
            "contract": "MstationNFT",
            "label": "bscdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:51"
          },
          {
            "contract": "MstationNFT",
            "label": "busdAddress",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationNFT/MstationNFT.sol:52"
          },
          {
            "contract": "MstationNFT",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:53"
          },
          {
            "contract": "MstationNFT",
            "label": "totalSupplied",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:54"
          },
          {
            "contract": "MstationNFT",
            "label": "nftSlots",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:55"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:56"
          },
          {
            "contract": "MstationNFT",
            "label": "baseMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:57"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenMintLimitedFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:58"
          },
          {
            "contract": "MstationNFT",
            "label": "serviceFee",
            "type": "t_uint16",
            "src": "contracts/mstationNFT/MstationNFT.sol:59"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContracts",
            "type": "t_array(t_struct(CharacterContract)14354_storage)dyn_storage",
            "src": "contracts/mstationNFT/MstationNFT.sol:61"
          },
          {
            "contract": "MstationNFT",
            "label": "tokenId",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:63"
          },
          {
            "contract": "MstationNFT",
            "label": "blackList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:64"
          },
          {
            "contract": "MstationNFT",
            "label": "priorityList",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFT.sol:65"
          },
          {
            "contract": "MstationNFT",
            "label": "bnbMintFee",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:66"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom2",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:67"
          },
          {
            "contract": "MstationNFT",
            "label": "nonceRandom3",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:68"
          },
          {
            "contract": "MstationNFT",
            "label": "characterContractMap",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)14354_storage)",
            "src": "contracts/mstationNFT/MstationNFT.sol:69"
          },
          {
            "contract": "MstationNFT",
            "label": "_status",
            "type": "t_uint256",
            "src": "contracts/mstationNFT/MstationNFT.sol:72"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(CharacterContract)14354_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]"
          },
          "t_struct(CharacterContract)14354_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)14354_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d58316e5927289653bf9c54cf9f074c081bb31089657f5ce688ce9bc34282432": {
      "address": "0x536CA5909427D25Fd5D858df0d394FEc4bCB35C3",
      "txHash": "0x57516ea88bc8a5f54842534190a615bb17ef43b662e5e2651087690639ae121e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:37"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:39"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:41"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:43"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:45"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:47"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10586_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8670_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:53"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:55"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:57"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:59"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10586_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10586_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10586_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8670_storage)": {
            "label": "mapping(uint256 => struct IMstationMiningUtils.Miner)"
          },
          "t_struct(Miner)8670_storage": {
            "label": "struct IMstationMiningUtils.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ffc6392fd89b277e2769ba798f25f3e31de9f1d1f9d7b26c9da41375e58b83fc": {
      "address": "0x36A95c121207e7585f552a8Dd1033781bBAb0ad1",
      "txHash": "0x7ead1ed1cd9267b49ba61982daf30a3b6163fc65bf7bd76596cf36da29aea0e5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:37"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:39"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:41"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8520",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:43"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:45"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:47"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10586_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8670_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:53"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:55"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:57"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:58"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:59"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:60"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8520": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10586_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10586_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10586_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8670_storage)": {
            "label": "mapping(uint256 => struct IMstationMiningUtils.Miner)"
          },
          "t_struct(Miner)8670_storage": {
            "label": "struct IMstationMiningUtils.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "fbe629ad2f1ca73d66b83343eddc4245381b9cf1fbeb86a315a69036147fb96c": {
      "address": "0xeDBb8739B2a6261B3A6848c59c72e620c5f43A4c",
      "txHash": "0x89bc12be70f3f286f055139e0ccfa57b1708bedddb328def93fb2bb6d37ef763",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationNFTUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/mstationNFT/MstationNFTUtils.sol:10"
          },
          {
            "contract": "MstationNFTUtils",
            "label": "blacklistAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/mstationNFT/MstationNFTUtils.sol:11"
          },
          {
            "contract": "MstationNFTUtils",
            "label": "blacklistNFT",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/mstationNFT/MstationNFTUtils.sol:12"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "461ac7cd12d7edb826b53be231e785f09b02dd34f6859d5bd646b2c8d7909592": {
      "address": "0xE39e4Cab71FD7A874a7E49dcFb93034388f2DFB4",
      "txHash": "0x85abd9042577df79aaaabeea34e55c8fa8b6b974c7f2cbd223d56e68147559c2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:25"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:26"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(IERC20Upgradeable)2772",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(IERC20Upgradeable)2772",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8672",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16436_storage))",
            "src": "contracts/pve/MstationPve.sol:94"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16441_storage)",
            "src": "contracts/pve/MstationPve.sol:95"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16452_storage)",
            "src": "contracts/pve/MstationPve.sol:96"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16459_storage)",
            "src": "contracts/pve/MstationPve.sol:97"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16470_storage)",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16477_storage)",
            "src": "contracts/pve/MstationPve.sol:99"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:101"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16486_storage)",
            "src": "contracts/pve/MstationPve.sol:103"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16459_storage)",
            "src": "contracts/pve/MstationPve.sol:104"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16470_storage))",
            "src": "contracts/pve/MstationPve.sol:105"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:106"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16496_storage",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16491_storage)",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "walletCoolingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:114"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IERC20Upgradeable)2772": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IBSCD)8672": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16436_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16436_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16436_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16441_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16441_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16452_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16452_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16459_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16459_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16470_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16470_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16477_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16477_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16486_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16486_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16470_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16496_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16491_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16491_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c1b3f6d692ee680ae22acd593b441e03b1157355e13c2ae201626074ef34db55": {
      "address": "0xd74B9Cf01F233535A883534C369151dC2dc184DE",
      "txHash": "0xa2577cc99df01c5b3a36fbf3eac9c5e484a16464942a31e5adeef981d4a4d617",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:26"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(IERC20Upgradeable)2772",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(IERC20Upgradeable)2772",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8672",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16725_storage))",
            "src": "contracts/pve/MstationPve.sol:95"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16730_storage)",
            "src": "contracts/pve/MstationPve.sol:96"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16741_storage)",
            "src": "contracts/pve/MstationPve.sol:97"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16748_storage)",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16759_storage)",
            "src": "contracts/pve/MstationPve.sol:99"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16766_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:101"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:103"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16775_storage)",
            "src": "contracts/pve/MstationPve.sol:104"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16748_storage)",
            "src": "contracts/pve/MstationPve.sol:105"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16759_storage))",
            "src": "contracts/pve/MstationPve.sol:106"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16785_storage",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16780_storage)",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "walletCoolingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:115"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IERC20Upgradeable)2772": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IBSCD)8672": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16725_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16725_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16725_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16730_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16730_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16741_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16741_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16748_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16748_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16759_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16759_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16766_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16766_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16775_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16775_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16759_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16785_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16780_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16780_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e19eee576dd2e9834810fc68ec25703baa2a0b4851aa2e4027dd0aa8ee3c515d": {
      "address": "0xD1cf9eA1C6319098Ecf211FF5a604BD3d81a06C5",
      "txHash": "0xf44aa7ee5d466d169ca3f7e27d13952f9ae54ac102698bcffd108c30931fccd4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:26"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(IERC20Upgradeable)2772",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(IERC20Upgradeable)2772",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8672",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16725_storage))",
            "src": "contracts/pve/MstationPve.sol:95"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16730_storage)",
            "src": "contracts/pve/MstationPve.sol:96"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16741_storage)",
            "src": "contracts/pve/MstationPve.sol:97"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16748_storage)",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16759_storage)",
            "src": "contracts/pve/MstationPve.sol:99"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16766_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:101"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:103"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16775_storage)",
            "src": "contracts/pve/MstationPve.sol:104"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16748_storage)",
            "src": "contracts/pve/MstationPve.sol:105"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16759_storage))",
            "src": "contracts/pve/MstationPve.sol:106"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16785_storage",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16780_storage)",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "walletCoolingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:115"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IERC20Upgradeable)2772": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IBSCD)8672": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16725_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16725_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16725_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16730_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16730_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16741_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16741_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16748_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16748_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16759_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16759_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16766_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16766_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16775_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16775_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16759_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16785_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16780_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16780_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f15f30aaab5838f1da18fe07b07386929041e7bb701a16effa03acd2ba1512ea": {
      "address": "0xa4e2C1C39958C657411eb31D715d7B2CB974ECD0",
      "txHash": "0x8fc68211f0913f5e6a58279beff9111e50c7e929a5e349bfaaf9e20faea827e6",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:29"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:30"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:31"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:32"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:33"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:34"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8672",
            "src": "contracts/mstationMining/MstationMining.sol:35"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:37"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:39"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:41"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10756_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:43"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8822_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:45"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:53"
          },
          {
            "contract": "MstationMining",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8672": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10756_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10756_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10756_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8822_storage)": {
            "label": "mapping(uint256 => struct IMstationMiningUtils.Miner)"
          },
          "t_struct(Miner)8822_storage": {
            "label": "struct IMstationMiningUtils.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "093459e56102526496efa912dae7e5eadb53c1365027d5cc7ad7f918b623fbc6": {
      "address": "0xa90E2FABEE0bCFFbdeC5928aF1d3d49810212EB5",
      "txHash": "0x3167ab1dbd01f76558d23bb7181ee258656ba0c50b1b31da28a306f5be8a75d5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:29"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:30"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:31"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:32"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:33"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:34"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8672",
            "src": "contracts/mstationMining/MstationMining.sol:35"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:37"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:39"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:41"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10756_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:43"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8822_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:45"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:48"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:53"
          },
          {
            "contract": "MstationMining",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8672": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10756_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10756_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10756_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8822_storage)": {
            "label": "mapping(uint256 => struct IMstationMiningUtils.Miner)"
          },
          "t_struct(Miner)8822_storage": {
            "label": "struct IMstationMiningUtils.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "9b6906940726e84e86691f05ac01a34873b55398c6a1f71d8c5b91b6764f6ef7": {
      "address": "0xF9E5352B201150F87c223fe42B4eAd39d705b03e",
      "txHash": "0x713957c4822147655be8ad0c25c050e6e167ad5f57ed585f56d0e68e6346ca4c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:30"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:31"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:32"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:33"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:34"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:35"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8672",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:37"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:39"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:41"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10756_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:43"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8822_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:45"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:47"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:53"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/mstationMining/MstationMining.sol:55"
          },
          {
            "contract": "MstationMining",
            "label": "userNFT",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8672": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10756_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10756_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10756_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8822_storage)": {
            "label": "mapping(uint256 => struct IMstationMiningUtils.Miner)"
          },
          "t_struct(Miner)8822_storage": {
            "label": "struct IMstationMiningUtils.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "0f696ca0d4d81c1f8bb088a9df5d82465c61736fa8b2822dcf8c6a4d9e19a975": {
      "address": "0x0a7D02f9e730f2b1087c9B87AB16fa49B85205cf",
      "txHash": "0xe584f1e17f405b3210a39ba1aa39f77ab893b7bb56330a2ac510e01ee8fd7329",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:30"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:31"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:32"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:33"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:34"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:35"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)4286",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:37"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:39"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:41"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)4542_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:43"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)4436_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:45"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:47"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:53"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/mstationMining/MstationMining.sol:55"
          },
          {
            "contract": "MstationMining",
            "label": "userNFT",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)4286": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)4542_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)4542_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)4542_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)4436_storage)": {
            "label": "mapping(uint256 => struct IMstationMiningUtils.Miner)"
          },
          "t_struct(Miner)4436_storage": {
            "label": "struct IMstationMiningUtils.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "1b61008fe06719aa4e7f5c3d0a9d3d888c4e10aaf38c93e06311779ca342059a": {
      "address": "0xA7Ac8E319F7b4588689Ee35C227fB92C2DAB8B85",
      "txHash": "0x5515c2bf264e5dffb0aeebf18d0e0e82ff33b93e59bd7944f24be60711b9c0cd",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationMining",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:30"
          },
          {
            "contract": "MstationMining",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:31"
          },
          {
            "contract": "MstationMining",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:32"
          },
          {
            "contract": "MstationMining",
            "label": "mstationAddress",
            "type": "t_address",
            "src": "contracts/mstationMining/MstationMining.sol:33"
          },
          {
            "contract": "MstationMining",
            "label": "reward0Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:34"
          },
          {
            "contract": "MstationMining",
            "label": "reward1Address",
            "type": "t_contract(ERC20Upgradeable)2694",
            "src": "contracts/mstationMining/MstationMining.sol:35"
          },
          {
            "contract": "MstationMining",
            "label": "iBscdToken",
            "type": "t_contract(IBSCD)8672",
            "src": "contracts/mstationMining/MstationMining.sol:36"
          },
          {
            "contract": "MstationMining",
            "label": "miningRatio",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:37"
          },
          {
            "contract": "MstationMining",
            "label": "baseRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:38"
          },
          {
            "contract": "MstationMining",
            "label": "minLevel",
            "type": "t_uint16",
            "src": "contracts/mstationMining/MstationMining.sol:39"
          },
          {
            "contract": "MstationMining",
            "label": "rewardMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:40"
          },
          {
            "contract": "MstationMining",
            "label": "rewardProductivities",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/mstationMining/MstationMining.sol:41"
          },
          {
            "contract": "MstationMining",
            "label": "bscdLevelMultiplier",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:42"
          },
          {
            "contract": "MstationMining",
            "label": "poolInfos",
            "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10756_storage))",
            "src": "contracts/mstationMining/MstationMining.sol:43"
          },
          {
            "contract": "MstationMining",
            "label": "workedInfo",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:44"
          },
          {
            "contract": "MstationMining",
            "label": "miners",
            "type": "t_mapping(t_uint256,t_struct(Miner)8822_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:45"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/mstationMining/MstationMining.sol:46"
          },
          {
            "contract": "MstationMining",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/mstationMining/MstationMining.sol:47"
          },
          {
            "contract": "MstationMining",
            "label": "kVariable",
            "type": "t_uint256",
            "src": "contracts/mstationMining/MstationMining.sol:49"
          },
          {
            "contract": "MstationMining",
            "label": "refillFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:50"
          },
          {
            "contract": "MstationMining",
            "label": "refillAllFee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:51"
          },
          {
            "contract": "MstationMining",
            "label": "refill80Fee",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/mstationMining/MstationMining.sol:52"
          },
          {
            "contract": "MstationMining",
            "label": "pauseMining",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:53"
          },
          {
            "contract": "MstationMining",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/mstationMining/MstationMining.sol:54"
          },
          {
            "contract": "MstationMining",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/mstationMining/MstationMining.sol:55"
          },
          {
            "contract": "MstationMining",
            "label": "userNFT",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/mstationMining/MstationMining.sol:56"
          },
          {
            "contract": "MstationMining",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/mstationMining/MstationMining.sol:57"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ERC20Upgradeable)2694": {
            "label": "contract ERC20Upgradeable"
          },
          "t_contract(IBSCD)8672": {
            "label": "contract IBSCD"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint32,t_struct(Pool)10756_storage))": {
            "label": "mapping(address => mapping(uint32 => struct MstationMining.Pool))"
          },
          "t_mapping(t_uint32,t_struct(Pool)10756_storage)": {
            "label": "mapping(uint32 => struct MstationMining.Pool)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(Pool)10756_storage": {
            "label": "struct MstationMining.Pool",
            "members": [
              {
                "label": "poolId",
                "type": "t_uint32"
              },
              {
                "label": "requireLevel",
                "type": "t_uint32"
              },
              {
                "label": "requireAttribute",
                "type": "t_array(t_uint32)dyn_storage"
              }
            ]
          },
          "t_array(t_uint32)dyn_storage": {
            "label": "uint32[]"
          },
          "t_mapping(t_uint256,t_struct(Miner)8822_storage)": {
            "label": "mapping(uint256 => struct IMstationMiningUtils.Miner)"
          },
          "t_struct(Miner)8822_storage": {
            "label": "struct IMstationMiningUtils.Miner",
            "members": [
              {
                "label": "level",
                "type": "t_uint16"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              },
              {
                "label": "contractAddress",
                "type": "t_address"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "poolId",
                "type": "t_uint32"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "76f2ffad9505b62ffc972eae962145dcc8e3374ae5ea114eb587edcbb9469658": {
      "address": "0x64664826e53736c271eA58ECfb14F86cE6bdDc81",
      "txHash": "0x1a2535dca998116e1923fc2ded2576c8a814c6bc3d65b34f3d8edb995c4b9d58",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)18355_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:40"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:41"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:42"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:43"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPveUtils.sol:44"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:45"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18365_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:46"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)18381_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:47"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)18355_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)18355_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18365_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PillFee))"
          },
          "t_mapping(t_uint256,t_struct(PillFee)18365_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PillFee)"
          },
          "t_struct(PillFee)18365_storage": {
            "label": "struct MstationPvEUtils.PillFee",
            "members": [
              {
                "label": "amountMST",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)18381_storage)": {
            "label": "mapping(uint64 => struct MstationPvEUtils.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)18381_storage": {
            "label": "struct MstationPvEUtils.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "4ad37fc509be514abde29a7f7aa972a327d298d2037a77f8d9b1c9a0ad605016": {
      "address": "0xaB08B451bF864d4ecE4Bf85ca97833183e3e2eb8",
      "txHash": "0x1ae348c3013a94c281ec0e2fbaaef5e7104bf3a8ba9c44fe6d2d2b87a385a64c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)18786_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:40"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:41"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:42"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:43"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPveUtils.sol:44"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:45"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18796_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:46"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)18812_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:47"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)18786_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)18786_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18796_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PillFee))"
          },
          "t_mapping(t_uint256,t_struct(PillFee)18796_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PillFee)"
          },
          "t_struct(PillFee)18796_storage": {
            "label": "struct MstationPvEUtils.PillFee",
            "members": [
              {
                "label": "amountMST",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)18812_storage)": {
            "label": "mapping(uint64 => struct MstationPvEUtils.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)18812_storage": {
            "label": "struct MstationPvEUtils.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "9e19deca2eef148249b94b224c2b4dcfed6402173c8d222c6e8048377a7fcecb": {
      "address": "0x7aC8343EC11213c4e24db0EaFa45E873bd9f42ca",
      "txHash": "0x3d368a4121bb24c5f475632fd0f4df2f9e14d2b050d349583bdbfb2e600c1e7c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)18786_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:40"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:41"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:42"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:43"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPveUtils.sol:44"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:45"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18796_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:46"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)18812_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:47"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)18786_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)18786_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18796_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PillFee))"
          },
          "t_mapping(t_uint256,t_struct(PillFee)18796_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PillFee)"
          },
          "t_struct(PillFee)18796_storage": {
            "label": "struct MstationPvEUtils.PillFee",
            "members": [
              {
                "label": "amountMST",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)18812_storage)": {
            "label": "mapping(uint64 => struct MstationPvEUtils.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)18812_storage": {
            "label": "struct MstationPvEUtils.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ec5e1578f02d743a06f057fbe5dc8efdec507c0f204597e69e76c810bb1ed8cb": {
      "address": "0x8AF3869E5Af4305eFCe18c06BA7B932366f2EFDC",
      "txHash": "0xf549b447795e06113fd2446bacf0b6dd6383cf3ca0f6e5a2e85520195347459e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)18786_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:40"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:41"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:42"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:43"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPveUtils.sol:44"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:45"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18796_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:46"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)18812_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:47"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)18786_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)18786_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18796_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PillFee))"
          },
          "t_mapping(t_uint256,t_struct(PillFee)18796_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PillFee)"
          },
          "t_struct(PillFee)18796_storage": {
            "label": "struct MstationPvEUtils.PillFee",
            "members": [
              {
                "label": "amountMST",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)18812_storage)": {
            "label": "mapping(uint64 => struct MstationPvEUtils.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)18812_storage": {
            "label": "struct MstationPvEUtils.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d00e3234b70f9e1a32268b519559e56110bc3ced4f6fd328659271eb301173ca": {
      "address": "0x330F6Bd3A46943e270d79670A622Dd245f3b205D",
      "txHash": "0xe9d66e2e1318fa7b888168e355b917949f521aad6eb1a37e347d36d8a4c34f17",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)18786_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:40"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:41"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:42"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:43"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPveUtils.sol:44"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:45"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18796_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:46"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)18812_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:47"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)18786_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)18786_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18796_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PillFee))"
          },
          "t_mapping(t_uint256,t_struct(PillFee)18796_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PillFee)"
          },
          "t_struct(PillFee)18796_storage": {
            "label": "struct MstationPvEUtils.PillFee",
            "members": [
              {
                "label": "amountMST",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)18812_storage)": {
            "label": "mapping(uint64 => struct MstationPvEUtils.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)18812_storage": {
            "label": "struct MstationPvEUtils.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "0a306e532a568f95ff11543a97eb7cbf267847bbc4d10327df575705087fb7e4": {
      "address": "0xc98AA311E5F77423E0c5046Cf88BE38823A43816",
      "txHash": "0xb8c30726067366ac59099ede9bc34a43e853ada84ef51f85e5e59195bba36ef5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)18786_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:40"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:41"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:42"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:43"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPveUtils.sol:44"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:45"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18796_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:46"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)18812_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:47"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)18786_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)18786_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18796_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PillFee))"
          },
          "t_mapping(t_uint256,t_struct(PillFee)18796_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PillFee)"
          },
          "t_struct(PillFee)18796_storage": {
            "label": "struct MstationPvEUtils.PillFee",
            "members": [
              {
                "label": "amountMST",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)18812_storage)": {
            "label": "mapping(uint64 => struct MstationPvEUtils.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)18812_storage": {
            "label": "struct MstationPvEUtils.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "5f4f8eee19e44e5369bbc88ce956660a44c37980f2454e98ebc554351463e277": {
      "address": "0xa526cDce27940e68e8A216d1254fC470577b5ea0",
      "txHash": "0xecc7e25f8e509a9a7629f0cb1dbf653a07bbf3c81c350619a6bc8d2b348d8198",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)18786_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:40"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:41"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:42"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:43"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPveUtils.sol:44"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:45"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18796_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:46"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)18812_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:47"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)18786_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)18786_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18796_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PillFee))"
          },
          "t_mapping(t_uint256,t_struct(PillFee)18796_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PillFee)"
          },
          "t_struct(PillFee)18796_storage": {
            "label": "struct MstationPvEUtils.PillFee",
            "members": [
              {
                "label": "amountMST",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)18812_storage)": {
            "label": "mapping(uint64 => struct MstationPvEUtils.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)18812_storage": {
            "label": "struct MstationPvEUtils.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ce32fe1a161e8ccb7719a3d643afcad646b7d9f13afc75b40fe00722e13cc339": {
      "address": "0x4C3141aBc39B7993F0DaD1b3e071F12aDD07C12A",
      "txHash": "0xeee016184ae24dfe0a856ad064169b01c0f4a2ea42b3b96cd697ee40f22888ea",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)18786_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:40"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:41"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:42"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:43"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPveUtils.sol:44"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:45"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18796_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:46"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)18812_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:47"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)18786_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)18786_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18796_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PillFee))"
          },
          "t_mapping(t_uint256,t_struct(PillFee)18796_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PillFee)"
          },
          "t_struct(PillFee)18796_storage": {
            "label": "struct MstationPvEUtils.PillFee",
            "members": [
              {
                "label": "amountMST",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)18812_storage)": {
            "label": "mapping(uint64 => struct MstationPvEUtils.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)18812_storage": {
            "label": "struct MstationPvEUtils.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "aaf1ea373f519f4b921fb8d20671a526f110b748db65d11270953303f3e781ab": {
      "address": "0x937d12C16Ce9B20e628cceD37c4239f43599a8c1",
      "txHash": "0x1a9081b30627e70346ef17d644e0f05feb4e04866e37e86e409393a1aad927d7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)18786_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:40"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:41"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:42"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:43"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPveUtils.sol:44"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:45"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18796_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:46"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)18812_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:47"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)18786_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)18786_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18796_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PillFee))"
          },
          "t_mapping(t_uint256,t_struct(PillFee)18796_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PillFee)"
          },
          "t_struct(PillFee)18796_storage": {
            "label": "struct MstationPvEUtils.PillFee",
            "members": [
              {
                "label": "amountMST",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)18812_storage)": {
            "label": "mapping(uint64 => struct MstationPvEUtils.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)18812_storage": {
            "label": "struct MstationPvEUtils.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d49f43337ee68ba723db242ac485f091357efd448275743da06232a366497661": {
      "address": "0x95ad9f6C42BDAa7445b683617CB01aA1F36BadE2",
      "txHash": "0x6573fb1df4e8b8bfb4e57b21c9dc536eba1f831fd2ae726fcd1bba236438cf05",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint256,t_struct(RewardConfig)18786_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:40"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathMST",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:41"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pathBSCD",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/pve/MstationPveUtils.sol:42"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "_rewardPoolMST",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:43"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "operatorAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPveUtils.sol:44"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:45"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "pillFee2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18796_storage))",
            "src": "contracts/pve/MstationPveUtils.sol:46"
          },
          {
            "contract": "MstationPvEUtils",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)18812_storage)",
            "src": "contracts/pve/MstationPveUtils.sol:47"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(RewardConfig)18786_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.RewardConfig)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(RewardConfig)18786_storage": {
            "label": "struct MstationPvEUtils.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PillFee)18796_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvEUtils.PillFee))"
          },
          "t_mapping(t_uint256,t_struct(PillFee)18796_storage)": {
            "label": "mapping(uint256 => struct MstationPvEUtils.PillFee)"
          },
          "t_struct(PillFee)18796_storage": {
            "label": "struct MstationPvEUtils.PillFee",
            "members": [
              {
                "label": "amountMST",
                "type": "t_uint256"
              },
              {
                "label": "amountBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)18812_storage)": {
            "label": "mapping(uint64 => struct MstationPvEUtils.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)18812_storage": {
            "label": "struct MstationPvEUtils.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "5080a54cdc96253c80c5b6257f43856e09575cb07a4471e45119b71d77a10814": {
      "address": "0x25ca9c44d3C63083379c28d02c662C172A716b46",
      "txHash": "0xd4a3adacb31ada4602fb6abcd6c615068af527d35d2219d17edf752aa22b0466",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MStationWallet",
            "label": "pause",
            "type": "t_bool",
            "src": "contracts/treasury/MStationWallet.sol:26"
          },
          {
            "contract": "MStationWallet",
            "label": "whitelistOperator",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/treasury/MStationWallet.sol:28"
          },
          {
            "contract": "MStationWallet",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/treasury/MStationWallet.sol:29"
          },
          {
            "contract": "MStationWallet",
            "label": "mstTokenAddress",
            "type": "t_address",
            "src": "contracts/treasury/MStationWallet.sol:30"
          },
          {
            "contract": "MStationWallet",
            "label": "bscsTokenAddress",
            "type": "t_address",
            "src": "contracts/treasury/MStationWallet.sol:32"
          },
          {
            "contract": "MStationWallet",
            "label": "walletTransCounter",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/treasury/MStationWallet.sol:34"
          },
          {
            "contract": "MStationWallet",
            "label": "depositCounter",
            "type": "t_uint256",
            "src": "contracts/treasury/MStationWallet.sol:35"
          },
          {
            "contract": "MStationWallet",
            "label": "depositTransactions",
            "type": "t_mapping(t_uint256,t_struct(Transaction)30770_storage)",
            "src": "contracts/treasury/MStationWallet.sol:37"
          },
          {
            "contract": "MStationWallet",
            "label": "withdrawTransactions",
            "type": "t_mapping(t_uint256,t_struct(Transaction)30770_storage)",
            "src": "contracts/treasury/MStationWallet.sol:39"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Transaction)30770_storage)": {
            "label": "mapping(uint256 => struct MStationWallet.Transaction)"
          },
          "t_struct(Transaction)30770_storage": {
            "label": "struct MStationWallet.Transaction",
            "members": [
              {
                "label": "isDeposit",
                "type": "t_bool"
              },
              {
                "label": "tId",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "0464ef92b0da3aec1de42dc6496f66e19b08602fa5e29dd0bfe0f22ff6c72f21": {
      "address": "0xB9a7E0A98b9311ceD8116FB8A14C877A37695a5a",
      "txHash": "0x4792bcff6c301f3c087ec774b96bee27b91412272b5c7c4052c6a4ac8d3f0564",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MStationWallet",
            "label": "pause",
            "type": "t_bool",
            "src": "contracts/treasury/MStationWallet.sol:26"
          },
          {
            "contract": "MStationWallet",
            "label": "whitelistOperator",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/treasury/MStationWallet.sol:28"
          },
          {
            "contract": "MStationWallet",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/treasury/MStationWallet.sol:29"
          },
          {
            "contract": "MStationWallet",
            "label": "mstTokenAddress",
            "type": "t_address",
            "src": "contracts/treasury/MStationWallet.sol:30"
          },
          {
            "contract": "MStationWallet",
            "label": "bscsTokenAddress",
            "type": "t_address",
            "src": "contracts/treasury/MStationWallet.sol:32"
          },
          {
            "contract": "MStationWallet",
            "label": "walletTransCounter",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/treasury/MStationWallet.sol:34"
          },
          {
            "contract": "MStationWallet",
            "label": "depositCounter",
            "type": "t_uint256",
            "src": "contracts/treasury/MStationWallet.sol:35"
          },
          {
            "contract": "MStationWallet",
            "label": "depositTransactions",
            "type": "t_mapping(t_uint256,t_struct(Transaction)30770_storage)",
            "src": "contracts/treasury/MStationWallet.sol:37"
          },
          {
            "contract": "MStationWallet",
            "label": "withdrawTransactions",
            "type": "t_mapping(t_uint256,t_struct(Transaction)30770_storage)",
            "src": "contracts/treasury/MStationWallet.sol:39"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Transaction)30770_storage)": {
            "label": "mapping(uint256 => struct MStationWallet.Transaction)"
          },
          "t_struct(Transaction)30770_storage": {
            "label": "struct MStationWallet.Transaction",
            "members": [
              {
                "label": "isDeposit",
                "type": "t_bool"
              },
              {
                "label": "tId",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "56099618d3c6694385f86e8daf176fe53f20193dead94393199a9d4f0db24969": {
      "address": "0x500400dD207ba336DDF3726Cc398A95F71350e36",
      "txHash": "0x4070d90dc4b76b790f137472a1a79938ccab61df4897e0e21e55c8b0e30a9162",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:26"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(IERC20Upgradeable)2772",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(IERC20Upgradeable)2772",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8672",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16930_storage))",
            "src": "contracts/pve/MstationPve.sol:95"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16935_storage)",
            "src": "contracts/pve/MstationPve.sol:96"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16946_storage)",
            "src": "contracts/pve/MstationPve.sol:97"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16953_storage)",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16964_storage)",
            "src": "contracts/pve/MstationPve.sol:99"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16971_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:101"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:103"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16980_storage)",
            "src": "contracts/pve/MstationPve.sol:104"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16953_storage)",
            "src": "contracts/pve/MstationPve.sol:105"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16964_storage))",
            "src": "contracts/pve/MstationPve.sol:106"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16990_storage",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16985_storage)",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "walletCoolingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:115"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IERC20Upgradeable)2772": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IBSCD)8672": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16930_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16930_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16930_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16935_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16935_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16946_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16946_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16953_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16953_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16964_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16964_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16971_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16971_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16980_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16980_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16964_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16990_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16985_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16985_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "a789a6449a1078dfe5b94472db3ab1434e2912fea6371f67d115998ca9cb0c8b": {
      "address": "0xAcf66b7c559D73676D9702a778258ed26C5C3e8f",
      "txHash": "0x1537b435d319c754072eee4f421f8764170a47d5a19e2a84a9e57fb856f051d0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "MstationPvE",
            "label": "advantureId",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:26"
          },
          {
            "contract": "MstationPvE",
            "label": "nonceRandom",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:27"
          },
          {
            "contract": "MstationPvE",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:28"
          },
          {
            "contract": "MstationPvE",
            "label": "burnWallet",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:29"
          },
          {
            "contract": "MstationPvE",
            "label": "mstAddress",
            "type": "t_contract(IERC20Upgradeable)2772",
            "src": "contracts/pve/MstationPve.sol:30"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdAddress",
            "type": "t_contract(IERC20Upgradeable)2772",
            "src": "contracts/pve/MstationPve.sol:31"
          },
          {
            "contract": "MstationPvE",
            "label": "iBscd",
            "type": "t_contract(IBSCD)8672",
            "src": "contracts/pve/MstationPve.sol:32"
          },
          {
            "contract": "MstationPvE",
            "label": "bscdTokenAddress",
            "type": "t_address",
            "src": "contracts/pve/MstationPve.sol:33"
          },
          {
            "contract": "MstationPvE",
            "label": "luckyRatio",
            "type": "t_uint256",
            "src": "contracts/pve/MstationPve.sol:34"
          },
          {
            "contract": "MstationPvE",
            "label": "requireBSCD",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/pve/MstationPve.sol:35"
          },
          {
            "contract": "MstationPvE",
            "label": "battleHistory",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16930_storage))",
            "src": "contracts/pve/MstationPve.sol:95"
          },
          {
            "contract": "MstationPvE",
            "label": "listMonster",
            "type": "t_mapping(t_uint64,t_struct(Monster)16935_storage)",
            "src": "contracts/pve/MstationPve.sol:96"
          },
          {
            "contract": "MstationPvE",
            "label": "listBattleConfig",
            "type": "t_mapping(t_uint16,t_struct(BattleConfig)16946_storage)",
            "src": "contracts/pve/MstationPve.sol:97"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16953_storage)",
            "src": "contracts/pve/MstationPve.sol:98"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLogs",
            "type": "t_mapping(t_uint256,t_struct(HeroReward)16964_storage)",
            "src": "contracts/pve/MstationPve.sol:99"
          },
          {
            "contract": "MstationPvE",
            "label": "userRewards",
            "type": "t_mapping(t_address,t_struct(UserReward)16971_storage)",
            "src": "contracts/pve/MstationPve.sol:100"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/pve/MstationPve.sol:101"
          },
          {
            "contract": "MstationPvE",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:102"
          },
          {
            "contract": "MstationPvE",
            "label": "whitelistNFTContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/pve/MstationPve.sol:103"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewards",
            "type": "t_mapping(t_address,t_struct(ExtraReward)16980_storage)",
            "src": "contracts/pve/MstationPve.sol:104"
          },
          {
            "contract": "MstationPvE",
            "label": "extraRewardConfigs",
            "type": "t_mapping(t_uint16,t_struct(RewardConfig)16953_storage)",
            "src": "contracts/pve/MstationPve.sol:105"
          },
          {
            "contract": "MstationPvE",
            "label": "rewardLevelLogs",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16964_storage))",
            "src": "contracts/pve/MstationPve.sol:106"
          },
          {
            "contract": "MstationPvE",
            "label": "pillFee",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:107"
          },
          {
            "contract": "MstationPvE",
            "label": "poolReward",
            "type": "t_struct(PoolReward)16990_storage",
            "src": "contracts/pve/MstationPve.sol:108"
          },
          {
            "contract": "MstationPvE",
            "label": "poolRewardMonsters",
            "type": "t_mapping(t_uint256,t_struct(PoolRewardMonster)16985_storage)",
            "src": "contracts/pve/MstationPve.sol:109"
          },
          {
            "contract": "MstationPvE",
            "label": "pausePvE",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:110"
          },
          {
            "contract": "MstationPvE",
            "label": "pauseClaimReward",
            "type": "t_bool",
            "src": "contracts/pve/MstationPve.sol:111"
          },
          {
            "contract": "MstationPvE",
            "label": "battleLogs",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/pve/MstationPve.sol:112"
          },
          {
            "contract": "MstationPvE",
            "label": "addressConfigs",
            "type": "t_mapping(t_uint32,t_address)",
            "src": "contracts/pve/MstationPve.sol:113"
          },
          {
            "contract": "MstationPvE",
            "label": "heroCoolingTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:114"
          },
          {
            "contract": "MstationPvE",
            "label": "walletCoolingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/pve/MstationPve.sol:115"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IERC20Upgradeable)2772": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IBSCD)8672": {
            "label": "contract IBSCD"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Battle)16930_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationPvE.Battle))"
          },
          "t_mapping(t_uint256,t_struct(Battle)16930_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.Battle)"
          },
          "t_struct(Battle)16930_storage": {
            "label": "struct MstationPvE.Battle",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "battleId",
                "type": "t_uint256"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint64,t_struct(Monster)16935_storage)": {
            "label": "mapping(uint64 => struct MstationPvE.Monster)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_struct(Monster)16935_storage": {
            "label": "struct MstationPvE.Monster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(BattleConfig)16946_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.BattleConfig)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_struct(BattleConfig)16946_storage": {
            "label": "struct MstationPvE.BattleConfig",
            "members": [
              {
                "label": "locationId",
                "type": "t_uint16"
              },
              {
                "label": "numMonster",
                "type": "t_uint16"
              },
              {
                "label": "numBoss",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint16,t_struct(RewardConfig)16953_storage)": {
            "label": "mapping(uint16 => struct MstationPvE.RewardConfig)"
          },
          "t_struct(RewardConfig)16953_storage": {
            "label": "struct MstationPvE.RewardConfig",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(HeroReward)16964_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.HeroReward)"
          },
          "t_struct(HeroReward)16964_storage": {
            "label": "struct MstationPvE.HeroReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardedMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardedBSCD",
                "type": "t_uint256"
              },
              {
                "label": "heroHealth",
                "type": "t_uint16"
              },
              {
                "label": "heroLevel",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UserReward)16971_storage)": {
            "label": "mapping(address => struct MstationPvE.UserReward)"
          },
          "t_struct(UserReward)16971_storage": {
            "label": "struct MstationPvE.UserReward",
            "members": [
              {
                "label": "userAddress",
                "type": "t_address"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(ExtraReward)16980_storage)": {
            "label": "mapping(address => struct MstationPvE.ExtraReward)"
          },
          "t_struct(ExtraReward)16980_storage": {
            "label": "struct MstationPvE.ExtraReward",
            "members": [
              {
                "label": "numBattle",
                "type": "t_uint16"
              },
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              },
              {
                "label": "rewardMaterial",
                "type": "t_uint16"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(HeroReward)16964_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct MstationPvE.HeroReward))"
          },
          "t_struct(PoolReward)16990_storage": {
            "label": "struct MstationPvE.PoolReward",
            "members": [
              {
                "label": "totalRewardMST",
                "type": "t_uint256"
              },
              {
                "label": "spentRewardMST",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(PoolRewardMonster)16985_storage)": {
            "label": "mapping(uint256 => struct MstationPvE.PoolRewardMonster)"
          },
          "t_struct(PoolRewardMonster)16985_storage": {
            "label": "struct MstationPvE.PoolRewardMonster",
            "members": [
              {
                "label": "rewardMST",
                "type": "t_uint256"
              },
              {
                "label": "rewardBSCD",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "9a72f080921b54ab7603562f4ea4249280fc25b8931ed0d375dd10f323ccda02": {
      "address": "0x1b5e404d22B37Fe34306A8498d024e5a9f37EaA8",
      "layout": {
        "solcVersion": "0.8.4",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "pause",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:27"
          },
          {
            "label": "rewardPerInvitation",
            "offset": 0,
            "slot": "152",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:29"
          },
          {
            "label": "rewardTokenAddress",
            "offset": 0,
            "slot": "153",
            "type": "t_contract(IERC20)1099",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:31"
          },
          {
            "label": "rewardWallet",
            "offset": 0,
            "slot": "154",
            "type": "t_address",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:33"
          },
          {
            "label": "userRewards",
            "offset": 0,
            "slot": "155",
            "type": "t_mapping(t_address,t_struct(UserReward)1441_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:35"
          },
          {
            "label": "userRewarded",
            "offset": 0,
            "slot": "156",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:37"
          },
          {
            "label": "whitelistOperator",
            "offset": 0,
            "slot": "157",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:39"
          },
          {
            "label": "bonusPercent",
            "offset": 0,
            "slot": "158",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:41"
          },
          {
            "label": "userRewards2",
            "offset": 0,
            "slot": "159",
            "type": "t_mapping(t_address,t_struct(UserReward)1441_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:43"
          },
          {
            "label": "referralAddress",
            "offset": 0,
            "slot": "160",
            "type": "t_mapping(t_address,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:45"
          },
          {
            "label": "claimed",
            "offset": 0,
            "slot": "161",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:46"
          },
          {
            "label": "addressConfigs",
            "offset": 0,
            "slot": "162",
            "type": "t_mapping(t_uint32,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:47"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20)1099": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserReward)1441_storage)": {
            "label": "mapping(address => struct ReferralBonus.UserReward)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)",
            "numberOfBytes": "32"
          },
          "t_struct(UserReward)1441_storage": {
            "label": "struct ReferralBonus.UserReward",
            "members": [
              {
                "label": "rewardAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "deptAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "d9a053d030566d8da29a84016f2bbd5a8f1ec8a5c56dfc6ddc54c50bcad6d33a": {
      "address": "0x03847C2f422f3F961Ed00c187A56123ed25896A2",
      "txHash": "0x57547f2fb22bb23e840bd81c4b9b5a36680d876ce61479e4c4e9287c897854a7",
      "layout": {
        "solcVersion": "0.8.4",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "pause",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:28"
          },
          {
            "label": "rewardPerInvitation",
            "offset": 0,
            "slot": "152",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:30"
          },
          {
            "label": "rewardTokenAddress",
            "offset": 0,
            "slot": "153",
            "type": "t_contract(IERC20)1099",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:32"
          },
          {
            "label": "rewardWallet",
            "offset": 0,
            "slot": "154",
            "type": "t_address",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:34"
          },
          {
            "label": "userRewards",
            "offset": 0,
            "slot": "155",
            "type": "t_mapping(t_address,t_struct(UserReward)1442_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:36"
          },
          {
            "label": "userRewarded",
            "offset": 0,
            "slot": "156",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:38"
          },
          {
            "label": "whitelistOperator",
            "offset": 0,
            "slot": "157",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:40"
          },
          {
            "label": "bonusPercent",
            "offset": 0,
            "slot": "158",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:42"
          },
          {
            "label": "userRewards2",
            "offset": 0,
            "slot": "159",
            "type": "t_mapping(t_address,t_struct(UserReward)1442_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:44"
          },
          {
            "label": "referralAddress",
            "offset": 0,
            "slot": "160",
            "type": "t_mapping(t_address,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:46"
          },
          {
            "label": "claimed",
            "offset": 0,
            "slot": "161",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:47"
          },
          {
            "label": "addressConfigs",
            "offset": 0,
            "slot": "162",
            "type": "t_mapping(t_uint32,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:48"
          },
          {
            "label": "limitAmount",
            "offset": 0,
            "slot": "163",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:51"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20)1099": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserReward)1442_storage)": {
            "label": "mapping(address => struct ReferralBonus.UserReward)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)",
            "numberOfBytes": "32"
          },
          "t_struct(UserReward)1442_storage": {
            "label": "struct ReferralBonus.UserReward",
            "members": [
              {
                "label": "rewardAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "deptAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "a65ee79fe3ede1f5b5fed6afd51fb978f706d0e783166e9c065fbd4587199cfa": {
      "address": "0x99Af8BFDC2ebABcDABD255Ff738954e7d2A38988",
      "txHash": "0xbc26b5eafe4823b5beb18870bc98f3f8e68b5ebd6e059897de7e78118c3f3d76",
      "layout": {
        "solcVersion": "0.8.4",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "pause",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:28"
          },
          {
            "label": "rewardPerInvitation",
            "offset": 0,
            "slot": "152",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:30"
          },
          {
            "label": "rewardTokenAddress",
            "offset": 0,
            "slot": "153",
            "type": "t_contract(IERC20)1099",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:32"
          },
          {
            "label": "rewardWallet",
            "offset": 0,
            "slot": "154",
            "type": "t_address",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:34"
          },
          {
            "label": "userRewards",
            "offset": 0,
            "slot": "155",
            "type": "t_mapping(t_address,t_struct(UserReward)1442_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:36"
          },
          {
            "label": "userRewarded",
            "offset": 0,
            "slot": "156",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:38"
          },
          {
            "label": "whitelistOperator",
            "offset": 0,
            "slot": "157",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:40"
          },
          {
            "label": "bonusPercent",
            "offset": 0,
            "slot": "158",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:42"
          },
          {
            "label": "userRewards2",
            "offset": 0,
            "slot": "159",
            "type": "t_mapping(t_address,t_struct(UserReward)1442_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:44"
          },
          {
            "label": "referralAddress",
            "offset": 0,
            "slot": "160",
            "type": "t_mapping(t_address,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:46"
          },
          {
            "label": "claimed",
            "offset": 0,
            "slot": "161",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:47"
          },
          {
            "label": "addressConfigs",
            "offset": 0,
            "slot": "162",
            "type": "t_mapping(t_uint32,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:48"
          },
          {
            "label": "limitAmount",
            "offset": 0,
            "slot": "163",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:51"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20)1099": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserReward)1442_storage)": {
            "label": "mapping(address => struct ReferralBonus.UserReward)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)",
            "numberOfBytes": "32"
          },
          "t_struct(UserReward)1442_storage": {
            "label": "struct ReferralBonus.UserReward",
            "members": [
              {
                "label": "rewardAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "deptAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "d93ca9a036bcce1ca06ba809bd1472bacad127529d0f317cdf4e9a37c9330307": {
      "address": "0x65BC1a16b763F9EaB7ECA6D7EC973C697EFc45cb",
      "txHash": "0x4071cf4f565eff2dc922ee12f6fc1a6c18258d6083d74031c6f0187b7a323ffd",
      "layout": {
        "solcVersion": "0.8.4",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "pause",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:28"
          },
          {
            "label": "rewardPerInvitation",
            "offset": 0,
            "slot": "152",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:30"
          },
          {
            "label": "rewardTokenAddress",
            "offset": 0,
            "slot": "153",
            "type": "t_contract(IERC20)1099",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:32"
          },
          {
            "label": "rewardWallet",
            "offset": 0,
            "slot": "154",
            "type": "t_address",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:34"
          },
          {
            "label": "userRewards",
            "offset": 0,
            "slot": "155",
            "type": "t_mapping(t_address,t_struct(UserReward)1442_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:36"
          },
          {
            "label": "userRewarded",
            "offset": 0,
            "slot": "156",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:38"
          },
          {
            "label": "whitelistOperator",
            "offset": 0,
            "slot": "157",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:40"
          },
          {
            "label": "bonusPercent",
            "offset": 0,
            "slot": "158",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:42"
          },
          {
            "label": "userRewards2",
            "offset": 0,
            "slot": "159",
            "type": "t_mapping(t_address,t_struct(UserReward)1442_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:44"
          },
          {
            "label": "referralAddress",
            "offset": 0,
            "slot": "160",
            "type": "t_mapping(t_address,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:46"
          },
          {
            "label": "claimed",
            "offset": 0,
            "slot": "161",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:47"
          },
          {
            "label": "addressConfigs",
            "offset": 0,
            "slot": "162",
            "type": "t_mapping(t_uint32,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:48"
          },
          {
            "label": "limitAmount",
            "offset": 0,
            "slot": "163",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:51"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20)1099": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserReward)1442_storage)": {
            "label": "mapping(address => struct ReferralBonus.UserReward)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)",
            "numberOfBytes": "32"
          },
          "t_struct(UserReward)1442_storage": {
            "label": "struct ReferralBonus.UserReward",
            "members": [
              {
                "label": "rewardAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "deptAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "a729b285c37231ef5a02e4f21b30f902823237c3ab9025c3a8fef11e3ff68c2f": {
      "address": "0xc52161A0Db59b6f00A50891875Ecac3327c97353",
      "txHash": "0x53119900850c3d12a92a804b99c46941e254a28a0cdd3375be14daf11da20640",
      "layout": {
        "solcVersion": "0.8.4",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "pause",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:28"
          },
          {
            "label": "rewardPerInvitation",
            "offset": 0,
            "slot": "152",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:30"
          },
          {
            "label": "rewardTokenAddress",
            "offset": 0,
            "slot": "153",
            "type": "t_contract(IERC20)1099",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:32"
          },
          {
            "label": "rewardWallet",
            "offset": 0,
            "slot": "154",
            "type": "t_address",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:34"
          },
          {
            "label": "userRewards",
            "offset": 0,
            "slot": "155",
            "type": "t_mapping(t_address,t_struct(UserReward)1442_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:36"
          },
          {
            "label": "userRewarded",
            "offset": 0,
            "slot": "156",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:38"
          },
          {
            "label": "whitelistOperator",
            "offset": 0,
            "slot": "157",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:40"
          },
          {
            "label": "bonusPercent",
            "offset": 0,
            "slot": "158",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:42"
          },
          {
            "label": "userRewards2",
            "offset": 0,
            "slot": "159",
            "type": "t_mapping(t_address,t_struct(UserReward)1442_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:44"
          },
          {
            "label": "referralAddress",
            "offset": 0,
            "slot": "160",
            "type": "t_mapping(t_address,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:46"
          },
          {
            "label": "claimed",
            "offset": 0,
            "slot": "161",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:47"
          },
          {
            "label": "addressConfigs",
            "offset": 0,
            "slot": "162",
            "type": "t_mapping(t_uint32,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:48"
          },
          {
            "label": "limitAmount",
            "offset": 0,
            "slot": "163",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:51"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20)1099": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserReward)1442_storage)": {
            "label": "mapping(address => struct ReferralBonus.UserReward)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)",
            "numberOfBytes": "32"
          },
          "t_struct(UserReward)1442_storage": {
            "label": "struct ReferralBonus.UserReward",
            "members": [
              {
                "label": "rewardAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "deptAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "0444eecafa3686634294fd07bad51e05e62364f5d19a7695b0461dfafc668457": {
      "address": "0xFBB30028329B3Fbdb71fC726C01671C1C17f69f5",
      "txHash": "0x34657ad7f6337a3c315faef4fb1ef41d2dda50a870883888a5d9de14c093267f",
      "layout": {
        "solcVersion": "0.8.4",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "pause",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:28"
          },
          {
            "label": "rewardPerInvitation",
            "offset": 0,
            "slot": "152",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:30"
          },
          {
            "label": "rewardTokenAddress",
            "offset": 0,
            "slot": "153",
            "type": "t_contract(IERC20)1099",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:32"
          },
          {
            "label": "rewardWallet",
            "offset": 0,
            "slot": "154",
            "type": "t_address",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:34"
          },
          {
            "label": "userRewards",
            "offset": 0,
            "slot": "155",
            "type": "t_mapping(t_address,t_struct(UserReward)1442_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:36"
          },
          {
            "label": "userRewarded",
            "offset": 0,
            "slot": "156",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:38"
          },
          {
            "label": "whitelistOperator",
            "offset": 0,
            "slot": "157",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:40"
          },
          {
            "label": "bonusPercent",
            "offset": 0,
            "slot": "158",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:42"
          },
          {
            "label": "userRewards2",
            "offset": 0,
            "slot": "159",
            "type": "t_mapping(t_address,t_struct(UserReward)1442_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:44"
          },
          {
            "label": "referralAddress",
            "offset": 0,
            "slot": "160",
            "type": "t_mapping(t_address,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:46"
          },
          {
            "label": "claimed",
            "offset": 0,
            "slot": "161",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:47"
          },
          {
            "label": "addressConfigs",
            "offset": 0,
            "slot": "162",
            "type": "t_mapping(t_uint32,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:48"
          },
          {
            "label": "limitAmount",
            "offset": 0,
            "slot": "163",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:51"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20)1099": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserReward)1442_storage)": {
            "label": "mapping(address => struct ReferralBonus.UserReward)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)",
            "numberOfBytes": "32"
          },
          "t_struct(UserReward)1442_storage": {
            "label": "struct ReferralBonus.UserReward",
            "members": [
              {
                "label": "rewardAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "deptAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "2143da2651e6005cca3e006f5de4266bb9e64c80ecf1d8f4ee51a2cae5d69397": {
      "address": "0x06120458E736c73AC8d1D253e00465c68b9370DC",
      "txHash": "0x3f85c20490cd64160dc63ab9a0b74bd38704084b6057d8222538cfd60606c5ce",
      "layout": {
        "solcVersion": "0.8.4",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "pause",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:28"
          },
          {
            "label": "rewardPerInvitation",
            "offset": 0,
            "slot": "152",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:30"
          },
          {
            "label": "rewardTokenAddress",
            "offset": 0,
            "slot": "153",
            "type": "t_contract(IERC20)1099",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:32"
          },
          {
            "label": "rewardWallet",
            "offset": 0,
            "slot": "154",
            "type": "t_address",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:34"
          },
          {
            "label": "userRewards",
            "offset": 0,
            "slot": "155",
            "type": "t_mapping(t_address,t_struct(UserReward)1442_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:36"
          },
          {
            "label": "userRewarded",
            "offset": 0,
            "slot": "156",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:38"
          },
          {
            "label": "whitelistOperator",
            "offset": 0,
            "slot": "157",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:40"
          },
          {
            "label": "bonusPercent",
            "offset": 0,
            "slot": "158",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:42"
          },
          {
            "label": "userRewards2",
            "offset": 0,
            "slot": "159",
            "type": "t_mapping(t_address,t_struct(UserReward)1442_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:44"
          },
          {
            "label": "referralAddress",
            "offset": 0,
            "slot": "160",
            "type": "t_mapping(t_address,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:46"
          },
          {
            "label": "claimed",
            "offset": 0,
            "slot": "161",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:47"
          },
          {
            "label": "addressConfigs",
            "offset": 0,
            "slot": "162",
            "type": "t_mapping(t_uint32,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:48"
          },
          {
            "label": "limitAmount",
            "offset": 0,
            "slot": "163",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:51"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20)1099": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserReward)1442_storage)": {
            "label": "mapping(address => struct ReferralBonus.UserReward)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)",
            "numberOfBytes": "32"
          },
          "t_struct(UserReward)1442_storage": {
            "label": "struct ReferralBonus.UserReward",
            "members": [
              {
                "label": "rewardAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "deptAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "bca461ce7e2fa21d7e75c183f9f1376b8f9883083d72968e84bbe14f5432eb54": {
      "address": "0x896dAc6f46026DC096D06c43d1E3DC8058f444f9",
      "txHash": "0x7ec74224773d218ff213febb47abc875d3798b639547927713cc2797d420037e",
      "layout": {
        "solcVersion": "0.8.4",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "pause",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:28"
          },
          {
            "label": "rewardPerInvitation",
            "offset": 0,
            "slot": "152",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:30"
          },
          {
            "label": "rewardTokenAddress",
            "offset": 0,
            "slot": "153",
            "type": "t_contract(IERC20)1099",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:32"
          },
          {
            "label": "rewardWallet",
            "offset": 0,
            "slot": "154",
            "type": "t_address",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:34"
          },
          {
            "label": "userRewards",
            "offset": 0,
            "slot": "155",
            "type": "t_mapping(t_address,t_struct(UserReward)1442_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:36"
          },
          {
            "label": "userRewarded",
            "offset": 0,
            "slot": "156",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:38"
          },
          {
            "label": "whitelistOperator",
            "offset": 0,
            "slot": "157",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:40"
          },
          {
            "label": "bonusPercent",
            "offset": 0,
            "slot": "158",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:42"
          },
          {
            "label": "userRewards2",
            "offset": 0,
            "slot": "159",
            "type": "t_mapping(t_address,t_struct(UserReward)1442_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:44"
          },
          {
            "label": "referralAddress",
            "offset": 0,
            "slot": "160",
            "type": "t_mapping(t_address,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:46"
          },
          {
            "label": "claimed",
            "offset": 0,
            "slot": "161",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:47"
          },
          {
            "label": "addressConfigs",
            "offset": 0,
            "slot": "162",
            "type": "t_mapping(t_uint32,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:48"
          },
          {
            "label": "limitAmount",
            "offset": 0,
            "slot": "163",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:51"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20)1099": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserReward)1442_storage)": {
            "label": "mapping(address => struct ReferralBonus.UserReward)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)",
            "numberOfBytes": "32"
          },
          "t_struct(UserReward)1442_storage": {
            "label": "struct ReferralBonus.UserReward",
            "members": [
              {
                "label": "rewardAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "deptAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "eeaa8267e7db150f44938906b0e62de9f6eede53524138e69e8f321c38807977": {
      "address": "0xBd646B31aa050503Abd3a8D864fEEA2814081007",
      "txHash": "0x9edab9a774796861025557bce2559b4d7c0013bcd98b1ad9bd0458a97236d2b7",
      "layout": {
        "solcVersion": "0.8.4",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "pause",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:27"
          },
          {
            "label": "rewardPerInvitation",
            "offset": 0,
            "slot": "152",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:29"
          },
          {
            "label": "rewardTokenAddress",
            "offset": 0,
            "slot": "153",
            "type": "t_contract(IERC20)1099",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:31"
          },
          {
            "label": "rewardWallet",
            "offset": 0,
            "slot": "154",
            "type": "t_address",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:33"
          },
          {
            "label": "userRewards",
            "offset": 0,
            "slot": "155",
            "type": "t_mapping(t_address,t_struct(UserReward)1441_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:35"
          },
          {
            "label": "userRewarded",
            "offset": 0,
            "slot": "156",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:37"
          },
          {
            "label": "whitelistOperator",
            "offset": 0,
            "slot": "157",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:39"
          },
          {
            "label": "bonusPercent",
            "offset": 0,
            "slot": "158",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:41"
          },
          {
            "label": "userRewards2",
            "offset": 0,
            "slot": "159",
            "type": "t_mapping(t_address,t_struct(UserReward)1441_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:43"
          },
          {
            "label": "referralAddress",
            "offset": 0,
            "slot": "160",
            "type": "t_mapping(t_address,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:45"
          },
          {
            "label": "claimed",
            "offset": 0,
            "slot": "161",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:46"
          },
          {
            "label": "addressConfigs",
            "offset": 0,
            "slot": "162",
            "type": "t_mapping(t_uint32,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:47"
          },
          {
            "label": "limitAmount",
            "offset": 0,
            "slot": "163",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\ReferrerBonus\\ReferralBonus.sol:50"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20)1099": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserReward)1441_storage)": {
            "label": "mapping(address => struct ReferralBonus.UserReward)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)",
            "numberOfBytes": "32"
          },
          "t_struct(UserReward)1441_storage": {
            "label": "struct ReferralBonus.UserReward",
            "members": [
              {
                "label": "rewardAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "deptAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "bcdfaf91dc0fb33ef1d24f2c06c8c59582e04976d86fc0df89d3d58a9429379f": {
      "address": "0xc14149cf9A6469bC825ce51aE8599C385Bb9E619",
      "layout": {
        "solcVersion": "0.8.4",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "isInitialized",
            "offset": 0,
            "slot": "101",
            "type": "t_bool",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:46"
          },
          {
            "label": "nonceRandom",
            "offset": 0,
            "slot": "102",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:47"
          },
          {
            "label": "treasury",
            "offset": 0,
            "slot": "103",
            "type": "t_address",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:48"
          },
          {
            "label": "burnWallet",
            "offset": 0,
            "slot": "104",
            "type": "t_address",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:49"
          },
          {
            "label": "bscsAddress",
            "offset": 0,
            "slot": "105",
            "type": "t_contract(ERC20Upgradeable)893",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:50"
          },
          {
            "label": "bscdAddress",
            "offset": 0,
            "slot": "106",
            "type": "t_contract(ERC20Upgradeable)893",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:51"
          },
          {
            "label": "busdAddress",
            "offset": 0,
            "slot": "107",
            "type": "t_contract(ERC20Upgradeable)893",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:52"
          },
          {
            "label": "maxSupply",
            "offset": 0,
            "slot": "108",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:53"
          },
          {
            "label": "totalSupplied",
            "offset": 0,
            "slot": "109",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:54"
          },
          {
            "label": "nftSlots",
            "offset": 0,
            "slot": "110",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:55"
          },
          {
            "label": "baseMintFee",
            "offset": 0,
            "slot": "111",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:56"
          },
          {
            "label": "baseMintLimitedFee",
            "offset": 0,
            "slot": "112",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:57"
          },
          {
            "label": "tokenMintLimitedFee",
            "offset": 0,
            "slot": "113",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:58"
          },
          {
            "label": "serviceFee",
            "offset": 0,
            "slot": "114",
            "type": "t_uint16",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:59"
          },
          {
            "label": "characterContracts",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_struct(CharacterContract)1750_storage)dyn_storage",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:61"
          },
          {
            "label": "tokenId",
            "offset": 0,
            "slot": "116",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:63"
          },
          {
            "label": "blackList",
            "offset": 0,
            "slot": "117",
            "type": "t_mapping(t_uint256,t_bool)",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:64"
          },
          {
            "label": "priorityList",
            "offset": 0,
            "slot": "118",
            "type": "t_mapping(t_uint256,t_bool)",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:65"
          },
          {
            "label": "bnbMintFee",
            "offset": 0,
            "slot": "119",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:66"
          },
          {
            "label": "nonceRandom2",
            "offset": 0,
            "slot": "120",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:67"
          },
          {
            "label": "nonceRandom3",
            "offset": 0,
            "slot": "121",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:68"
          },
          {
            "label": "characterContractMap",
            "offset": 0,
            "slot": "122",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)1750_storage)",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:69"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "123",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:72"
          },
          {
            "label": "userClaimable",
            "offset": 0,
            "slot": "124",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Hero)1795_storage))",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:73"
          },
          {
            "label": "userClaimCounter",
            "offset": 0,
            "slot": "125",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:74"
          },
          {
            "label": "userMintBlock",
            "offset": 0,
            "slot": "126",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:75"
          },
          {
            "label": "referralAddress",
            "offset": 0,
            "slot": "127",
            "type": "t_address",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:76"
          },
          {
            "label": "walletAddress",
            "offset": 0,
            "slot": "128",
            "type": "t_address",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:77"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_struct(CharacterContract)1750_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint16)dyn_storage": {
            "label": "uint16[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(ERC20Upgradeable)893": {
            "label": "contract ERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Hero)1795_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationNFT.Hero))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)1750_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Hero)1795_storage)": {
            "label": "mapping(uint256 => struct MstationNFT.Hero)",
            "numberOfBytes": "32"
          },
          "t_struct(CharacterContract)1750_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "rarity",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "contractAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Hero)1795_storage": {
            "label": "struct MstationNFT.Hero",
            "members": [
              {
                "label": "nftAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "tokenId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "feeMST",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "feeBUSD",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "attributes",
                "type": "t_array(t_uint16)dyn_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "455a4cf4b71579a7c85fc0c9530f86a85ad84ee181ae77bf4db76ebf372f068f": {
      "address": "0xEC1E118Fb658F2BE5fA5B25566b8eE80Af87c574",
      "txHash": "0x061f1bdd45f3ad9848992b9d9a02578e971a98f2d47a7e29843863d952b25daa",
      "layout": {
        "solcVersion": "0.8.4",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "isInitialized",
            "offset": 0,
            "slot": "101",
            "type": "t_bool",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:46"
          },
          {
            "label": "nonceRandom",
            "offset": 0,
            "slot": "102",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:47"
          },
          {
            "label": "treasury",
            "offset": 0,
            "slot": "103",
            "type": "t_address",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:48"
          },
          {
            "label": "burnWallet",
            "offset": 0,
            "slot": "104",
            "type": "t_address",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:49"
          },
          {
            "label": "bscsAddress",
            "offset": 0,
            "slot": "105",
            "type": "t_contract(ERC20Upgradeable)893",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:50"
          },
          {
            "label": "bscdAddress",
            "offset": 0,
            "slot": "106",
            "type": "t_contract(ERC20Upgradeable)893",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:51"
          },
          {
            "label": "busdAddress",
            "offset": 0,
            "slot": "107",
            "type": "t_contract(ERC20Upgradeable)893",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:52"
          },
          {
            "label": "maxSupply",
            "offset": 0,
            "slot": "108",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:53"
          },
          {
            "label": "totalSupplied",
            "offset": 0,
            "slot": "109",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:54"
          },
          {
            "label": "nftSlots",
            "offset": 0,
            "slot": "110",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:55"
          },
          {
            "label": "baseMintFee",
            "offset": 0,
            "slot": "111",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:56"
          },
          {
            "label": "baseMintLimitedFee",
            "offset": 0,
            "slot": "112",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:57"
          },
          {
            "label": "tokenMintLimitedFee",
            "offset": 0,
            "slot": "113",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:58"
          },
          {
            "label": "serviceFee",
            "offset": 0,
            "slot": "114",
            "type": "t_uint16",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:59"
          },
          {
            "label": "characterContracts",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_struct(CharacterContract)1750_storage)dyn_storage",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:61"
          },
          {
            "label": "tokenId",
            "offset": 0,
            "slot": "116",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:63"
          },
          {
            "label": "blackList",
            "offset": 0,
            "slot": "117",
            "type": "t_mapping(t_uint256,t_bool)",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:64"
          },
          {
            "label": "priorityList",
            "offset": 0,
            "slot": "118",
            "type": "t_mapping(t_uint256,t_bool)",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:65"
          },
          {
            "label": "bnbMintFee",
            "offset": 0,
            "slot": "119",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:66"
          },
          {
            "label": "nonceRandom2",
            "offset": 0,
            "slot": "120",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:67"
          },
          {
            "label": "nonceRandom3",
            "offset": 0,
            "slot": "121",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:68"
          },
          {
            "label": "characterContractMap",
            "offset": 0,
            "slot": "122",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)1750_storage)",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:69"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "123",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:72"
          },
          {
            "label": "userClaimable",
            "offset": 0,
            "slot": "124",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Hero)1795_storage))",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:73"
          },
          {
            "label": "userClaimCounter",
            "offset": 0,
            "slot": "125",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:74"
          },
          {
            "label": "userMintBlock",
            "offset": 0,
            "slot": "126",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:75"
          },
          {
            "label": "referralAddress",
            "offset": 0,
            "slot": "127",
            "type": "t_address",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:76"
          },
          {
            "label": "walletAddress",
            "offset": 0,
            "slot": "128",
            "type": "t_address",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:77"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_struct(CharacterContract)1750_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint16)dyn_storage": {
            "label": "uint16[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(ERC20Upgradeable)893": {
            "label": "contract ERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Hero)1795_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationNFT.Hero))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)1750_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Hero)1795_storage)": {
            "label": "mapping(uint256 => struct MstationNFT.Hero)",
            "numberOfBytes": "32"
          },
          "t_struct(CharacterContract)1750_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "rarity",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "contractAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Hero)1795_storage": {
            "label": "struct MstationNFT.Hero",
            "members": [
              {
                "label": "nftAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "tokenId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "feeMST",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "feeBUSD",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "attributes",
                "type": "t_array(t_uint16)dyn_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "aab0375b753fbe1d355967e6b9f6759152e7d7bd2c98b0e4e0a6259b7941aade": {
      "address": "0x3A5e52Bae78E6ba9f59931Eee3445A6D705099b2",
      "txHash": "0x4778c959b20eedf77f5091f5167bb46f03198ff88807ef53de58a19f9773c2a2",
      "layout": {
        "solcVersion": "0.8.4",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "pause",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:27"
          },
          {
            "label": "rewardPerInvitation",
            "offset": 0,
            "slot": "152",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:29"
          },
          {
            "label": "rewardTokenAddress",
            "offset": 0,
            "slot": "153",
            "type": "t_contract(IERC20)6963",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:31"
          },
          {
            "label": "rewardWallet",
            "offset": 0,
            "slot": "154",
            "type": "t_address",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:33"
          },
          {
            "label": "userRewards",
            "offset": 0,
            "slot": "155",
            "type": "t_mapping(t_address,t_struct(UserReward)23133_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:35"
          },
          {
            "label": "userRewarded",
            "offset": 0,
            "slot": "156",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:37"
          },
          {
            "label": "whitelistOperator",
            "offset": 0,
            "slot": "157",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:39"
          },
          {
            "label": "bonusPercent",
            "offset": 0,
            "slot": "158",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:41"
          },
          {
            "label": "userRewards2",
            "offset": 0,
            "slot": "159",
            "type": "t_mapping(t_address,t_struct(UserReward)23133_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:43"
          },
          {
            "label": "referralAddress",
            "offset": 0,
            "slot": "160",
            "type": "t_mapping(t_address,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:45"
          },
          {
            "label": "claimed",
            "offset": 0,
            "slot": "161",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:46"
          },
          {
            "label": "addressConfigs",
            "offset": 0,
            "slot": "162",
            "type": "t_mapping(t_uint32,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:47"
          },
          {
            "label": "limitAmount",
            "offset": 0,
            "slot": "163",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:50"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20)6963": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserReward)23133_storage)": {
            "label": "mapping(address => struct ReferralBonus.UserReward)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)",
            "numberOfBytes": "32"
          },
          "t_struct(UserReward)23133_storage": {
            "label": "struct ReferralBonus.UserReward",
            "members": [
              {
                "label": "rewardAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "deptAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "6a62a42ec80d8663a7c86aa353c677b5f7a97c0e1e57a78fd3d8785a72c2bf5f": {
      "address": "0x84f5c0FC32f5c1CcC58669670FB65C27BF56eC03",
      "txHash": "0xe18a713486552beb8b276834dfe6c0b98b2aa29d6be954a0134b078664092fba",
      "layout": {
        "solcVersion": "0.8.4",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "isInitialized",
            "offset": 0,
            "slot": "101",
            "type": "t_bool",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:46"
          },
          {
            "label": "nonceRandom",
            "offset": 0,
            "slot": "102",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:47"
          },
          {
            "label": "treasury",
            "offset": 0,
            "slot": "103",
            "type": "t_address",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:48"
          },
          {
            "label": "burnWallet",
            "offset": 0,
            "slot": "104",
            "type": "t_address",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:49"
          },
          {
            "label": "bscsAddress",
            "offset": 0,
            "slot": "105",
            "type": "t_contract(ERC20Upgradeable)2958",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:50"
          },
          {
            "label": "bscdAddress",
            "offset": 0,
            "slot": "106",
            "type": "t_contract(ERC20Upgradeable)2958",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:51"
          },
          {
            "label": "busdAddress",
            "offset": 0,
            "slot": "107",
            "type": "t_contract(ERC20Upgradeable)2958",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:52"
          },
          {
            "label": "maxSupply",
            "offset": 0,
            "slot": "108",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:53"
          },
          {
            "label": "totalSupplied",
            "offset": 0,
            "slot": "109",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:54"
          },
          {
            "label": "nftSlots",
            "offset": 0,
            "slot": "110",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:55"
          },
          {
            "label": "baseMintFee",
            "offset": 0,
            "slot": "111",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:56"
          },
          {
            "label": "baseMintLimitedFee",
            "offset": 0,
            "slot": "112",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:57"
          },
          {
            "label": "tokenMintLimitedFee",
            "offset": 0,
            "slot": "113",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:58"
          },
          {
            "label": "serviceFee",
            "offset": 0,
            "slot": "114",
            "type": "t_uint16",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:59"
          },
          {
            "label": "characterContracts",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_struct(CharacterContract)15392_storage)dyn_storage",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:61"
          },
          {
            "label": "tokenId",
            "offset": 0,
            "slot": "116",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:63"
          },
          {
            "label": "blackList",
            "offset": 0,
            "slot": "117",
            "type": "t_mapping(t_uint256,t_bool)",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:64"
          },
          {
            "label": "priorityList",
            "offset": 0,
            "slot": "118",
            "type": "t_mapping(t_uint256,t_bool)",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:65"
          },
          {
            "label": "bnbMintFee",
            "offset": 0,
            "slot": "119",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:66"
          },
          {
            "label": "nonceRandom2",
            "offset": 0,
            "slot": "120",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:67"
          },
          {
            "label": "nonceRandom3",
            "offset": 0,
            "slot": "121",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:68"
          },
          {
            "label": "characterContractMap",
            "offset": 0,
            "slot": "122",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)15392_storage)",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:69"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "123",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:72"
          },
          {
            "label": "userClaimable",
            "offset": 0,
            "slot": "124",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Hero)15437_storage))",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:73"
          },
          {
            "label": "userClaimCounter",
            "offset": 0,
            "slot": "125",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:74"
          },
          {
            "label": "userMintBlock",
            "offset": 0,
            "slot": "126",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:75"
          },
          {
            "label": "referralAddress",
            "offset": 0,
            "slot": "127",
            "type": "t_address",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:76"
          },
          {
            "label": "walletAddress",
            "offset": 0,
            "slot": "128",
            "type": "t_address",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:77"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_struct(CharacterContract)15392_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint16)dyn_storage": {
            "label": "uint16[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(ERC20Upgradeable)2958": {
            "label": "contract ERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Hero)15437_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationNFT.Hero))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)15392_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Hero)15437_storage)": {
            "label": "mapping(uint256 => struct MstationNFT.Hero)",
            "numberOfBytes": "32"
          },
          "t_struct(CharacterContract)15392_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "rarity",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "contractAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Hero)15437_storage": {
            "label": "struct MstationNFT.Hero",
            "members": [
              {
                "label": "nftAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "tokenId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "feeMST",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "feeBUSD",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "attributes",
                "type": "t_array(t_uint16)dyn_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "144131f5c2dd7d2508a1319335ffe0f989591fe836798b40e325a6858852239a": {
      "address": "0x8D2882387765b0710b07Ed1cD71F6A5f0083804a",
      "txHash": "0x7eb435c06b3a74604ff3a74c8945f9a8bb218691a829602297e273b5a6522710",
      "layout": {
        "solcVersion": "0.8.4",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "isInitialized",
            "offset": 0,
            "slot": "101",
            "type": "t_bool",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:46"
          },
          {
            "label": "nonceRandom",
            "offset": 0,
            "slot": "102",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:47"
          },
          {
            "label": "treasury",
            "offset": 0,
            "slot": "103",
            "type": "t_address",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:48"
          },
          {
            "label": "burnWallet",
            "offset": 0,
            "slot": "104",
            "type": "t_address",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:49"
          },
          {
            "label": "bscsAddress",
            "offset": 0,
            "slot": "105",
            "type": "t_contract(ERC20Upgradeable)2958",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:50"
          },
          {
            "label": "bscdAddress",
            "offset": 0,
            "slot": "106",
            "type": "t_contract(ERC20Upgradeable)2958",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:51"
          },
          {
            "label": "busdAddress",
            "offset": 0,
            "slot": "107",
            "type": "t_contract(ERC20Upgradeable)2958",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:52"
          },
          {
            "label": "maxSupply",
            "offset": 0,
            "slot": "108",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:53"
          },
          {
            "label": "totalSupplied",
            "offset": 0,
            "slot": "109",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:54"
          },
          {
            "label": "nftSlots",
            "offset": 0,
            "slot": "110",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:55"
          },
          {
            "label": "baseMintFee",
            "offset": 0,
            "slot": "111",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:56"
          },
          {
            "label": "baseMintLimitedFee",
            "offset": 0,
            "slot": "112",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:57"
          },
          {
            "label": "tokenMintLimitedFee",
            "offset": 0,
            "slot": "113",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:58"
          },
          {
            "label": "serviceFee",
            "offset": 0,
            "slot": "114",
            "type": "t_uint16",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:59"
          },
          {
            "label": "characterContracts",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_struct(CharacterContract)17007_storage)dyn_storage",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:61"
          },
          {
            "label": "tokenId",
            "offset": 0,
            "slot": "116",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:63"
          },
          {
            "label": "blackList",
            "offset": 0,
            "slot": "117",
            "type": "t_mapping(t_uint256,t_bool)",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:64"
          },
          {
            "label": "priorityList",
            "offset": 0,
            "slot": "118",
            "type": "t_mapping(t_uint256,t_bool)",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:65"
          },
          {
            "label": "bnbMintFee",
            "offset": 0,
            "slot": "119",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:66"
          },
          {
            "label": "nonceRandom2",
            "offset": 0,
            "slot": "120",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:67"
          },
          {
            "label": "nonceRandom3",
            "offset": 0,
            "slot": "121",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:68"
          },
          {
            "label": "characterContractMap",
            "offset": 0,
            "slot": "122",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)17007_storage)",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:69"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "123",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:72"
          },
          {
            "label": "userClaimable",
            "offset": 0,
            "slot": "124",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Hero)17052_storage))",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:73"
          },
          {
            "label": "userClaimCounter",
            "offset": 0,
            "slot": "125",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:74"
          },
          {
            "label": "userMintBlock",
            "offset": 0,
            "slot": "126",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:75"
          },
          {
            "label": "referralAddress",
            "offset": 0,
            "slot": "127",
            "type": "t_address",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:76"
          },
          {
            "label": "walletAddress",
            "offset": 0,
            "slot": "128",
            "type": "t_address",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:77"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_struct(CharacterContract)17007_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint16)dyn_storage": {
            "label": "uint16[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(ERC20Upgradeable)2958": {
            "label": "contract ERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Hero)17052_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationNFT.Hero))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)17007_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Hero)17052_storage)": {
            "label": "mapping(uint256 => struct MstationNFT.Hero)",
            "numberOfBytes": "32"
          },
          "t_struct(CharacterContract)17007_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "rarity",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "contractAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Hero)17052_storage": {
            "label": "struct MstationNFT.Hero",
            "members": [
              {
                "label": "nftAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "tokenId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "feeMST",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "feeBUSD",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "attributes",
                "type": "t_array(t_uint16)dyn_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "e1a895a84f5a79f14fa72edcd7362f00a3c9218568115931d011a46a6ccbcaee": {
      "address": "0x5b3707140f409Ea73026a87A4BE8998E95F96E46",
      "layout": {
        "solcVersion": "0.8.4",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "pause",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:35"
          },
          {
            "label": "whitelistOperator",
            "offset": 0,
            "slot": "152",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:37"
          },
          {
            "label": "addressConfigs",
            "offset": 0,
            "slot": "153",
            "type": "t_mapping(t_uint32,t_address)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:38"
          },
          {
            "label": "mstTokenAddress",
            "offset": 0,
            "slot": "154",
            "type": "t_address",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:39"
          },
          {
            "label": "bscsTokenAddress",
            "offset": 0,
            "slot": "155",
            "type": "t_address",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:41"
          },
          {
            "label": "walletTransCounter",
            "offset": 0,
            "slot": "156",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:43"
          },
          {
            "label": "depositCounter",
            "offset": 0,
            "slot": "157",
            "type": "t_uint256",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:44"
          },
          {
            "label": "depositTransactions",
            "offset": 0,
            "slot": "158",
            "type": "t_mapping(t_uint256,t_struct(Transaction)19460_storage)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:46"
          },
          {
            "label": "withdrawTransactions",
            "offset": 0,
            "slot": "159",
            "type": "t_mapping(t_uint256,t_struct(Transaction)19460_storage)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:48"
          },
          {
            "label": "userProfiles",
            "offset": 0,
            "slot": "160",
            "type": "t_mapping(t_address,t_struct(UserProfile)19475_storage)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:50"
          },
          {
            "label": "balanceMint",
            "offset": 0,
            "slot": "161",
            "type": "t_uint256",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:52"
          },
          {
            "label": "balanceGameReward",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:53"
          },
          {
            "label": "feeWallet",
            "offset": 0,
            "slot": "163",
            "type": "t_address",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:54"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserProfile)19475_storage)": {
            "label": "mapping(address => struct MStationWallet.UserProfile)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Transaction)19460_storage)": {
            "label": "mapping(uint256 => struct MStationWallet.Transaction)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)",
            "numberOfBytes": "32"
          },
          "t_struct(Transaction)19460_storage": {
            "label": "struct MStationWallet.Transaction",
            "members": [
              {
                "label": "isDeposit",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "tId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "owner",
                "type": "t_address",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(UserProfile)19475_storage": {
            "label": "struct MStationWallet.UserProfile",
            "members": [
              {
                "label": "status",
                "type": "t_uint16",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "credit",
                "type": "t_uint16",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "class",
                "type": "t_uint16",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "totalDeposit",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "totalWithdraw",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "balance",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "lockedAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "b6af307fbe8be8bdf9f3772a477b6d7c62d29cb768f237096bac27a5354a0050": {
      "address": "0x792E9F20F27102959477c638F93Fb672d9e85296",
      "txHash": "0x15236105ec82555490468cbd230cb5cdce45429fc2d8b49e9363726d2cad483f",
      "layout": {
        "solcVersion": "0.8.4",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "pause",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:35"
          },
          {
            "label": "whitelistOperator",
            "offset": 0,
            "slot": "152",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:37"
          },
          {
            "label": "addressConfigs",
            "offset": 0,
            "slot": "153",
            "type": "t_mapping(t_uint32,t_address)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:38"
          },
          {
            "label": "mstTokenAddress",
            "offset": 0,
            "slot": "154",
            "type": "t_address",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:39"
          },
          {
            "label": "bscsTokenAddress",
            "offset": 0,
            "slot": "155",
            "type": "t_address",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:41"
          },
          {
            "label": "walletTransCounter",
            "offset": 0,
            "slot": "156",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:43"
          },
          {
            "label": "depositCounter",
            "offset": 0,
            "slot": "157",
            "type": "t_uint256",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:44"
          },
          {
            "label": "depositTransactions",
            "offset": 0,
            "slot": "158",
            "type": "t_mapping(t_uint256,t_struct(Transaction)1459_storage)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:46"
          },
          {
            "label": "withdrawTransactions",
            "offset": 0,
            "slot": "159",
            "type": "t_mapping(t_uint256,t_struct(Transaction)1459_storage)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:48"
          },
          {
            "label": "userProfiles",
            "offset": 0,
            "slot": "160",
            "type": "t_mapping(t_address,t_struct(UserProfile)1474_storage)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:50"
          },
          {
            "label": "balanceMint",
            "offset": 0,
            "slot": "161",
            "type": "t_uint256",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:52"
          },
          {
            "label": "balanceGameReward",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:53"
          },
          {
            "label": "feeWallet",
            "offset": 0,
            "slot": "163",
            "type": "t_address",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:54"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserProfile)1474_storage)": {
            "label": "mapping(address => struct MStationWallet.UserProfile)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Transaction)1459_storage)": {
            "label": "mapping(uint256 => struct MStationWallet.Transaction)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)",
            "numberOfBytes": "32"
          },
          "t_struct(Transaction)1459_storage": {
            "label": "struct MStationWallet.Transaction",
            "members": [
              {
                "label": "isDeposit",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "tId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "owner",
                "type": "t_address",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(UserProfile)1474_storage": {
            "label": "struct MStationWallet.UserProfile",
            "members": [
              {
                "label": "status",
                "type": "t_uint16",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "credit",
                "type": "t_uint16",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "class",
                "type": "t_uint16",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "totalDeposit",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "totalWithdraw",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "balance",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "lockedAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "3477b05230f4136a227f110d9fd7d1ae4a16183a9e7e47a092de5f2de355afff": {
      "address": "0x03031539813d2472506395C42CA6637E593E4a0E",
      "txHash": "0x3e88a356a517c6a2a185f954b339400ff864a7f99c4513fdd9d3dddadf7149d9",
      "layout": {
        "solcVersion": "0.8.4",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "pause",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:35"
          },
          {
            "label": "whitelistOperator",
            "offset": 0,
            "slot": "152",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:37"
          },
          {
            "label": "addressConfigs",
            "offset": 0,
            "slot": "153",
            "type": "t_mapping(t_uint32,t_address)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:38"
          },
          {
            "label": "mstTokenAddress",
            "offset": 0,
            "slot": "154",
            "type": "t_address",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:39"
          },
          {
            "label": "bscsTokenAddress",
            "offset": 0,
            "slot": "155",
            "type": "t_address",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:41"
          },
          {
            "label": "walletTransCounter",
            "offset": 0,
            "slot": "156",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:43"
          },
          {
            "label": "depositCounter",
            "offset": 0,
            "slot": "157",
            "type": "t_uint256",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:44"
          },
          {
            "label": "depositTransactions",
            "offset": 0,
            "slot": "158",
            "type": "t_mapping(t_uint256,t_struct(Transaction)1459_storage)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:46"
          },
          {
            "label": "withdrawTransactions",
            "offset": 0,
            "slot": "159",
            "type": "t_mapping(t_uint256,t_struct(Transaction)1459_storage)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:48"
          },
          {
            "label": "userProfiles",
            "offset": 0,
            "slot": "160",
            "type": "t_mapping(t_address,t_struct(UserProfile)1474_storage)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:50"
          },
          {
            "label": "balanceMint",
            "offset": 0,
            "slot": "161",
            "type": "t_uint256",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:52"
          },
          {
            "label": "balanceGameReward",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:53"
          },
          {
            "label": "feeWallet",
            "offset": 0,
            "slot": "163",
            "type": "t_address",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:54"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserProfile)1474_storage)": {
            "label": "mapping(address => struct MStationWallet.UserProfile)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Transaction)1459_storage)": {
            "label": "mapping(uint256 => struct MStationWallet.Transaction)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)",
            "numberOfBytes": "32"
          },
          "t_struct(Transaction)1459_storage": {
            "label": "struct MStationWallet.Transaction",
            "members": [
              {
                "label": "isDeposit",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "tId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "owner",
                "type": "t_address",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(UserProfile)1474_storage": {
            "label": "struct MStationWallet.UserProfile",
            "members": [
              {
                "label": "status",
                "type": "t_uint16",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "credit",
                "type": "t_uint16",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "class",
                "type": "t_uint16",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "totalDeposit",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "totalWithdraw",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "balance",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "lockedAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "5c47950b437f6973a5762d72ef94148a25fbcce938e9df53be589315fd3538cd": {
      "address": "0x4bC9e9b16f3dE10d4fecdc305bFad2fC07F30A32",
      "txHash": "0xf877bafefd41cc9dad550ac74c32a4c6019e9d78ac28161365f6a03e8cbcd113",
      "layout": {
        "solcVersion": "0.8.4",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "pause",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:35"
          },
          {
            "label": "whitelistOperator",
            "offset": 0,
            "slot": "152",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:37"
          },
          {
            "label": "addressConfigs",
            "offset": 0,
            "slot": "153",
            "type": "t_mapping(t_uint32,t_address)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:38"
          },
          {
            "label": "mstTokenAddress",
            "offset": 0,
            "slot": "154",
            "type": "t_address",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:39"
          },
          {
            "label": "bscsTokenAddress",
            "offset": 0,
            "slot": "155",
            "type": "t_address",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:41"
          },
          {
            "label": "walletTransCounter",
            "offset": 0,
            "slot": "156",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:43"
          },
          {
            "label": "depositCounter",
            "offset": 0,
            "slot": "157",
            "type": "t_uint256",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:44"
          },
          {
            "label": "depositTransactions",
            "offset": 0,
            "slot": "158",
            "type": "t_mapping(t_uint256,t_struct(Transaction)1459_storage)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:46"
          },
          {
            "label": "withdrawTransactions",
            "offset": 0,
            "slot": "159",
            "type": "t_mapping(t_uint256,t_struct(Transaction)1459_storage)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:48"
          },
          {
            "label": "userProfiles",
            "offset": 0,
            "slot": "160",
            "type": "t_mapping(t_address,t_struct(UserProfile)1474_storage)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:50"
          },
          {
            "label": "balanceMint",
            "offset": 0,
            "slot": "161",
            "type": "t_uint256",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:52"
          },
          {
            "label": "balanceGameReward",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:53"
          },
          {
            "label": "feeWallet",
            "offset": 0,
            "slot": "163",
            "type": "t_address",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:54"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserProfile)1474_storage)": {
            "label": "mapping(address => struct MStationWallet.UserProfile)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Transaction)1459_storage)": {
            "label": "mapping(uint256 => struct MStationWallet.Transaction)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)",
            "numberOfBytes": "32"
          },
          "t_struct(Transaction)1459_storage": {
            "label": "struct MStationWallet.Transaction",
            "members": [
              {
                "label": "isDeposit",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "tId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "owner",
                "type": "t_address",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(UserProfile)1474_storage": {
            "label": "struct MStationWallet.UserProfile",
            "members": [
              {
                "label": "status",
                "type": "t_uint16",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "credit",
                "type": "t_uint16",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "class",
                "type": "t_uint16",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "totalDeposit",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "totalWithdraw",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "balance",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "lockedAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "c3877723dc352b654c05fc561cd8a4dadd0c7a5e5bbbd5fb7de226e1b51eddf9": {
      "address": "0x46A179F763663cCdd5eECED8e0FCb311F4DC5101",
      "txHash": "0x3ac2cb704cf939155d952f9a2c9ae3060c64f78f072a0304bf060c0e665b0ffb",
      "layout": {
        "solcVersion": "0.8.4",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "pause",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:35"
          },
          {
            "label": "whitelistOperator",
            "offset": 0,
            "slot": "152",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:37"
          },
          {
            "label": "addressConfigs",
            "offset": 0,
            "slot": "153",
            "type": "t_mapping(t_uint32,t_address)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:38"
          },
          {
            "label": "mstTokenAddress",
            "offset": 0,
            "slot": "154",
            "type": "t_address",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:39"
          },
          {
            "label": "bscsTokenAddress",
            "offset": 0,
            "slot": "155",
            "type": "t_address",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:41"
          },
          {
            "label": "walletTransCounter",
            "offset": 0,
            "slot": "156",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:43"
          },
          {
            "label": "depositCounter",
            "offset": 0,
            "slot": "157",
            "type": "t_uint256",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:44"
          },
          {
            "label": "depositTransactions",
            "offset": 0,
            "slot": "158",
            "type": "t_mapping(t_uint256,t_struct(Transaction)1459_storage)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:46"
          },
          {
            "label": "withdrawTransactions",
            "offset": 0,
            "slot": "159",
            "type": "t_mapping(t_uint256,t_struct(Transaction)1459_storage)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:48"
          },
          {
            "label": "userProfiles",
            "offset": 0,
            "slot": "160",
            "type": "t_mapping(t_address,t_struct(UserProfile)1474_storage)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:50"
          },
          {
            "label": "balanceMint",
            "offset": 0,
            "slot": "161",
            "type": "t_uint256",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:52"
          },
          {
            "label": "balanceGameReward",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:53"
          },
          {
            "label": "feeWallet",
            "offset": 0,
            "slot": "163",
            "type": "t_address",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:54"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserProfile)1474_storage)": {
            "label": "mapping(address => struct MStationWallet.UserProfile)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Transaction)1459_storage)": {
            "label": "mapping(uint256 => struct MStationWallet.Transaction)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)",
            "numberOfBytes": "32"
          },
          "t_struct(Transaction)1459_storage": {
            "label": "struct MStationWallet.Transaction",
            "members": [
              {
                "label": "isDeposit",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "tId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "owner",
                "type": "t_address",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(UserProfile)1474_storage": {
            "label": "struct MStationWallet.UserProfile",
            "members": [
              {
                "label": "status",
                "type": "t_uint16",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "credit",
                "type": "t_uint16",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "class",
                "type": "t_uint16",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "totalDeposit",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "totalWithdraw",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "balance",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "lockedAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "e67f0055a65e1fcd2f13479dc5a121f516d87920112e35b388b183a398eb3564": {
      "address": "0x0144B9eECf8F8f4ADB3AAda7Aa641a6E443C7462",
      "txHash": "0x27cecce818c8bcba1b58782ee2abfb1279108282bcf2a05aff9e2adadfa2880a",
      "layout": {
        "solcVersion": "0.8.4",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "pause",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:35"
          },
          {
            "label": "whitelistOperator",
            "offset": 0,
            "slot": "152",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:37"
          },
          {
            "label": "addressConfigs",
            "offset": 0,
            "slot": "153",
            "type": "t_mapping(t_uint32,t_address)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:38"
          },
          {
            "label": "mstTokenAddress",
            "offset": 0,
            "slot": "154",
            "type": "t_address",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:39"
          },
          {
            "label": "bscsTokenAddress",
            "offset": 0,
            "slot": "155",
            "type": "t_address",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:41"
          },
          {
            "label": "walletTransCounter",
            "offset": 0,
            "slot": "156",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:43"
          },
          {
            "label": "depositCounter",
            "offset": 0,
            "slot": "157",
            "type": "t_uint256",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:44"
          },
          {
            "label": "depositTransactions",
            "offset": 0,
            "slot": "158",
            "type": "t_mapping(t_uint256,t_struct(Transaction)1459_storage)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:46"
          },
          {
            "label": "withdrawTransactions",
            "offset": 0,
            "slot": "159",
            "type": "t_mapping(t_uint256,t_struct(Transaction)1459_storage)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:48"
          },
          {
            "label": "userProfiles",
            "offset": 0,
            "slot": "160",
            "type": "t_mapping(t_address,t_struct(UserProfile)1474_storage)",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:50"
          },
          {
            "label": "balanceMint",
            "offset": 0,
            "slot": "161",
            "type": "t_uint256",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:52"
          },
          {
            "label": "balanceGameReward",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:53"
          },
          {
            "label": "feeWallet",
            "offset": 0,
            "slot": "163",
            "type": "t_address",
            "contract": "MStationWallet",
            "src": "contracts\\mstationWallet\\MStationWallet.sol:54"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserProfile)1474_storage)": {
            "label": "mapping(address => struct MStationWallet.UserProfile)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Transaction)1459_storage)": {
            "label": "mapping(uint256 => struct MStationWallet.Transaction)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)",
            "numberOfBytes": "32"
          },
          "t_struct(Transaction)1459_storage": {
            "label": "struct MStationWallet.Transaction",
            "members": [
              {
                "label": "isDeposit",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "tId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "owner",
                "type": "t_address",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(UserProfile)1474_storage": {
            "label": "struct MStationWallet.UserProfile",
            "members": [
              {
                "label": "status",
                "type": "t_uint16",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "credit",
                "type": "t_uint16",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "class",
                "type": "t_uint16",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "totalDeposit",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "totalWithdraw",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "balance",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "lockedAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "f07ce01dedfea30f0fba2474916743d0f7ac55f17ce68f5e9c3b8bc814b1ffcf": {
      "address": "0x7c4E2744292Ee64F58940559eE29E60572296f3B",
      "txHash": "0x3969535fb1b046f7fd90cb0df11c3e7e749f77f6bbe63ba5ea40482e29f16073",
      "layout": {
        "solcVersion": "0.8.4",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "isInitialized",
            "offset": 0,
            "slot": "101",
            "type": "t_bool",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:46"
          },
          {
            "label": "nonceRandom",
            "offset": 0,
            "slot": "102",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:47"
          },
          {
            "label": "treasury",
            "offset": 0,
            "slot": "103",
            "type": "t_address",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:48"
          },
          {
            "label": "burnWallet",
            "offset": 0,
            "slot": "104",
            "type": "t_address",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:49"
          },
          {
            "label": "bscsAddress",
            "offset": 0,
            "slot": "105",
            "type": "t_contract(ERC20Upgradeable)2958",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:50"
          },
          {
            "label": "bscdAddress",
            "offset": 0,
            "slot": "106",
            "type": "t_contract(ERC20Upgradeable)2958",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:51"
          },
          {
            "label": "busdAddress",
            "offset": 0,
            "slot": "107",
            "type": "t_contract(ERC20Upgradeable)2958",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:52"
          },
          {
            "label": "maxSupply",
            "offset": 0,
            "slot": "108",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:53"
          },
          {
            "label": "totalSupplied",
            "offset": 0,
            "slot": "109",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:54"
          },
          {
            "label": "nftSlots",
            "offset": 0,
            "slot": "110",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:55"
          },
          {
            "label": "baseMintFee",
            "offset": 0,
            "slot": "111",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:56"
          },
          {
            "label": "baseMintLimitedFee",
            "offset": 0,
            "slot": "112",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:57"
          },
          {
            "label": "tokenMintLimitedFee",
            "offset": 0,
            "slot": "113",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:58"
          },
          {
            "label": "serviceFee",
            "offset": 0,
            "slot": "114",
            "type": "t_uint16",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:59"
          },
          {
            "label": "characterContracts",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_struct(CharacterContract)17007_storage)dyn_storage",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:61"
          },
          {
            "label": "tokenId",
            "offset": 0,
            "slot": "116",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:63"
          },
          {
            "label": "blackList",
            "offset": 0,
            "slot": "117",
            "type": "t_mapping(t_uint256,t_bool)",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:64"
          },
          {
            "label": "priorityList",
            "offset": 0,
            "slot": "118",
            "type": "t_mapping(t_uint256,t_bool)",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:65"
          },
          {
            "label": "bnbMintFee",
            "offset": 0,
            "slot": "119",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:66"
          },
          {
            "label": "nonceRandom2",
            "offset": 0,
            "slot": "120",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:67"
          },
          {
            "label": "nonceRandom3",
            "offset": 0,
            "slot": "121",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:68"
          },
          {
            "label": "characterContractMap",
            "offset": 0,
            "slot": "122",
            "type": "t_mapping(t_uint16,t_struct(CharacterContract)17007_storage)",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:69"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "123",
            "type": "t_uint256",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:72"
          },
          {
            "label": "userClaimable",
            "offset": 0,
            "slot": "124",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Hero)17052_storage))",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:73"
          },
          {
            "label": "userClaimCounter",
            "offset": 0,
            "slot": "125",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:74"
          },
          {
            "label": "userMintBlock",
            "offset": 0,
            "slot": "126",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:75"
          },
          {
            "label": "referralAddress",
            "offset": 0,
            "slot": "127",
            "type": "t_address",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:76"
          },
          {
            "label": "walletAddress",
            "offset": 0,
            "slot": "128",
            "type": "t_address",
            "contract": "MstationNFT",
            "src": "contracts\\mstationNFT\\MstationNFT.sol:77"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_struct(CharacterContract)17007_storage)dyn_storage": {
            "label": "struct MstationNFT.CharacterContract[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint16)dyn_storage": {
            "label": "uint16[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(ERC20Upgradeable)2958": {
            "label": "contract ERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Hero)17052_storage))": {
            "label": "mapping(address => mapping(uint256 => struct MstationNFT.Hero))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint16,t_struct(CharacterContract)17007_storage)": {
            "label": "mapping(uint16 => struct MstationNFT.CharacterContract)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Hero)17052_storage)": {
            "label": "mapping(uint256 => struct MstationNFT.Hero)",
            "numberOfBytes": "32"
          },
          "t_struct(CharacterContract)17007_storage": {
            "label": "struct MstationNFT.CharacterContract",
            "members": [
              {
                "label": "id",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "rarity",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "contractAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Hero)17052_storage": {
            "label": "struct MstationNFT.Hero",
            "members": [
              {
                "label": "nftAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "tokenId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "feeMST",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "feeBUSD",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "attributes",
                "type": "t_array(t_uint16)dyn_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "6bf19b36cd7c8731e4c215ab5ba998665a1362779ab2f477da0496353c5777e6": {
      "address": "0x61A801d4A8969f9aC74afAC65A769EB0478EdcBC",
      "txHash": "0x2538c3c1b83936b17f551fc046b0e07af311c8e3d5e46d7a9130f62858908fd0",
      "layout": {
        "solcVersion": "0.8.4",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "pause",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:27"
          },
          {
            "label": "rewardPerInvitation",
            "offset": 0,
            "slot": "152",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:29"
          },
          {
            "label": "rewardTokenAddress",
            "offset": 0,
            "slot": "153",
            "type": "t_contract(IERC20)1099",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:31"
          },
          {
            "label": "rewardWallet",
            "offset": 0,
            "slot": "154",
            "type": "t_address",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:33"
          },
          {
            "label": "userRewards",
            "offset": 0,
            "slot": "155",
            "type": "t_mapping(t_address,t_struct(UserReward)1458_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:35"
          },
          {
            "label": "userRewarded",
            "offset": 0,
            "slot": "156",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:37"
          },
          {
            "label": "whitelistOperator",
            "offset": 0,
            "slot": "157",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:39"
          },
          {
            "label": "bonusPercent",
            "offset": 0,
            "slot": "158",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:41"
          },
          {
            "label": "userRewards2",
            "offset": 0,
            "slot": "159",
            "type": "t_mapping(t_address,t_struct(UserReward)1458_storage)",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:43"
          },
          {
            "label": "referralAddress",
            "offset": 0,
            "slot": "160",
            "type": "t_mapping(t_address,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:45"
          },
          {
            "label": "claimed",
            "offset": 0,
            "slot": "161",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:46"
          },
          {
            "label": "addressConfigs",
            "offset": 0,
            "slot": "162",
            "type": "t_mapping(t_uint32,t_address)",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:47"
          },
          {
            "label": "limitAmount",
            "offset": 0,
            "slot": "163",
            "type": "t_uint256",
            "contract": "ReferralBonus",
            "src": "contracts\\referral\\ReferralBonus.sol:50"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20)1099": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserReward)1458_storage)": {
            "label": "mapping(address => struct ReferralBonus.UserReward)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)",
            "numberOfBytes": "32"
          },
          "t_struct(UserReward)1458_storage": {
            "label": "struct ReferralBonus.UserReward",
            "members": [
              {
                "label": "rewardAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "deptAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    }
  }
}
